// Code generated by goa v3.21.5, DO NOT EDIT.
//
// mailing-list HTTP client CLI support package
//
// Command:
// $ goa gen
// github.com/linuxfoundation/lfx-v2-mailing-list-service/cmd/mailing-list-api/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	mailinglistc "github.com/linuxfoundation/lfx-v2-mailing-list-service/gen/http/mailing_list/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `mailing-list (livez|readyz|get-grpsio-service)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` mailing-list livez` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		mailingListFlags = flag.NewFlagSet("mailing-list", flag.ContinueOnError)

		mailingListLivezFlags = flag.NewFlagSet("livez", flag.ExitOnError)

		mailingListReadyzFlags = flag.NewFlagSet("readyz", flag.ExitOnError)

		mailingListGetGrpsioServiceFlags           = flag.NewFlagSet("get-grpsio-service", flag.ExitOnError)
		mailingListGetGrpsioServiceUIDFlag         = mailingListGetGrpsioServiceFlags.String("uid", "REQUIRED", "Service unique identifier")
		mailingListGetGrpsioServiceVersionFlag     = mailingListGetGrpsioServiceFlags.String("version", "", "")
		mailingListGetGrpsioServiceBearerTokenFlag = mailingListGetGrpsioServiceFlags.String("bearer-token", "", "")
	)
	mailingListFlags.Usage = mailingListUsage
	mailingListLivezFlags.Usage = mailingListLivezUsage
	mailingListReadyzFlags.Usage = mailingListReadyzUsage
	mailingListGetGrpsioServiceFlags.Usage = mailingListGetGrpsioServiceUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "mailing-list":
			svcf = mailingListFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "mailing-list":
			switch epn {
			case "livez":
				epf = mailingListLivezFlags

			case "readyz":
				epf = mailingListReadyzFlags

			case "get-grpsio-service":
				epf = mailingListGetGrpsioServiceFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "mailing-list":
			c := mailinglistc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "livez":
				endpoint = c.Livez()
			case "readyz":
				endpoint = c.Readyz()
			case "get-grpsio-service":
				endpoint = c.GetGrpsioService()
				data, err = mailinglistc.BuildGetGrpsioServicePayload(*mailingListGetGrpsioServiceUIDFlag, *mailingListGetGrpsioServiceVersionFlag, *mailingListGetGrpsioServiceBearerTokenFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// mailingListUsage displays the usage of the mailing-list command and its
// subcommands.
func mailingListUsage() {
	fmt.Fprintf(os.Stderr, `The mailing list service manages mailing lists and services
Usage:
    %[1]s [globalflags] mailing-list COMMAND [flags]

COMMAND:
    livez: Check if the service is alive.
    readyz: Check if the service is able to take inbound requests.
    get-grpsio-service: Get groupsIO service details by ID

Additional help:
    %[1]s mailing-list COMMAND --help
`, os.Args[0])
}
func mailingListLivezUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] mailing-list livez

Check if the service is alive.

Example:
    %[1]s mailing-list livez
`, os.Args[0])
}

func mailingListReadyzUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] mailing-list readyz

Check if the service is able to take inbound requests.

Example:
    %[1]s mailing-list readyz
`, os.Args[0])
}

func mailingListGetGrpsioServiceUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] mailing-list get-grpsio-service -uid STRING -version STRING -bearer-token STRING

Get groupsIO service details by ID
    -uid STRING: Service unique identifier
    -version STRING: 
    -bearer-token STRING: 

Example:
    %[1]s mailing-list get-grpsio-service --uid "Est est delectus et eum." --version "1" --bearer-token "eyJhbGci..."
`, os.Args[0])
}
