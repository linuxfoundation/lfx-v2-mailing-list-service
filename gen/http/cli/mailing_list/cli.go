// Code generated by goa v3.21.5, DO NOT EDIT.
//
// mailing-list HTTP client CLI support package
//
// Command:
// $ goa gen
// github.com/linuxfoundation/lfx-v2-mailing-list-service/cmd/mailing-list-api/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	mailinglistc "github.com/linuxfoundation/lfx-v2-mailing-list-service/gen/http/mailing_list/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `mailing-list (livez|readyz|create-grpsio-service|get-grpsio-service|update-grpsio-service|delete-grpsio-service|create-grpsio-mailing-list|get-grpsio-mailing-list|update-grpsio-mailing-list|delete-grpsio-mailing-list|create-grpsio-mailing-list-member|get-grpsio-mailing-list-member|update-grpsio-mailing-list-member|delete-grpsio-mailing-list-member|groupsio-webhook)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` mailing-list livez` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		mailingListFlags = flag.NewFlagSet("mailing-list", flag.ContinueOnError)

		mailingListLivezFlags = flag.NewFlagSet("livez", flag.ExitOnError)

		mailingListReadyzFlags = flag.NewFlagSet("readyz", flag.ExitOnError)

		mailingListCreateGrpsioServiceFlags           = flag.NewFlagSet("create-grpsio-service", flag.ExitOnError)
		mailingListCreateGrpsioServiceBodyFlag        = mailingListCreateGrpsioServiceFlags.String("body", "REQUIRED", "")
		mailingListCreateGrpsioServiceVersionFlag     = mailingListCreateGrpsioServiceFlags.String("version", "REQUIRED", "")
		mailingListCreateGrpsioServiceBearerTokenFlag = mailingListCreateGrpsioServiceFlags.String("bearer-token", "", "")

		mailingListGetGrpsioServiceFlags           = flag.NewFlagSet("get-grpsio-service", flag.ExitOnError)
		mailingListGetGrpsioServiceUIDFlag         = mailingListGetGrpsioServiceFlags.String("uid", "REQUIRED", "Service UID -- unique identifier for the service")
		mailingListGetGrpsioServiceVersionFlag     = mailingListGetGrpsioServiceFlags.String("version", "", "")
		mailingListGetGrpsioServiceBearerTokenFlag = mailingListGetGrpsioServiceFlags.String("bearer-token", "", "")

		mailingListUpdateGrpsioServiceFlags           = flag.NewFlagSet("update-grpsio-service", flag.ExitOnError)
		mailingListUpdateGrpsioServiceBodyFlag        = mailingListUpdateGrpsioServiceFlags.String("body", "REQUIRED", "")
		mailingListUpdateGrpsioServiceUIDFlag         = mailingListUpdateGrpsioServiceFlags.String("uid", "REQUIRED", "Service UID -- unique identifier for the service")
		mailingListUpdateGrpsioServiceVersionFlag     = mailingListUpdateGrpsioServiceFlags.String("version", "REQUIRED", "")
		mailingListUpdateGrpsioServiceBearerTokenFlag = mailingListUpdateGrpsioServiceFlags.String("bearer-token", "", "")
		mailingListUpdateGrpsioServiceIfMatchFlag     = mailingListUpdateGrpsioServiceFlags.String("if-match", "", "")

		mailingListDeleteGrpsioServiceFlags           = flag.NewFlagSet("delete-grpsio-service", flag.ExitOnError)
		mailingListDeleteGrpsioServiceUIDFlag         = mailingListDeleteGrpsioServiceFlags.String("uid", "REQUIRED", "Service UID -- unique identifier for the service")
		mailingListDeleteGrpsioServiceVersionFlag     = mailingListDeleteGrpsioServiceFlags.String("version", "", "")
		mailingListDeleteGrpsioServiceBearerTokenFlag = mailingListDeleteGrpsioServiceFlags.String("bearer-token", "", "")
		mailingListDeleteGrpsioServiceIfMatchFlag     = mailingListDeleteGrpsioServiceFlags.String("if-match", "", "")

		mailingListCreateGrpsioMailingListFlags           = flag.NewFlagSet("create-grpsio-mailing-list", flag.ExitOnError)
		mailingListCreateGrpsioMailingListBodyFlag        = mailingListCreateGrpsioMailingListFlags.String("body", "REQUIRED", "")
		mailingListCreateGrpsioMailingListVersionFlag     = mailingListCreateGrpsioMailingListFlags.String("version", "REQUIRED", "")
		mailingListCreateGrpsioMailingListBearerTokenFlag = mailingListCreateGrpsioMailingListFlags.String("bearer-token", "", "")

		mailingListGetGrpsioMailingListFlags           = flag.NewFlagSet("get-grpsio-mailing-list", flag.ExitOnError)
		mailingListGetGrpsioMailingListUIDFlag         = mailingListGetGrpsioMailingListFlags.String("uid", "REQUIRED", "Mailing list UID -- unique identifier for the mailing list")
		mailingListGetGrpsioMailingListVersionFlag     = mailingListGetGrpsioMailingListFlags.String("version", "REQUIRED", "")
		mailingListGetGrpsioMailingListBearerTokenFlag = mailingListGetGrpsioMailingListFlags.String("bearer-token", "REQUIRED", "")

		mailingListUpdateGrpsioMailingListFlags           = flag.NewFlagSet("update-grpsio-mailing-list", flag.ExitOnError)
		mailingListUpdateGrpsioMailingListBodyFlag        = mailingListUpdateGrpsioMailingListFlags.String("body", "REQUIRED", "")
		mailingListUpdateGrpsioMailingListUIDFlag         = mailingListUpdateGrpsioMailingListFlags.String("uid", "REQUIRED", "Mailing list UID -- unique identifier for the mailing list")
		mailingListUpdateGrpsioMailingListVersionFlag     = mailingListUpdateGrpsioMailingListFlags.String("version", "REQUIRED", "")
		mailingListUpdateGrpsioMailingListBearerTokenFlag = mailingListUpdateGrpsioMailingListFlags.String("bearer-token", "", "")
		mailingListUpdateGrpsioMailingListIfMatchFlag     = mailingListUpdateGrpsioMailingListFlags.String("if-match", "", "")

		mailingListDeleteGrpsioMailingListFlags           = flag.NewFlagSet("delete-grpsio-mailing-list", flag.ExitOnError)
		mailingListDeleteGrpsioMailingListUIDFlag         = mailingListDeleteGrpsioMailingListFlags.String("uid", "REQUIRED", "Mailing list UID -- unique identifier for the mailing list")
		mailingListDeleteGrpsioMailingListVersionFlag     = mailingListDeleteGrpsioMailingListFlags.String("version", "", "")
		mailingListDeleteGrpsioMailingListBearerTokenFlag = mailingListDeleteGrpsioMailingListFlags.String("bearer-token", "", "")
		mailingListDeleteGrpsioMailingListIfMatchFlag     = mailingListDeleteGrpsioMailingListFlags.String("if-match", "", "")

		mailingListCreateGrpsioMailingListMemberFlags           = flag.NewFlagSet("create-grpsio-mailing-list-member", flag.ExitOnError)
		mailingListCreateGrpsioMailingListMemberBodyFlag        = mailingListCreateGrpsioMailingListMemberFlags.String("body", "REQUIRED", "")
		mailingListCreateGrpsioMailingListMemberUIDFlag         = mailingListCreateGrpsioMailingListMemberFlags.String("uid", "REQUIRED", "Mailing list UID")
		mailingListCreateGrpsioMailingListMemberVersionFlag     = mailingListCreateGrpsioMailingListMemberFlags.String("version", "REQUIRED", "")
		mailingListCreateGrpsioMailingListMemberBearerTokenFlag = mailingListCreateGrpsioMailingListMemberFlags.String("bearer-token", "", "")

		mailingListGetGrpsioMailingListMemberFlags           = flag.NewFlagSet("get-grpsio-mailing-list-member", flag.ExitOnError)
		mailingListGetGrpsioMailingListMemberUIDFlag         = mailingListGetGrpsioMailingListMemberFlags.String("uid", "REQUIRED", "Mailing list UID -- unique identifier for the mailing list")
		mailingListGetGrpsioMailingListMemberMemberUIDFlag   = mailingListGetGrpsioMailingListMemberFlags.String("member-uid", "REQUIRED", "Member UID -- unique identifier for the member")
		mailingListGetGrpsioMailingListMemberVersionFlag     = mailingListGetGrpsioMailingListMemberFlags.String("version", "REQUIRED", "")
		mailingListGetGrpsioMailingListMemberBearerTokenFlag = mailingListGetGrpsioMailingListMemberFlags.String("bearer-token", "REQUIRED", "")

		mailingListUpdateGrpsioMailingListMemberFlags           = flag.NewFlagSet("update-grpsio-mailing-list-member", flag.ExitOnError)
		mailingListUpdateGrpsioMailingListMemberBodyFlag        = mailingListUpdateGrpsioMailingListMemberFlags.String("body", "REQUIRED", "")
		mailingListUpdateGrpsioMailingListMemberUIDFlag         = mailingListUpdateGrpsioMailingListMemberFlags.String("uid", "REQUIRED", "Mailing list UID -- unique identifier for the mailing list")
		mailingListUpdateGrpsioMailingListMemberMemberUIDFlag   = mailingListUpdateGrpsioMailingListMemberFlags.String("member-uid", "REQUIRED", "Member UID -- unique identifier for the member")
		mailingListUpdateGrpsioMailingListMemberVersionFlag     = mailingListUpdateGrpsioMailingListMemberFlags.String("version", "REQUIRED", "")
		mailingListUpdateGrpsioMailingListMemberBearerTokenFlag = mailingListUpdateGrpsioMailingListMemberFlags.String("bearer-token", "REQUIRED", "")
		mailingListUpdateGrpsioMailingListMemberIfMatchFlag     = mailingListUpdateGrpsioMailingListMemberFlags.String("if-match", "REQUIRED", "")

		mailingListDeleteGrpsioMailingListMemberFlags           = flag.NewFlagSet("delete-grpsio-mailing-list-member", flag.ExitOnError)
		mailingListDeleteGrpsioMailingListMemberUIDFlag         = mailingListDeleteGrpsioMailingListMemberFlags.String("uid", "REQUIRED", "Mailing list UID -- unique identifier for the mailing list")
		mailingListDeleteGrpsioMailingListMemberMemberUIDFlag   = mailingListDeleteGrpsioMailingListMemberFlags.String("member-uid", "REQUIRED", "Member UID -- unique identifier for the member")
		mailingListDeleteGrpsioMailingListMemberVersionFlag     = mailingListDeleteGrpsioMailingListMemberFlags.String("version", "REQUIRED", "")
		mailingListDeleteGrpsioMailingListMemberBearerTokenFlag = mailingListDeleteGrpsioMailingListMemberFlags.String("bearer-token", "REQUIRED", "")
		mailingListDeleteGrpsioMailingListMemberIfMatchFlag     = mailingListDeleteGrpsioMailingListMemberFlags.String("if-match", "REQUIRED", "")

		mailingListGroupsioWebhookFlags         = flag.NewFlagSet("groupsio-webhook", flag.ExitOnError)
		mailingListGroupsioWebhookBodyFlag      = mailingListGroupsioWebhookFlags.String("body", "REQUIRED", "")
		mailingListGroupsioWebhookSignatureFlag = mailingListGroupsioWebhookFlags.String("signature", "REQUIRED", "")
	)
	mailingListFlags.Usage = mailingListUsage
	mailingListLivezFlags.Usage = mailingListLivezUsage
	mailingListReadyzFlags.Usage = mailingListReadyzUsage
	mailingListCreateGrpsioServiceFlags.Usage = mailingListCreateGrpsioServiceUsage
	mailingListGetGrpsioServiceFlags.Usage = mailingListGetGrpsioServiceUsage
	mailingListUpdateGrpsioServiceFlags.Usage = mailingListUpdateGrpsioServiceUsage
	mailingListDeleteGrpsioServiceFlags.Usage = mailingListDeleteGrpsioServiceUsage
	mailingListCreateGrpsioMailingListFlags.Usage = mailingListCreateGrpsioMailingListUsage
	mailingListGetGrpsioMailingListFlags.Usage = mailingListGetGrpsioMailingListUsage
	mailingListUpdateGrpsioMailingListFlags.Usage = mailingListUpdateGrpsioMailingListUsage
	mailingListDeleteGrpsioMailingListFlags.Usage = mailingListDeleteGrpsioMailingListUsage
	mailingListCreateGrpsioMailingListMemberFlags.Usage = mailingListCreateGrpsioMailingListMemberUsage
	mailingListGetGrpsioMailingListMemberFlags.Usage = mailingListGetGrpsioMailingListMemberUsage
	mailingListUpdateGrpsioMailingListMemberFlags.Usage = mailingListUpdateGrpsioMailingListMemberUsage
	mailingListDeleteGrpsioMailingListMemberFlags.Usage = mailingListDeleteGrpsioMailingListMemberUsage
	mailingListGroupsioWebhookFlags.Usage = mailingListGroupsioWebhookUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "mailing-list":
			svcf = mailingListFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "mailing-list":
			switch epn {
			case "livez":
				epf = mailingListLivezFlags

			case "readyz":
				epf = mailingListReadyzFlags

			case "create-grpsio-service":
				epf = mailingListCreateGrpsioServiceFlags

			case "get-grpsio-service":
				epf = mailingListGetGrpsioServiceFlags

			case "update-grpsio-service":
				epf = mailingListUpdateGrpsioServiceFlags

			case "delete-grpsio-service":
				epf = mailingListDeleteGrpsioServiceFlags

			case "create-grpsio-mailing-list":
				epf = mailingListCreateGrpsioMailingListFlags

			case "get-grpsio-mailing-list":
				epf = mailingListGetGrpsioMailingListFlags

			case "update-grpsio-mailing-list":
				epf = mailingListUpdateGrpsioMailingListFlags

			case "delete-grpsio-mailing-list":
				epf = mailingListDeleteGrpsioMailingListFlags

			case "create-grpsio-mailing-list-member":
				epf = mailingListCreateGrpsioMailingListMemberFlags

			case "get-grpsio-mailing-list-member":
				epf = mailingListGetGrpsioMailingListMemberFlags

			case "update-grpsio-mailing-list-member":
				epf = mailingListUpdateGrpsioMailingListMemberFlags

			case "delete-grpsio-mailing-list-member":
				epf = mailingListDeleteGrpsioMailingListMemberFlags

			case "groupsio-webhook":
				epf = mailingListGroupsioWebhookFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "mailing-list":
			c := mailinglistc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "livez":
				endpoint = c.Livez()
			case "readyz":
				endpoint = c.Readyz()
			case "create-grpsio-service":
				endpoint = c.CreateGrpsioService()
				data, err = mailinglistc.BuildCreateGrpsioServicePayload(*mailingListCreateGrpsioServiceBodyFlag, *mailingListCreateGrpsioServiceVersionFlag, *mailingListCreateGrpsioServiceBearerTokenFlag)
			case "get-grpsio-service":
				endpoint = c.GetGrpsioService()
				data, err = mailinglistc.BuildGetGrpsioServicePayload(*mailingListGetGrpsioServiceUIDFlag, *mailingListGetGrpsioServiceVersionFlag, *mailingListGetGrpsioServiceBearerTokenFlag)
			case "update-grpsio-service":
				endpoint = c.UpdateGrpsioService()
				data, err = mailinglistc.BuildUpdateGrpsioServicePayload(*mailingListUpdateGrpsioServiceBodyFlag, *mailingListUpdateGrpsioServiceUIDFlag, *mailingListUpdateGrpsioServiceVersionFlag, *mailingListUpdateGrpsioServiceBearerTokenFlag, *mailingListUpdateGrpsioServiceIfMatchFlag)
			case "delete-grpsio-service":
				endpoint = c.DeleteGrpsioService()
				data, err = mailinglistc.BuildDeleteGrpsioServicePayload(*mailingListDeleteGrpsioServiceUIDFlag, *mailingListDeleteGrpsioServiceVersionFlag, *mailingListDeleteGrpsioServiceBearerTokenFlag, *mailingListDeleteGrpsioServiceIfMatchFlag)
			case "create-grpsio-mailing-list":
				endpoint = c.CreateGrpsioMailingList()
				data, err = mailinglistc.BuildCreateGrpsioMailingListPayload(*mailingListCreateGrpsioMailingListBodyFlag, *mailingListCreateGrpsioMailingListVersionFlag, *mailingListCreateGrpsioMailingListBearerTokenFlag)
			case "get-grpsio-mailing-list":
				endpoint = c.GetGrpsioMailingList()
				data, err = mailinglistc.BuildGetGrpsioMailingListPayload(*mailingListGetGrpsioMailingListUIDFlag, *mailingListGetGrpsioMailingListVersionFlag, *mailingListGetGrpsioMailingListBearerTokenFlag)
			case "update-grpsio-mailing-list":
				endpoint = c.UpdateGrpsioMailingList()
				data, err = mailinglistc.BuildUpdateGrpsioMailingListPayload(*mailingListUpdateGrpsioMailingListBodyFlag, *mailingListUpdateGrpsioMailingListUIDFlag, *mailingListUpdateGrpsioMailingListVersionFlag, *mailingListUpdateGrpsioMailingListBearerTokenFlag, *mailingListUpdateGrpsioMailingListIfMatchFlag)
			case "delete-grpsio-mailing-list":
				endpoint = c.DeleteGrpsioMailingList()
				data, err = mailinglistc.BuildDeleteGrpsioMailingListPayload(*mailingListDeleteGrpsioMailingListUIDFlag, *mailingListDeleteGrpsioMailingListVersionFlag, *mailingListDeleteGrpsioMailingListBearerTokenFlag, *mailingListDeleteGrpsioMailingListIfMatchFlag)
			case "create-grpsio-mailing-list-member":
				endpoint = c.CreateGrpsioMailingListMember()
				data, err = mailinglistc.BuildCreateGrpsioMailingListMemberPayload(*mailingListCreateGrpsioMailingListMemberBodyFlag, *mailingListCreateGrpsioMailingListMemberUIDFlag, *mailingListCreateGrpsioMailingListMemberVersionFlag, *mailingListCreateGrpsioMailingListMemberBearerTokenFlag)
			case "get-grpsio-mailing-list-member":
				endpoint = c.GetGrpsioMailingListMember()
				data, err = mailinglistc.BuildGetGrpsioMailingListMemberPayload(*mailingListGetGrpsioMailingListMemberUIDFlag, *mailingListGetGrpsioMailingListMemberMemberUIDFlag, *mailingListGetGrpsioMailingListMemberVersionFlag, *mailingListGetGrpsioMailingListMemberBearerTokenFlag)
			case "update-grpsio-mailing-list-member":
				endpoint = c.UpdateGrpsioMailingListMember()
				data, err = mailinglistc.BuildUpdateGrpsioMailingListMemberPayload(*mailingListUpdateGrpsioMailingListMemberBodyFlag, *mailingListUpdateGrpsioMailingListMemberUIDFlag, *mailingListUpdateGrpsioMailingListMemberMemberUIDFlag, *mailingListUpdateGrpsioMailingListMemberVersionFlag, *mailingListUpdateGrpsioMailingListMemberBearerTokenFlag, *mailingListUpdateGrpsioMailingListMemberIfMatchFlag)
			case "delete-grpsio-mailing-list-member":
				endpoint = c.DeleteGrpsioMailingListMember()
				data, err = mailinglistc.BuildDeleteGrpsioMailingListMemberPayload(*mailingListDeleteGrpsioMailingListMemberUIDFlag, *mailingListDeleteGrpsioMailingListMemberMemberUIDFlag, *mailingListDeleteGrpsioMailingListMemberVersionFlag, *mailingListDeleteGrpsioMailingListMemberBearerTokenFlag, *mailingListDeleteGrpsioMailingListMemberIfMatchFlag)
			case "groupsio-webhook":
				endpoint = c.GroupsioWebhook()
				data, err = mailinglistc.BuildGroupsioWebhookPayload(*mailingListGroupsioWebhookBodyFlag, *mailingListGroupsioWebhookSignatureFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// mailingListUsage displays the usage of the mailing-list command and its
// subcommands.
func mailingListUsage() {
	fmt.Fprintf(os.Stderr, `The mailing list service manages mailing lists and services
Usage:
    %[1]s [globalflags] mailing-list COMMAND [flags]

COMMAND:
    livez: Check if the service is alive.
    readyz: Check if the service is able to take inbound requests.
    create-grpsio-service: Create GroupsIO service with type-specific validation rules
    get-grpsio-service: Get groupsIO service details by ID
    update-grpsio-service: Update GroupsIO service
    delete-grpsio-service: Delete GroupsIO service
    create-grpsio-mailing-list: Create GroupsIO mailing list/subgroup with comprehensive validation
    get-grpsio-mailing-list: Get GroupsIO mailing list details by UID
    update-grpsio-mailing-list: Update GroupsIO mailing list
    delete-grpsio-mailing-list: Delete GroupsIO mailing list
    create-grpsio-mailing-list-member: Create a new member for a GroupsIO mailing list
    get-grpsio-mailing-list-member: Get a member of a GroupsIO mailing list by UID
    update-grpsio-mailing-list-member: Update a member of a GroupsIO mailing list
    delete-grpsio-mailing-list-member: Delete a member from a GroupsIO mailing list
    groupsio-webhook: Handle GroupsIO webhook events for subgroup and member changes

Additional help:
    %[1]s mailing-list COMMAND --help
`, os.Args[0])
}
func mailingListLivezUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] mailing-list livez

Check if the service is alive.

Example:
    %[1]s mailing-list livez
`, os.Args[0])
}

func mailingListReadyzUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] mailing-list readyz

Check if the service is able to take inbound requests.

Example:
    %[1]s mailing-list readyz
`, os.Args[0])
}

func mailingListCreateGrpsioServiceUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] mailing-list create-grpsio-service -body JSON -version STRING -bearer-token STRING

Create GroupsIO service with type-specific validation rules
    -body JSON: 
    -version STRING: 
    -bearer-token STRING: 

Example:
    %[1]s mailing-list create-grpsio-service --body '{
      "auditors": [
         "auditor_user_id1",
         "auditor_user_id2"
      ],
      "domain": "lists.project.org",
      "global_owners": [
         "admin@example.com"
      ],
      "group_id": 12345,
      "group_name": "project-name",
      "prefix": "formation",
      "project_slug": "cncf",
      "project_uid": "7cad5a8d-19d0-41a4-81a6-043453daf9ee",
      "public": true,
      "status": "created",
      "type": "primary",
      "url": "https://lists.project.org",
      "writers": [
         "manager_user_id1",
         "manager_user_id2"
      ]
   }' --version "1" --bearer-token "eyJhbGci..."
`, os.Args[0])
}

func mailingListGetGrpsioServiceUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] mailing-list get-grpsio-service -uid STRING -version STRING -bearer-token STRING

Get groupsIO service details by ID
    -uid STRING: Service UID -- unique identifier for the service
    -version STRING: 
    -bearer-token STRING: 

Example:
    %[1]s mailing-list get-grpsio-service --uid "7cad5a8d-19d0-41a4-81a6-043453daf9ee" --version "1" --bearer-token "eyJhbGci..."
`, os.Args[0])
}

func mailingListUpdateGrpsioServiceUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] mailing-list update-grpsio-service -body JSON -uid STRING -version STRING -bearer-token STRING -if-match STRING

Update GroupsIO service
    -body JSON: 
    -uid STRING: Service UID -- unique identifier for the service
    -version STRING: 
    -bearer-token STRING: 
    -if-match STRING: 

Example:
    %[1]s mailing-list update-grpsio-service --body '{
      "auditors": [
         "auditor_user_id1",
         "auditor_user_id2"
      ],
      "domain": "lists.project.org",
      "global_owners": [
         "admin@example.com"
      ],
      "group_id": 12345,
      "group_name": "project-name",
      "prefix": "formation",
      "project_slug": "cncf",
      "project_uid": "7cad5a8d-19d0-41a4-81a6-043453daf9ee",
      "public": true,
      "status": "created",
      "type": "primary",
      "url": "https://lists.project.org",
      "writers": [
         "manager_user_id1",
         "manager_user_id2"
      ]
   }' --uid "7cad5a8d-19d0-41a4-81a6-043453daf9ee" --version "1" --bearer-token "eyJhbGci..." --if-match "123"
`, os.Args[0])
}

func mailingListDeleteGrpsioServiceUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] mailing-list delete-grpsio-service -uid STRING -version STRING -bearer-token STRING -if-match STRING

Delete GroupsIO service
    -uid STRING: Service UID -- unique identifier for the service
    -version STRING: 
    -bearer-token STRING: 
    -if-match STRING: 

Example:
    %[1]s mailing-list delete-grpsio-service --uid "7cad5a8d-19d0-41a4-81a6-043453daf9ee" --version "1" --bearer-token "eyJhbGci..." --if-match "123"
`, os.Args[0])
}

func mailingListCreateGrpsioMailingListUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] mailing-list create-grpsio-mailing-list -body JSON -version STRING -bearer-token STRING

Create GroupsIO mailing list/subgroup with comprehensive validation
    -body JSON: 
    -version STRING: 
    -bearer-token STRING: 

Example:
    %[1]s mailing-list create-grpsio-mailing-list --body '{
      "auditors": [
         "auditor_user_id1",
         "auditor_user_id2"
      ],
      "committee_filters": [
         "Voting Rep",
         "Alternate Voting Rep"
      ],
      "committee_uid": "7cad5a8d-19d0-41a4-81a6-043453daf9ee",
      "description": "Technical steering committee discussions",
      "group_name": "technical-steering-committee",
      "public": false,
      "service_uid": "7cad5a8d-19d0-41a4-81a6-043453daf9ee",
      "subject_tag": "[TSC]",
      "title": "Technical Steering Committee",
      "type": "discussion_moderated",
      "writers": [
         "manager_user_id1",
         "manager_user_id2"
      ]
   }' --version "1" --bearer-token "eyJhbGci..."
`, os.Args[0])
}

func mailingListGetGrpsioMailingListUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] mailing-list get-grpsio-mailing-list -uid STRING -version STRING -bearer-token STRING

Get GroupsIO mailing list details by UID
    -uid STRING: Mailing list UID -- unique identifier for the mailing list
    -version STRING: 
    -bearer-token STRING: 

Example:
    %[1]s mailing-list get-grpsio-mailing-list --uid "7cad5a8d-19d0-41a4-81a6-043453daf9ee" --version "1" --bearer-token "eyJhbGci..."
`, os.Args[0])
}

func mailingListUpdateGrpsioMailingListUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] mailing-list update-grpsio-mailing-list -body JSON -uid STRING -version STRING -bearer-token STRING -if-match STRING

Update GroupsIO mailing list
    -body JSON: 
    -uid STRING: Mailing list UID -- unique identifier for the mailing list
    -version STRING: 
    -bearer-token STRING: 
    -if-match STRING: 

Example:
    %[1]s mailing-list update-grpsio-mailing-list --body '{
      "auditors": [
         "auditor_user_id1",
         "auditor_user_id2"
      ],
      "committee_filters": [
         "Voting Rep",
         "Alternate Voting Rep"
      ],
      "committee_uid": "7cad5a8d-19d0-41a4-81a6-043453daf9ee",
      "description": "Technical steering committee discussions",
      "group_name": "technical-steering-committee",
      "public": false,
      "service_uid": "7cad5a8d-19d0-41a4-81a6-043453daf9ee",
      "subject_tag": "[TSC]",
      "title": "Technical Steering Committee",
      "type": "discussion_moderated",
      "writers": [
         "manager_user_id1",
         "manager_user_id2"
      ]
   }' --uid "7cad5a8d-19d0-41a4-81a6-043453daf9ee" --version "1" --bearer-token "eyJhbGci..." --if-match "123"
`, os.Args[0])
}

func mailingListDeleteGrpsioMailingListUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] mailing-list delete-grpsio-mailing-list -uid STRING -version STRING -bearer-token STRING -if-match STRING

Delete GroupsIO mailing list
    -uid STRING: Mailing list UID -- unique identifier for the mailing list
    -version STRING: 
    -bearer-token STRING: 
    -if-match STRING: 

Example:
    %[1]s mailing-list delete-grpsio-mailing-list --uid "7cad5a8d-19d0-41a4-81a6-043453daf9ee" --version "1" --bearer-token "eyJhbGci..." --if-match "123"
`, os.Args[0])
}

func mailingListCreateGrpsioMailingListMemberUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] mailing-list create-grpsio-mailing-list-member -body JSON -uid STRING -version STRING -bearer-token STRING

Create a new member for a GroupsIO mailing list
    -body JSON: 
    -uid STRING: Mailing list UID
    -version STRING: 
    -bearer-token STRING: 

Example:
    %[1]s mailing-list create-grpsio-mailing-list-member --body '{
      "delivery_mode": "digest",
      "email": "john.doe@example.com",
      "first_name": "John",
      "job_title": "Software Engineer",
      "last_name": "Doe",
      "last_reviewed_at": "2023-01-15T14:30:00Z",
      "last_reviewed_by": "admin@example.com",
      "member_type": "direct",
      "mod_status": "owner",
      "organization": "Example Corp",
      "username": "jdoe"
   }' --uid "f47ac10b-58cc-4372-a567-0e02b2c3d479" --version "1" --bearer-token "eyJhbGci..."
`, os.Args[0])
}

func mailingListGetGrpsioMailingListMemberUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] mailing-list get-grpsio-mailing-list-member -uid STRING -member-uid STRING -version STRING -bearer-token STRING

Get a member of a GroupsIO mailing list by UID
    -uid STRING: Mailing list UID -- unique identifier for the mailing list
    -member-uid STRING: Member UID -- unique identifier for the member
    -version STRING: 
    -bearer-token STRING: 

Example:
    %[1]s mailing-list get-grpsio-mailing-list-member --uid "7cad5a8d-19d0-41a4-81a6-043453daf9ee" --member-uid "f47ac10b-58cc-4372-a567-0e02b2c3d479" --version "1" --bearer-token "eyJhbGci..."
`, os.Args[0])
}

func mailingListUpdateGrpsioMailingListMemberUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] mailing-list update-grpsio-mailing-list-member -body JSON -uid STRING -member-uid STRING -version STRING -bearer-token STRING -if-match STRING

Update a member of a GroupsIO mailing list
    -body JSON: 
    -uid STRING: Mailing list UID -- unique identifier for the mailing list
    -member-uid STRING: Member UID -- unique identifier for the member
    -version STRING: 
    -bearer-token STRING: 
    -if-match STRING: 

Example:
    %[1]s mailing-list update-grpsio-mailing-list-member --body '{
      "delivery_mode": "digest",
      "first_name": "John",
      "job_title": "Software Engineer",
      "last_name": "Doe",
      "mod_status": "none",
      "organization": "Example Corp",
      "username": "jdoe"
   }' --uid "7cad5a8d-19d0-41a4-81a6-043453daf9ee" --member-uid "f47ac10b-58cc-4372-a567-0e02b2c3d479" --version "1" --bearer-token "eyJhbGci..." --if-match "123"
`, os.Args[0])
}

func mailingListDeleteGrpsioMailingListMemberUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] mailing-list delete-grpsio-mailing-list-member -uid STRING -member-uid STRING -version STRING -bearer-token STRING -if-match STRING

Delete a member from a GroupsIO mailing list
    -uid STRING: Mailing list UID -- unique identifier for the mailing list
    -member-uid STRING: Member UID -- unique identifier for the member
    -version STRING: 
    -bearer-token STRING: 
    -if-match STRING: 

Example:
    %[1]s mailing-list delete-grpsio-mailing-list-member --uid "7cad5a8d-19d0-41a4-81a6-043453daf9ee" --member-uid "f47ac10b-58cc-4372-a567-0e02b2c3d479" --version "1" --bearer-token "eyJhbGci..." --if-match "123"
`, os.Args[0])
}

func mailingListGroupsioWebhookUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] mailing-list groupsio-webhook -body JSON -signature STRING

Handle GroupsIO webhook events for subgroup and member changes
    -body JSON: 
    -signature STRING: 

Example:
    %[1]s mailing-list groupsio-webhook --body '{
      "action": "created_subgroup",
      "extra": "Sapiente quo eveniet iusto sit aperiam neque.",
      "extra_id": 5841507716260392508,
      "group": "Repudiandae aliquid eius quis.",
      "member_info": "Porro aliquam esse odit nemo."
   }' --signature "Hic repellendus."
`, os.Args[0])
}
