// Code generated by goa v3.21.5, DO NOT EDIT.
//
// mailing-list HTTP client CLI support package
//
// Command:
// $ goa gen
// github.com/linuxfoundation/lfx-v2-mailing-list-service/cmd/mailing-list-api/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	mailinglistc "github.com/linuxfoundation/lfx-v2-mailing-list-service/gen/http/mailing_list/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `mailing-list (livez|readyz|create-grpsio-service|get-grpsio-service|update-grpsio-service|delete-grpsio-service)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` mailing-list livez` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		mailingListFlags = flag.NewFlagSet("mailing-list", flag.ContinueOnError)

		mailingListLivezFlags = flag.NewFlagSet("livez", flag.ExitOnError)

		mailingListReadyzFlags = flag.NewFlagSet("readyz", flag.ExitOnError)

		mailingListCreateGrpsioServiceFlags           = flag.NewFlagSet("create-grpsio-service", flag.ExitOnError)
		mailingListCreateGrpsioServiceBodyFlag        = mailingListCreateGrpsioServiceFlags.String("body", "REQUIRED", "")
		mailingListCreateGrpsioServiceVersionFlag     = mailingListCreateGrpsioServiceFlags.String("version", "", "")
		mailingListCreateGrpsioServiceBearerTokenFlag = mailingListCreateGrpsioServiceFlags.String("bearer-token", "", "")

		mailingListGetGrpsioServiceFlags           = flag.NewFlagSet("get-grpsio-service", flag.ExitOnError)
		mailingListGetGrpsioServiceUIDFlag         = mailingListGetGrpsioServiceFlags.String("uid", "REQUIRED", "Service UID -- unique identifier for the service")
		mailingListGetGrpsioServiceVersionFlag     = mailingListGetGrpsioServiceFlags.String("version", "", "")
		mailingListGetGrpsioServiceBearerTokenFlag = mailingListGetGrpsioServiceFlags.String("bearer-token", "", "")

		mailingListUpdateGrpsioServiceFlags           = flag.NewFlagSet("update-grpsio-service", flag.ExitOnError)
		mailingListUpdateGrpsioServiceBodyFlag        = mailingListUpdateGrpsioServiceFlags.String("body", "REQUIRED", "")
		mailingListUpdateGrpsioServiceUIDFlag         = mailingListUpdateGrpsioServiceFlags.String("uid", "REQUIRED", "Service UID -- unique identifier for the service")
		mailingListUpdateGrpsioServiceVersionFlag     = mailingListUpdateGrpsioServiceFlags.String("version", "", "")
		mailingListUpdateGrpsioServiceBearerTokenFlag = mailingListUpdateGrpsioServiceFlags.String("bearer-token", "", "")
		mailingListUpdateGrpsioServiceEtagFlag        = mailingListUpdateGrpsioServiceFlags.String("etag", "", "")
		mailingListUpdateGrpsioServiceIfMatchFlag     = mailingListUpdateGrpsioServiceFlags.String("if-match", "", "")

		mailingListDeleteGrpsioServiceFlags           = flag.NewFlagSet("delete-grpsio-service", flag.ExitOnError)
		mailingListDeleteGrpsioServiceUIDFlag         = mailingListDeleteGrpsioServiceFlags.String("uid", "REQUIRED", "Service UID -- unique identifier for the service")
		mailingListDeleteGrpsioServiceVersionFlag     = mailingListDeleteGrpsioServiceFlags.String("version", "", "")
		mailingListDeleteGrpsioServiceBearerTokenFlag = mailingListDeleteGrpsioServiceFlags.String("bearer-token", "", "")
		mailingListDeleteGrpsioServiceEtagFlag        = mailingListDeleteGrpsioServiceFlags.String("etag", "", "")
		mailingListDeleteGrpsioServiceIfMatchFlag     = mailingListDeleteGrpsioServiceFlags.String("if-match", "", "")
	)
	mailingListFlags.Usage = mailingListUsage
	mailingListLivezFlags.Usage = mailingListLivezUsage
	mailingListReadyzFlags.Usage = mailingListReadyzUsage
	mailingListCreateGrpsioServiceFlags.Usage = mailingListCreateGrpsioServiceUsage
	mailingListGetGrpsioServiceFlags.Usage = mailingListGetGrpsioServiceUsage
	mailingListUpdateGrpsioServiceFlags.Usage = mailingListUpdateGrpsioServiceUsage
	mailingListDeleteGrpsioServiceFlags.Usage = mailingListDeleteGrpsioServiceUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "mailing-list":
			svcf = mailingListFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "mailing-list":
			switch epn {
			case "livez":
				epf = mailingListLivezFlags

			case "readyz":
				epf = mailingListReadyzFlags

			case "create-grpsio-service":
				epf = mailingListCreateGrpsioServiceFlags

			case "get-grpsio-service":
				epf = mailingListGetGrpsioServiceFlags

			case "update-grpsio-service":
				epf = mailingListUpdateGrpsioServiceFlags

			case "delete-grpsio-service":
				epf = mailingListDeleteGrpsioServiceFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "mailing-list":
			c := mailinglistc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "livez":
				endpoint = c.Livez()
			case "readyz":
				endpoint = c.Readyz()
			case "create-grpsio-service":
				endpoint = c.CreateGrpsioService()
				data, err = mailinglistc.BuildCreateGrpsioServicePayload(*mailingListCreateGrpsioServiceBodyFlag, *mailingListCreateGrpsioServiceVersionFlag, *mailingListCreateGrpsioServiceBearerTokenFlag)
			case "get-grpsio-service":
				endpoint = c.GetGrpsioService()
				data, err = mailinglistc.BuildGetGrpsioServicePayload(*mailingListGetGrpsioServiceUIDFlag, *mailingListGetGrpsioServiceVersionFlag, *mailingListGetGrpsioServiceBearerTokenFlag)
			case "update-grpsio-service":
				endpoint = c.UpdateGrpsioService()
				data, err = mailinglistc.BuildUpdateGrpsioServicePayload(*mailingListUpdateGrpsioServiceBodyFlag, *mailingListUpdateGrpsioServiceUIDFlag, *mailingListUpdateGrpsioServiceVersionFlag, *mailingListUpdateGrpsioServiceBearerTokenFlag, *mailingListUpdateGrpsioServiceEtagFlag, *mailingListUpdateGrpsioServiceIfMatchFlag)
			case "delete-grpsio-service":
				endpoint = c.DeleteGrpsioService()
				data, err = mailinglistc.BuildDeleteGrpsioServicePayload(*mailingListDeleteGrpsioServiceUIDFlag, *mailingListDeleteGrpsioServiceVersionFlag, *mailingListDeleteGrpsioServiceBearerTokenFlag, *mailingListDeleteGrpsioServiceEtagFlag, *mailingListDeleteGrpsioServiceIfMatchFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// mailingListUsage displays the usage of the mailing-list command and its
// subcommands.
func mailingListUsage() {
	fmt.Fprintf(os.Stderr, `The mailing list service manages mailing lists and services
Usage:
    %[1]s [globalflags] mailing-list COMMAND [flags]

COMMAND:
    livez: Check if the service is alive.
    readyz: Check if the service is able to take inbound requests.
    create-grpsio-service: Create GroupsIO service with type-specific validation rules
    get-grpsio-service: Get groupsIO service details by ID
    update-grpsio-service: Update GroupsIO service
    delete-grpsio-service: Delete GroupsIO service

Additional help:
    %[1]s mailing-list COMMAND --help
`, os.Args[0])
}
func mailingListLivezUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] mailing-list livez

Check if the service is alive.

Example:
    %[1]s mailing-list livez
`, os.Args[0])
}

func mailingListReadyzUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] mailing-list readyz

Check if the service is able to take inbound requests.

Example:
    %[1]s mailing-list readyz
`, os.Args[0])
}

func mailingListCreateGrpsioServiceUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] mailing-list create-grpsio-service -body JSON -version STRING -bearer-token STRING

Create GroupsIO service with type-specific validation rules
    -body JSON: 
    -version STRING: 
    -bearer-token STRING: 

Example:
    %[1]s mailing-list create-grpsio-service --body '{
      "auditors": [
         "auditor_user_id1",
         "auditor_user_id2"
      ],
      "domain": "lists.project.org",
      "global_owners": [
         "admin@example.com"
      ],
      "group_id": 12345,
      "group_name": "project-name",
      "prefix": "formation",
      "project_slug": "cncf",
      "project_uid": "7cad5a8d-19d0-41a4-81a6-043453daf9ee",
      "public": true,
      "status": "created",
      "type": "primary",
      "url": "https://lists.project.org",
      "writers": [
         "manager_user_id1",
         "manager_user_id2"
      ]
   }' --version "1" --bearer-token "eyJhbGci..."
`, os.Args[0])
}

func mailingListGetGrpsioServiceUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] mailing-list get-grpsio-service -uid STRING -version STRING -bearer-token STRING

Get groupsIO service details by ID
    -uid STRING: Service UID -- unique identifier for the service
    -version STRING: 
    -bearer-token STRING: 

Example:
    %[1]s mailing-list get-grpsio-service --uid "7cad5a8d-19d0-41a4-81a6-043453daf9ee" --version "1" --bearer-token "eyJhbGci..."
`, os.Args[0])
}

func mailingListUpdateGrpsioServiceUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] mailing-list update-grpsio-service -body JSON -uid STRING -version STRING -bearer-token STRING -etag STRING -if-match STRING

Update GroupsIO service
    -body JSON: 
    -uid STRING: Service UID -- unique identifier for the service
    -version STRING: 
    -bearer-token STRING: 
    -etag STRING: 
    -if-match STRING: 

Example:
    %[1]s mailing-list update-grpsio-service --body '{
      "auditors": [
         "auditor_user_id1",
         "auditor_user_id2"
      ],
      "domain": "lists.project.org",
      "global_owners": [
         "admin@example.com"
      ],
      "group_id": 12345,
      "group_name": "project-name",
      "prefix": "formation",
      "project_slug": "cncf",
      "project_uid": "7cad5a8d-19d0-41a4-81a6-043453daf9ee",
      "public": true,
      "status": "created",
      "type": "primary",
      "url": "https://lists.project.org",
      "writers": [
         "manager_user_id1",
         "manager_user_id2"
      ]
   }' --uid "7cad5a8d-19d0-41a4-81a6-043453daf9ee" --version "1" --bearer-token "eyJhbGci..." --etag "123" --if-match "123"
`, os.Args[0])
}

func mailingListDeleteGrpsioServiceUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] mailing-list delete-grpsio-service -uid STRING -version STRING -bearer-token STRING -etag STRING -if-match STRING

Delete GroupsIO service
    -uid STRING: Service UID -- unique identifier for the service
    -version STRING: 
    -bearer-token STRING: 
    -etag STRING: 
    -if-match STRING: 

Example:
    %[1]s mailing-list delete-grpsio-service --uid "7cad5a8d-19d0-41a4-81a6-043453daf9ee" --version "1" --bearer-token "eyJhbGci..." --etag "123" --if-match "123"
`, os.Args[0])
}
