// Code generated by goa v3.21.5, DO NOT EDIT.
//
// mailing-list HTTP client CLI support package
//
// Command:
// $ goa gen
// github.com/linuxfoundation/lfx-v2-mailing-list-service/cmd/mailing-list-api/design

package client

import (
	"encoding/json"
	"fmt"
	"unicode/utf8"

	mailinglist "github.com/linuxfoundation/lfx-v2-mailing-list-service/gen/mailing_list"
	goa "goa.design/goa/v3/pkg"
)

// BuildCreateGrpsioServicePayload builds the payload for the mailing-list
// create-grpsio-service endpoint from CLI flags.
func BuildCreateGrpsioServicePayload(mailingListCreateGrpsioServiceBody string, mailingListCreateGrpsioServiceVersion string, mailingListCreateGrpsioServiceBearerToken string) (*mailinglist.CreateGrpsioServicePayload, error) {
	var err error
	var body CreateGrpsioServiceRequestBody
	{
		err = json.Unmarshal([]byte(mailingListCreateGrpsioServiceBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"auditors\": [\n         \"auditor_user_id1\",\n         \"auditor_user_id2\"\n      ],\n      \"domain\": \"lists.project.org\",\n      \"global_owners\": [\n         \"admin@example.com\"\n      ],\n      \"group_id\": 12345,\n      \"group_name\": \"project-name\",\n      \"prefix\": \"formation\",\n      \"project_slug\": \"cncf\",\n      \"project_uid\": \"7cad5a8d-19d0-41a4-81a6-043453daf9ee\",\n      \"public\": true,\n      \"status\": \"created\",\n      \"type\": \"primary\",\n      \"url\": \"https://lists.project.org\",\n      \"writers\": [\n         \"manager_user_id1\",\n         \"manager_user_id2\"\n      ]\n   }'")
		}
		if !(body.Type == "primary" || body.Type == "formation" || body.Type == "shared") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", body.Type, []any{"primary", "formation", "shared"}))
		}
		for _, e := range body.GlobalOwners {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.global_owners[*]", e, goa.FormatEmail))
		}
		if body.ProjectSlug != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.project_slug", *body.ProjectSlug, goa.FormatRegexp))
		}
		if body.ProjectSlug != nil {
			err = goa.MergeErrors(err, goa.ValidatePattern("body.project_slug", *body.ProjectSlug, "^[a-z][a-z0-9_\\-]*[a-z0-9]$"))
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.project_uid", body.ProjectUID, goa.FormatUUID))
		if body.URL != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.url", *body.URL, goa.FormatURI))
		}
		if err != nil {
			return nil, err
		}
	}
	var version string
	{
		version = mailingListCreateGrpsioServiceVersion
		if !(version == "1") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", version, []any{"1"}))
		}
		if err != nil {
			return nil, err
		}
	}
	var bearerToken *string
	{
		if mailingListCreateGrpsioServiceBearerToken != "" {
			bearerToken = &mailingListCreateGrpsioServiceBearerToken
		}
	}
	v := &mailinglist.CreateGrpsioServicePayload{
		Type:        body.Type,
		Domain:      body.Domain,
		GroupID:     body.GroupID,
		Status:      body.Status,
		Prefix:      body.Prefix,
		ProjectSlug: body.ProjectSlug,
		ProjectUID:  body.ProjectUID,
		URL:         body.URL,
		GroupName:   body.GroupName,
		Public:      body.Public,
	}
	if body.GlobalOwners != nil {
		v.GlobalOwners = make([]string, len(body.GlobalOwners))
		for i, val := range body.GlobalOwners {
			v.GlobalOwners[i] = val
		}
	}
	{
		var zero bool
		if v.Public == zero {
			v.Public = false
		}
	}
	if body.Writers != nil {
		v.Writers = make([]string, len(body.Writers))
		for i, val := range body.Writers {
			v.Writers[i] = val
		}
	}
	if body.Auditors != nil {
		v.Auditors = make([]string, len(body.Auditors))
		for i, val := range body.Auditors {
			v.Auditors[i] = val
		}
	}
	v.Version = version
	v.BearerToken = bearerToken

	return v, nil
}

// BuildGetGrpsioServicePayload builds the payload for the mailing-list
// get-grpsio-service endpoint from CLI flags.
func BuildGetGrpsioServicePayload(mailingListGetGrpsioServiceUID string, mailingListGetGrpsioServiceVersion string, mailingListGetGrpsioServiceBearerToken string) (*mailinglist.GetGrpsioServicePayload, error) {
	var err error
	var uid string
	{
		uid = mailingListGetGrpsioServiceUID
		err = goa.MergeErrors(err, goa.ValidateFormat("uid", uid, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var version *string
	{
		if mailingListGetGrpsioServiceVersion != "" {
			version = &mailingListGetGrpsioServiceVersion
			if !(*version == "1") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", *version, []any{"1"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var bearerToken *string
	{
		if mailingListGetGrpsioServiceBearerToken != "" {
			bearerToken = &mailingListGetGrpsioServiceBearerToken
		}
	}
	v := &mailinglist.GetGrpsioServicePayload{}
	v.UID = &uid
	v.Version = version
	v.BearerToken = bearerToken

	return v, nil
}

// BuildUpdateGrpsioServicePayload builds the payload for the mailing-list
// update-grpsio-service endpoint from CLI flags.
func BuildUpdateGrpsioServicePayload(mailingListUpdateGrpsioServiceBody string, mailingListUpdateGrpsioServiceUID string, mailingListUpdateGrpsioServiceVersion string, mailingListUpdateGrpsioServiceBearerToken string, mailingListUpdateGrpsioServiceIfMatch string) (*mailinglist.UpdateGrpsioServicePayload, error) {
	var err error
	var body UpdateGrpsioServiceRequestBody
	{
		err = json.Unmarshal([]byte(mailingListUpdateGrpsioServiceBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"auditors\": [\n         \"auditor_user_id1\",\n         \"auditor_user_id2\"\n      ],\n      \"domain\": \"lists.project.org\",\n      \"global_owners\": [\n         \"admin@example.com\"\n      ],\n      \"group_id\": 12345,\n      \"group_name\": \"project-name\",\n      \"prefix\": \"formation\",\n      \"project_slug\": \"cncf\",\n      \"project_uid\": \"7cad5a8d-19d0-41a4-81a6-043453daf9ee\",\n      \"public\": true,\n      \"status\": \"created\",\n      \"type\": \"primary\",\n      \"url\": \"https://lists.project.org\",\n      \"writers\": [\n         \"manager_user_id1\",\n         \"manager_user_id2\"\n      ]\n   }'")
		}
		if !(body.Type == "primary" || body.Type == "formation" || body.Type == "shared") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", body.Type, []any{"primary", "formation", "shared"}))
		}
		for _, e := range body.GlobalOwners {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.global_owners[*]", e, goa.FormatEmail))
		}
		if body.ProjectSlug != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.project_slug", *body.ProjectSlug, goa.FormatRegexp))
		}
		if body.ProjectSlug != nil {
			err = goa.MergeErrors(err, goa.ValidatePattern("body.project_slug", *body.ProjectSlug, "^[a-z][a-z0-9_\\-]*[a-z0-9]$"))
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.project_uid", body.ProjectUID, goa.FormatUUID))
		if body.URL != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.url", *body.URL, goa.FormatURI))
		}
		if err != nil {
			return nil, err
		}
	}
	var uid string
	{
		uid = mailingListUpdateGrpsioServiceUID
		err = goa.MergeErrors(err, goa.ValidateFormat("uid", uid, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var version string
	{
		version = mailingListUpdateGrpsioServiceVersion
		if !(version == "1") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", version, []any{"1"}))
		}
		if err != nil {
			return nil, err
		}
	}
	var bearerToken *string
	{
		if mailingListUpdateGrpsioServiceBearerToken != "" {
			bearerToken = &mailingListUpdateGrpsioServiceBearerToken
		}
	}
	var ifMatch *string
	{
		if mailingListUpdateGrpsioServiceIfMatch != "" {
			ifMatch = &mailingListUpdateGrpsioServiceIfMatch
		}
	}
	v := &mailinglist.UpdateGrpsioServicePayload{
		Type:        body.Type,
		Domain:      body.Domain,
		GroupID:     body.GroupID,
		Status:      body.Status,
		Prefix:      body.Prefix,
		ProjectSlug: body.ProjectSlug,
		ProjectUID:  body.ProjectUID,
		URL:         body.URL,
		GroupName:   body.GroupName,
		Public:      body.Public,
	}
	if body.GlobalOwners != nil {
		v.GlobalOwners = make([]string, len(body.GlobalOwners))
		for i, val := range body.GlobalOwners {
			v.GlobalOwners[i] = val
		}
	}
	{
		var zero bool
		if v.Public == zero {
			v.Public = false
		}
	}
	if body.Writers != nil {
		v.Writers = make([]string, len(body.Writers))
		for i, val := range body.Writers {
			v.Writers[i] = val
		}
	}
	if body.Auditors != nil {
		v.Auditors = make([]string, len(body.Auditors))
		for i, val := range body.Auditors {
			v.Auditors[i] = val
		}
	}
	v.UID = &uid
	v.Version = version
	v.BearerToken = bearerToken
	v.IfMatch = ifMatch

	return v, nil
}

// BuildDeleteGrpsioServicePayload builds the payload for the mailing-list
// delete-grpsio-service endpoint from CLI flags.
func BuildDeleteGrpsioServicePayload(mailingListDeleteGrpsioServiceUID string, mailingListDeleteGrpsioServiceVersion string, mailingListDeleteGrpsioServiceBearerToken string, mailingListDeleteGrpsioServiceIfMatch string) (*mailinglist.DeleteGrpsioServicePayload, error) {
	var err error
	var uid string
	{
		uid = mailingListDeleteGrpsioServiceUID
		err = goa.MergeErrors(err, goa.ValidateFormat("uid", uid, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var version *string
	{
		if mailingListDeleteGrpsioServiceVersion != "" {
			version = &mailingListDeleteGrpsioServiceVersion
			if !(*version == "1") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", *version, []any{"1"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var bearerToken *string
	{
		if mailingListDeleteGrpsioServiceBearerToken != "" {
			bearerToken = &mailingListDeleteGrpsioServiceBearerToken
		}
	}
	var ifMatch *string
	{
		if mailingListDeleteGrpsioServiceIfMatch != "" {
			ifMatch = &mailingListDeleteGrpsioServiceIfMatch
		}
	}
	v := &mailinglist.DeleteGrpsioServicePayload{}
	v.UID = &uid
	v.Version = version
	v.BearerToken = bearerToken
	v.IfMatch = ifMatch

	return v, nil
}

// BuildCreateGrpsioMailingListPayload builds the payload for the mailing-list
// create-grpsio-mailing-list endpoint from CLI flags.
func BuildCreateGrpsioMailingListPayload(mailingListCreateGrpsioMailingListBody string, mailingListCreateGrpsioMailingListVersion string, mailingListCreateGrpsioMailingListBearerToken string) (*mailinglist.CreateGrpsioMailingListPayload, error) {
	var err error
	var body CreateGrpsioMailingListRequestBody
	{
		err = json.Unmarshal([]byte(mailingListCreateGrpsioMailingListBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"auditors\": [\n         \"auditor_user_id1\",\n         \"auditor_user_id2\"\n      ],\n      \"committee_filters\": [\n         \"Voting Rep\",\n         \"Alternate Voting Rep\"\n      ],\n      \"committee_uid\": \"7cad5a8d-19d0-41a4-81a6-043453daf9ee\",\n      \"description\": \"Technical steering committee discussions\",\n      \"group_name\": \"technical-steering-committee\",\n      \"public\": false,\n      \"service_uid\": \"7cad5a8d-19d0-41a4-81a6-043453daf9ee\",\n      \"subject_tag\": \"[TSC]\",\n      \"title\": \"Technical Steering Committee\",\n      \"type\": \"discussion_moderated\",\n      \"writers\": [\n         \"manager_user_id1\",\n         \"manager_user_id2\"\n      ]\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("body.group_name", body.GroupName, "^[a-zA-Z0-9][a-zA-Z0-9_-]*[a-zA-Z0-9]$"))
		if utf8.RuneCountInString(body.GroupName) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.group_name", body.GroupName, utf8.RuneCountInString(body.GroupName), 3, true))
		}
		if utf8.RuneCountInString(body.GroupName) > 34 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.group_name", body.GroupName, utf8.RuneCountInString(body.GroupName), 34, false))
		}
		if !(body.Type == "announcement" || body.Type == "discussion_moderated" || body.Type == "discussion_open") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", body.Type, []any{"announcement", "discussion_moderated", "discussion_open"}))
		}
		if body.CommitteeUID != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.committee_uid", *body.CommitteeUID, goa.FormatUUID))
		}
		for _, e := range body.CommitteeFilters {
			if !(e == "Voting Rep" || e == "Alternate Voting Rep" || e == "Observer" || e == "Emeritus" || e == "None") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.committee_filters[*]", e, []any{"Voting Rep", "Alternate Voting Rep", "Observer", "Emeritus", "None"}))
			}
		}
		if utf8.RuneCountInString(body.Description) < 11 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", body.Description, utf8.RuneCountInString(body.Description), 11, true))
		}
		if utf8.RuneCountInString(body.Description) > 500 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", body.Description, utf8.RuneCountInString(body.Description), 500, false))
		}
		if utf8.RuneCountInString(body.Title) < 5 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.title", body.Title, utf8.RuneCountInString(body.Title), 5, true))
		}
		if utf8.RuneCountInString(body.Title) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.title", body.Title, utf8.RuneCountInString(body.Title), 100, false))
		}
		if body.SubjectTag != nil {
			if utf8.RuneCountInString(*body.SubjectTag) > 50 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.subject_tag", *body.SubjectTag, utf8.RuneCountInString(*body.SubjectTag), 50, false))
			}
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.service_uid", body.ServiceUID, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var version string
	{
		version = mailingListCreateGrpsioMailingListVersion
		if !(version == "1") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", version, []any{"1"}))
		}
		if err != nil {
			return nil, err
		}
	}
	var bearerToken *string
	{
		if mailingListCreateGrpsioMailingListBearerToken != "" {
			bearerToken = &mailingListCreateGrpsioMailingListBearerToken
		}
	}
	v := &mailinglist.CreateGrpsioMailingListPayload{
		GroupName:    body.GroupName,
		Public:       body.Public,
		Type:         body.Type,
		CommitteeUID: body.CommitteeUID,
		Description:  body.Description,
		Title:        body.Title,
		SubjectTag:   body.SubjectTag,
		ServiceUID:   body.ServiceUID,
	}
	if body.CommitteeFilters != nil {
		v.CommitteeFilters = make([]string, len(body.CommitteeFilters))
		for i, val := range body.CommitteeFilters {
			v.CommitteeFilters[i] = val
		}
	}
	if body.Writers != nil {
		v.Writers = make([]string, len(body.Writers))
		for i, val := range body.Writers {
			v.Writers[i] = val
		}
	}
	if body.Auditors != nil {
		v.Auditors = make([]string, len(body.Auditors))
		for i, val := range body.Auditors {
			v.Auditors[i] = val
		}
	}
	v.Version = version
	v.BearerToken = bearerToken

	return v, nil
}

// BuildGetGrpsioMailingListPayload builds the payload for the mailing-list
// get-grpsio-mailing-list endpoint from CLI flags.
func BuildGetGrpsioMailingListPayload(mailingListGetGrpsioMailingListUID string, mailingListGetGrpsioMailingListVersion string, mailingListGetGrpsioMailingListBearerToken string) (*mailinglist.GetGrpsioMailingListPayload, error) {
	var err error
	var uid string
	{
		uid = mailingListGetGrpsioMailingListUID
		err = goa.MergeErrors(err, goa.ValidateFormat("uid", uid, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var version string
	{
		version = mailingListGetGrpsioMailingListVersion
		if !(version == "1") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", version, []any{"1"}))
		}
		if err != nil {
			return nil, err
		}
	}
	var bearerToken string
	{
		bearerToken = mailingListGetGrpsioMailingListBearerToken
	}
	v := &mailinglist.GetGrpsioMailingListPayload{}
	v.UID = &uid
	v.Version = version
	v.BearerToken = bearerToken

	return v, nil
}

// BuildUpdateGrpsioMailingListPayload builds the payload for the mailing-list
// update-grpsio-mailing-list endpoint from CLI flags.
func BuildUpdateGrpsioMailingListPayload(mailingListUpdateGrpsioMailingListBody string, mailingListUpdateGrpsioMailingListUID string, mailingListUpdateGrpsioMailingListVersion string, mailingListUpdateGrpsioMailingListBearerToken string, mailingListUpdateGrpsioMailingListIfMatch string) (*mailinglist.UpdateGrpsioMailingListPayload, error) {
	var err error
	var body UpdateGrpsioMailingListRequestBody
	{
		err = json.Unmarshal([]byte(mailingListUpdateGrpsioMailingListBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"auditors\": [\n         \"auditor_user_id1\",\n         \"auditor_user_id2\"\n      ],\n      \"committee_filters\": [\n         \"Voting Rep\",\n         \"Alternate Voting Rep\"\n      ],\n      \"committee_uid\": \"7cad5a8d-19d0-41a4-81a6-043453daf9ee\",\n      \"description\": \"Technical steering committee discussions\",\n      \"group_name\": \"technical-steering-committee\",\n      \"public\": false,\n      \"service_uid\": \"7cad5a8d-19d0-41a4-81a6-043453daf9ee\",\n      \"subject_tag\": \"[TSC]\",\n      \"title\": \"Technical Steering Committee\",\n      \"type\": \"discussion_moderated\",\n      \"writers\": [\n         \"manager_user_id1\",\n         \"manager_user_id2\"\n      ]\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("body.group_name", body.GroupName, "^[a-zA-Z0-9][a-zA-Z0-9_-]*[a-zA-Z0-9]$"))
		if utf8.RuneCountInString(body.GroupName) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.group_name", body.GroupName, utf8.RuneCountInString(body.GroupName), 3, true))
		}
		if utf8.RuneCountInString(body.GroupName) > 34 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.group_name", body.GroupName, utf8.RuneCountInString(body.GroupName), 34, false))
		}
		if !(body.Type == "announcement" || body.Type == "discussion_moderated" || body.Type == "discussion_open") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", body.Type, []any{"announcement", "discussion_moderated", "discussion_open"}))
		}
		if body.CommitteeUID != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.committee_uid", *body.CommitteeUID, goa.FormatUUID))
		}
		for _, e := range body.CommitteeFilters {
			if !(e == "Voting Rep" || e == "Alternate Voting Rep" || e == "Observer" || e == "Emeritus" || e == "None") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.committee_filters[*]", e, []any{"Voting Rep", "Alternate Voting Rep", "Observer", "Emeritus", "None"}))
			}
		}
		if utf8.RuneCountInString(body.Description) < 11 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", body.Description, utf8.RuneCountInString(body.Description), 11, true))
		}
		if utf8.RuneCountInString(body.Description) > 500 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", body.Description, utf8.RuneCountInString(body.Description), 500, false))
		}
		if utf8.RuneCountInString(body.Title) < 5 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.title", body.Title, utf8.RuneCountInString(body.Title), 5, true))
		}
		if utf8.RuneCountInString(body.Title) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.title", body.Title, utf8.RuneCountInString(body.Title), 100, false))
		}
		if body.SubjectTag != nil {
			if utf8.RuneCountInString(*body.SubjectTag) > 50 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.subject_tag", *body.SubjectTag, utf8.RuneCountInString(*body.SubjectTag), 50, false))
			}
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.service_uid", body.ServiceUID, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var uid string
	{
		uid = mailingListUpdateGrpsioMailingListUID
		err = goa.MergeErrors(err, goa.ValidateFormat("uid", uid, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var version string
	{
		version = mailingListUpdateGrpsioMailingListVersion
		if !(version == "1") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", version, []any{"1"}))
		}
		if err != nil {
			return nil, err
		}
	}
	var bearerToken *string
	{
		if mailingListUpdateGrpsioMailingListBearerToken != "" {
			bearerToken = &mailingListUpdateGrpsioMailingListBearerToken
		}
	}
	var ifMatch *string
	{
		if mailingListUpdateGrpsioMailingListIfMatch != "" {
			ifMatch = &mailingListUpdateGrpsioMailingListIfMatch
		}
	}
	v := &mailinglist.UpdateGrpsioMailingListPayload{
		GroupName:    body.GroupName,
		Public:       body.Public,
		Type:         body.Type,
		CommitteeUID: body.CommitteeUID,
		Description:  body.Description,
		Title:        body.Title,
		SubjectTag:   body.SubjectTag,
		ServiceUID:   body.ServiceUID,
	}
	if body.CommitteeFilters != nil {
		v.CommitteeFilters = make([]string, len(body.CommitteeFilters))
		for i, val := range body.CommitteeFilters {
			v.CommitteeFilters[i] = val
		}
	}
	if body.Writers != nil {
		v.Writers = make([]string, len(body.Writers))
		for i, val := range body.Writers {
			v.Writers[i] = val
		}
	}
	if body.Auditors != nil {
		v.Auditors = make([]string, len(body.Auditors))
		for i, val := range body.Auditors {
			v.Auditors[i] = val
		}
	}
	v.UID = &uid
	v.Version = version
	v.BearerToken = bearerToken
	v.IfMatch = ifMatch

	return v, nil
}

// BuildDeleteGrpsioMailingListPayload builds the payload for the mailing-list
// delete-grpsio-mailing-list endpoint from CLI flags.
func BuildDeleteGrpsioMailingListPayload(mailingListDeleteGrpsioMailingListUID string, mailingListDeleteGrpsioMailingListVersion string, mailingListDeleteGrpsioMailingListBearerToken string, mailingListDeleteGrpsioMailingListIfMatch string) (*mailinglist.DeleteGrpsioMailingListPayload, error) {
	var err error
	var uid string
	{
		uid = mailingListDeleteGrpsioMailingListUID
		err = goa.MergeErrors(err, goa.ValidateFormat("uid", uid, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var version *string
	{
		if mailingListDeleteGrpsioMailingListVersion != "" {
			version = &mailingListDeleteGrpsioMailingListVersion
			if !(*version == "1") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", *version, []any{"1"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var bearerToken *string
	{
		if mailingListDeleteGrpsioMailingListBearerToken != "" {
			bearerToken = &mailingListDeleteGrpsioMailingListBearerToken
		}
	}
	var ifMatch *string
	{
		if mailingListDeleteGrpsioMailingListIfMatch != "" {
			ifMatch = &mailingListDeleteGrpsioMailingListIfMatch
		}
	}
	v := &mailinglist.DeleteGrpsioMailingListPayload{}
	v.UID = &uid
	v.Version = version
	v.BearerToken = bearerToken
	v.IfMatch = ifMatch

	return v, nil
}

// BuildCreateGrpsioMailingListMemberPayload builds the payload for the
// mailing-list create-grpsio-mailing-list-member endpoint from CLI flags.
func BuildCreateGrpsioMailingListMemberPayload(mailingListCreateGrpsioMailingListMemberBody string, mailingListCreateGrpsioMailingListMemberUID string, mailingListCreateGrpsioMailingListMemberVersion string, mailingListCreateGrpsioMailingListMemberBearerToken string) (*mailinglist.CreateGrpsioMailingListMemberPayload, error) {
	var err error
	var body CreateGrpsioMailingListMemberRequestBody
	{
		err = json.Unmarshal([]byte(mailingListCreateGrpsioMailingListMemberBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"delivery_mode\": \"none\",\n      \"email\": \"john.doe@example.com\",\n      \"first_name\": \"John\",\n      \"job_title\": \"Software Engineer\",\n      \"last_name\": \"Doe\",\n      \"last_reviewed_at\": \"2023-01-15T14:30:00Z\",\n      \"last_reviewed_by\": \"admin@example.com\",\n      \"member_type\": \"direct\",\n      \"mod_status\": \"owner\",\n      \"organization\": \"Example Corp\",\n      \"username\": \"jdoe\"\n   }'")
		}
		if body.Username != nil {
			if utf8.RuneCountInString(*body.Username) > 255 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.username", *body.Username, utf8.RuneCountInString(*body.Username), 255, false))
			}
		}
		if body.FirstName != nil {
			if utf8.RuneCountInString(*body.FirstName) < 1 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.first_name", *body.FirstName, utf8.RuneCountInString(*body.FirstName), 1, true))
			}
		}
		if body.FirstName != nil {
			if utf8.RuneCountInString(*body.FirstName) > 255 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.first_name", *body.FirstName, utf8.RuneCountInString(*body.FirstName), 255, false))
			}
		}
		if body.LastName != nil {
			if utf8.RuneCountInString(*body.LastName) < 1 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.last_name", *body.LastName, utf8.RuneCountInString(*body.LastName), 1, true))
			}
		}
		if body.LastName != nil {
			if utf8.RuneCountInString(*body.LastName) > 255 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.last_name", *body.LastName, utf8.RuneCountInString(*body.LastName), 255, false))
			}
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", body.Email, goa.FormatEmail))
		if body.Organization != nil {
			if utf8.RuneCountInString(*body.Organization) > 255 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.organization", *body.Organization, utf8.RuneCountInString(*body.Organization), 255, false))
			}
		}
		if body.JobTitle != nil {
			if utf8.RuneCountInString(*body.JobTitle) > 255 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.job_title", *body.JobTitle, utf8.RuneCountInString(*body.JobTitle), 255, false))
			}
		}
		if !(body.MemberType == "committee" || body.MemberType == "direct") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.member_type", body.MemberType, []any{"committee", "direct"}))
		}
		if !(body.DeliveryMode == "normal" || body.DeliveryMode == "digest" || body.DeliveryMode == "none") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.delivery_mode", body.DeliveryMode, []any{"normal", "digest", "none"}))
		}
		if !(body.ModStatus == "none" || body.ModStatus == "moderator" || body.ModStatus == "owner") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.mod_status", body.ModStatus, []any{"none", "moderator", "owner"}))
		}
		if body.LastReviewedAt != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.last_reviewed_at", *body.LastReviewedAt, goa.FormatDateTime))
		}
		if err != nil {
			return nil, err
		}
	}
	var uid string
	{
		uid = mailingListCreateGrpsioMailingListMemberUID
	}
	var version string
	{
		version = mailingListCreateGrpsioMailingListMemberVersion
		if !(version == "1") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", version, []any{"1"}))
		}
		if err != nil {
			return nil, err
		}
	}
	var bearerToken *string
	{
		if mailingListCreateGrpsioMailingListMemberBearerToken != "" {
			bearerToken = &mailingListCreateGrpsioMailingListMemberBearerToken
		}
	}
	v := &mailinglist.CreateGrpsioMailingListMemberPayload{
		Username:       body.Username,
		FirstName:      body.FirstName,
		LastName:       body.LastName,
		Email:          body.Email,
		Organization:   body.Organization,
		JobTitle:       body.JobTitle,
		MemberType:     body.MemberType,
		DeliveryMode:   body.DeliveryMode,
		ModStatus:      body.ModStatus,
		LastReviewedAt: body.LastReviewedAt,
		LastReviewedBy: body.LastReviewedBy,
	}
	{
		var zero string
		if v.MemberType == zero {
			v.MemberType = "direct"
		}
	}
	{
		var zero string
		if v.DeliveryMode == zero {
			v.DeliveryMode = "normal"
		}
	}
	{
		var zero string
		if v.ModStatus == zero {
			v.ModStatus = "none"
		}
	}
	v.UID = uid
	v.Version = version
	v.BearerToken = bearerToken

	return v, nil
}

// BuildGetGrpsioMailingListMemberPayload builds the payload for the
// mailing-list get-grpsio-mailing-list-member endpoint from CLI flags.
func BuildGetGrpsioMailingListMemberPayload(mailingListGetGrpsioMailingListMemberUID string, mailingListGetGrpsioMailingListMemberMemberUID string, mailingListGetGrpsioMailingListMemberVersion string, mailingListGetGrpsioMailingListMemberBearerToken string) (*mailinglist.GetGrpsioMailingListMemberPayload, error) {
	var err error
	var uid string
	{
		uid = mailingListGetGrpsioMailingListMemberUID
		err = goa.MergeErrors(err, goa.ValidateFormat("uid", uid, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var memberUID string
	{
		memberUID = mailingListGetGrpsioMailingListMemberMemberUID
		err = goa.MergeErrors(err, goa.ValidateFormat("member_uid", memberUID, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var version string
	{
		version = mailingListGetGrpsioMailingListMemberVersion
		if !(version == "1") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", version, []any{"1"}))
		}
		if err != nil {
			return nil, err
		}
	}
	var bearerToken string
	{
		bearerToken = mailingListGetGrpsioMailingListMemberBearerToken
	}
	v := &mailinglist.GetGrpsioMailingListMemberPayload{}
	v.UID = uid
	v.MemberUID = memberUID
	v.Version = version
	v.BearerToken = bearerToken

	return v, nil
}

// BuildUpdateGrpsioMailingListMemberPayload builds the payload for the
// mailing-list update-grpsio-mailing-list-member endpoint from CLI flags.
func BuildUpdateGrpsioMailingListMemberPayload(mailingListUpdateGrpsioMailingListMemberBody string, mailingListUpdateGrpsioMailingListMemberUID string, mailingListUpdateGrpsioMailingListMemberMemberUID string, mailingListUpdateGrpsioMailingListMemberVersion string, mailingListUpdateGrpsioMailingListMemberBearerToken string, mailingListUpdateGrpsioMailingListMemberIfMatch string) (*mailinglist.UpdateGrpsioMailingListMemberPayload, error) {
	var err error
	var body UpdateGrpsioMailingListMemberRequestBody
	{
		err = json.Unmarshal([]byte(mailingListUpdateGrpsioMailingListMemberBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"delivery_mode\": \"digest\",\n      \"first_name\": \"John\",\n      \"job_title\": \"Software Engineer\",\n      \"last_name\": \"Doe\",\n      \"mod_status\": \"moderator\",\n      \"organization\": \"Example Corp\",\n      \"username\": \"jdoe\"\n   }'")
		}
		if body.Username != nil {
			if utf8.RuneCountInString(*body.Username) > 255 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.username", *body.Username, utf8.RuneCountInString(*body.Username), 255, false))
			}
		}
		if body.FirstName != nil {
			if utf8.RuneCountInString(*body.FirstName) < 1 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.first_name", *body.FirstName, utf8.RuneCountInString(*body.FirstName), 1, true))
			}
		}
		if body.FirstName != nil {
			if utf8.RuneCountInString(*body.FirstName) > 255 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.first_name", *body.FirstName, utf8.RuneCountInString(*body.FirstName), 255, false))
			}
		}
		if body.LastName != nil {
			if utf8.RuneCountInString(*body.LastName) < 1 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.last_name", *body.LastName, utf8.RuneCountInString(*body.LastName), 1, true))
			}
		}
		if body.LastName != nil {
			if utf8.RuneCountInString(*body.LastName) > 255 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.last_name", *body.LastName, utf8.RuneCountInString(*body.LastName), 255, false))
			}
		}
		if body.Organization != nil {
			if utf8.RuneCountInString(*body.Organization) > 255 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.organization", *body.Organization, utf8.RuneCountInString(*body.Organization), 255, false))
			}
		}
		if body.JobTitle != nil {
			if utf8.RuneCountInString(*body.JobTitle) > 255 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.job_title", *body.JobTitle, utf8.RuneCountInString(*body.JobTitle), 255, false))
			}
		}
		if !(body.DeliveryMode == "normal" || body.DeliveryMode == "digest" || body.DeliveryMode == "none") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.delivery_mode", body.DeliveryMode, []any{"normal", "digest", "none"}))
		}
		if !(body.ModStatus == "none" || body.ModStatus == "moderator" || body.ModStatus == "owner") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.mod_status", body.ModStatus, []any{"none", "moderator", "owner"}))
		}
		if err != nil {
			return nil, err
		}
	}
	var uid string
	{
		uid = mailingListUpdateGrpsioMailingListMemberUID
		err = goa.MergeErrors(err, goa.ValidateFormat("uid", uid, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var memberUID string
	{
		memberUID = mailingListUpdateGrpsioMailingListMemberMemberUID
		err = goa.MergeErrors(err, goa.ValidateFormat("member_uid", memberUID, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var version string
	{
		version = mailingListUpdateGrpsioMailingListMemberVersion
		if !(version == "1") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", version, []any{"1"}))
		}
		if err != nil {
			return nil, err
		}
	}
	var bearerToken string
	{
		bearerToken = mailingListUpdateGrpsioMailingListMemberBearerToken
	}
	var ifMatch string
	{
		ifMatch = mailingListUpdateGrpsioMailingListMemberIfMatch
	}
	v := &mailinglist.UpdateGrpsioMailingListMemberPayload{
		Username:     body.Username,
		FirstName:    body.FirstName,
		LastName:     body.LastName,
		Organization: body.Organization,
		JobTitle:     body.JobTitle,
		DeliveryMode: body.DeliveryMode,
		ModStatus:    body.ModStatus,
	}
	{
		var zero string
		if v.DeliveryMode == zero {
			v.DeliveryMode = "normal"
		}
	}
	{
		var zero string
		if v.ModStatus == zero {
			v.ModStatus = "none"
		}
	}
	v.UID = uid
	v.MemberUID = memberUID
	v.Version = version
	v.BearerToken = bearerToken
	v.IfMatch = ifMatch

	return v, nil
}

// BuildDeleteGrpsioMailingListMemberPayload builds the payload for the
// mailing-list delete-grpsio-mailing-list-member endpoint from CLI flags.
func BuildDeleteGrpsioMailingListMemberPayload(mailingListDeleteGrpsioMailingListMemberUID string, mailingListDeleteGrpsioMailingListMemberMemberUID string, mailingListDeleteGrpsioMailingListMemberVersion string, mailingListDeleteGrpsioMailingListMemberBearerToken string, mailingListDeleteGrpsioMailingListMemberIfMatch string) (*mailinglist.DeleteGrpsioMailingListMemberPayload, error) {
	var err error
	var uid string
	{
		uid = mailingListDeleteGrpsioMailingListMemberUID
		err = goa.MergeErrors(err, goa.ValidateFormat("uid", uid, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var memberUID string
	{
		memberUID = mailingListDeleteGrpsioMailingListMemberMemberUID
		err = goa.MergeErrors(err, goa.ValidateFormat("member_uid", memberUID, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var version string
	{
		version = mailingListDeleteGrpsioMailingListMemberVersion
		if !(version == "1") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", version, []any{"1"}))
		}
		if err != nil {
			return nil, err
		}
	}
	var bearerToken string
	{
		bearerToken = mailingListDeleteGrpsioMailingListMemberBearerToken
	}
	var ifMatch string
	{
		ifMatch = mailingListDeleteGrpsioMailingListMemberIfMatch
	}
	v := &mailinglist.DeleteGrpsioMailingListMemberPayload{}
	v.UID = uid
	v.MemberUID = memberUID
	v.Version = version
	v.BearerToken = bearerToken
	v.IfMatch = ifMatch

	return v, nil
}

// BuildGroupsioWebhookPayload builds the payload for the mailing-list
// groupsio-webhook endpoint from CLI flags.
func BuildGroupsioWebhookPayload(mailingListGroupsioWebhookBody string, mailingListGroupsioWebhookSignature string) (*mailinglist.GroupsioWebhookPayload, error) {
	var err error
	var body GroupsioWebhookRequestBody
	{
		err = json.Unmarshal([]byte(mailingListGroupsioWebhookBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"body\": \"UXVvIGVuaW0gYWIgcmF0aW9uZSBxdWFzaS4=\"\n   }'")
		}
		if body.Body == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("body", "body"))
		}
		if err != nil {
			return nil, err
		}
	}
	var signature string
	{
		signature = mailingListGroupsioWebhookSignature
	}
	v := &mailinglist.GroupsioWebhookPayload{
		Body: body.Body,
	}
	v.Signature = signature

	return v, nil
}
