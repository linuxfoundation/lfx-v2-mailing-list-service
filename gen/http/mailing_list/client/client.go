// Code generated by goa v3.21.5, DO NOT EDIT.
//
// mailing-list client HTTP transport
//
// Command:
// $ goa gen
// github.com/linuxfoundation/lfx-v2-mailing-list-service/cmd/mailing-list-api/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the mailing-list service endpoint HTTP clients.
type Client struct {
	// Livez Doer is the HTTP client used to make requests to the livez endpoint.
	LivezDoer goahttp.Doer

	// Readyz Doer is the HTTP client used to make requests to the readyz endpoint.
	ReadyzDoer goahttp.Doer

	// CreateGrpsioService Doer is the HTTP client used to make requests to the
	// create-grpsio-service endpoint.
	CreateGrpsioServiceDoer goahttp.Doer

	// GetGrpsioService Doer is the HTTP client used to make requests to the
	// get-grpsio-service endpoint.
	GetGrpsioServiceDoer goahttp.Doer

	// UpdateGrpsioService Doer is the HTTP client used to make requests to the
	// update-grpsio-service endpoint.
	UpdateGrpsioServiceDoer goahttp.Doer

	// DeleteGrpsioService Doer is the HTTP client used to make requests to the
	// delete-grpsio-service endpoint.
	DeleteGrpsioServiceDoer goahttp.Doer

	// CreateGrpsioMailingList Doer is the HTTP client used to make requests to the
	// create-grpsio-mailing-list endpoint.
	CreateGrpsioMailingListDoer goahttp.Doer

	// GetGrpsioMailingList Doer is the HTTP client used to make requests to the
	// get-grpsio-mailing-list endpoint.
	GetGrpsioMailingListDoer goahttp.Doer

	// UpdateGrpsioMailingList Doer is the HTTP client used to make requests to the
	// update-grpsio-mailing-list endpoint.
	UpdateGrpsioMailingListDoer goahttp.Doer

	// DeleteGrpsioMailingList Doer is the HTTP client used to make requests to the
	// delete-grpsio-mailing-list endpoint.
	DeleteGrpsioMailingListDoer goahttp.Doer

	// CreateGrpsioMailingListMember Doer is the HTTP client used to make requests
	// to the create-grpsio-mailing-list-member endpoint.
	CreateGrpsioMailingListMemberDoer goahttp.Doer

	// GetGrpsioMailingListMember Doer is the HTTP client used to make requests to
	// the get-grpsio-mailing-list-member endpoint.
	GetGrpsioMailingListMemberDoer goahttp.Doer

	// UpdateGrpsioMailingListMember Doer is the HTTP client used to make requests
	// to the update-grpsio-mailing-list-member endpoint.
	UpdateGrpsioMailingListMemberDoer goahttp.Doer

	// DeleteGrpsioMailingListMember Doer is the HTTP client used to make requests
	// to the delete-grpsio-mailing-list-member endpoint.
	DeleteGrpsioMailingListMemberDoer goahttp.Doer

	// GroupsioWebhook Doer is the HTTP client used to make requests to the
	// groupsio-webhook endpoint.
	GroupsioWebhookDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the mailing-list service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		LivezDoer:                         doer,
		ReadyzDoer:                        doer,
		CreateGrpsioServiceDoer:           doer,
		GetGrpsioServiceDoer:              doer,
		UpdateGrpsioServiceDoer:           doer,
		DeleteGrpsioServiceDoer:           doer,
		CreateGrpsioMailingListDoer:       doer,
		GetGrpsioMailingListDoer:          doer,
		UpdateGrpsioMailingListDoer:       doer,
		DeleteGrpsioMailingListDoer:       doer,
		CreateGrpsioMailingListMemberDoer: doer,
		GetGrpsioMailingListMemberDoer:    doer,
		UpdateGrpsioMailingListMemberDoer: doer,
		DeleteGrpsioMailingListMemberDoer: doer,
		GroupsioWebhookDoer:               doer,
		RestoreResponseBody:               restoreBody,
		scheme:                            scheme,
		host:                              host,
		decoder:                           dec,
		encoder:                           enc,
	}
}

// Livez returns an endpoint that makes HTTP requests to the mailing-list
// service livez server.
func (c *Client) Livez() goa.Endpoint {
	var (
		decodeResponse = DecodeLivezResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildLivezRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.LivezDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("mailing-list", "livez", err)
		}
		return decodeResponse(resp)
	}
}

// Readyz returns an endpoint that makes HTTP requests to the mailing-list
// service readyz server.
func (c *Client) Readyz() goa.Endpoint {
	var (
		decodeResponse = DecodeReadyzResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildReadyzRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ReadyzDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("mailing-list", "readyz", err)
		}
		return decodeResponse(resp)
	}
}

// CreateGrpsioService returns an endpoint that makes HTTP requests to the
// mailing-list service create-grpsio-service server.
func (c *Client) CreateGrpsioService() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateGrpsioServiceRequest(c.encoder)
		decodeResponse = DecodeCreateGrpsioServiceResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildCreateGrpsioServiceRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateGrpsioServiceDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("mailing-list", "create-grpsio-service", err)
		}
		return decodeResponse(resp)
	}
}

// GetGrpsioService returns an endpoint that makes HTTP requests to the
// mailing-list service get-grpsio-service server.
func (c *Client) GetGrpsioService() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetGrpsioServiceRequest(c.encoder)
		decodeResponse = DecodeGetGrpsioServiceResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetGrpsioServiceRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetGrpsioServiceDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("mailing-list", "get-grpsio-service", err)
		}
		return decodeResponse(resp)
	}
}

// UpdateGrpsioService returns an endpoint that makes HTTP requests to the
// mailing-list service update-grpsio-service server.
func (c *Client) UpdateGrpsioService() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateGrpsioServiceRequest(c.encoder)
		decodeResponse = DecodeUpdateGrpsioServiceResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUpdateGrpsioServiceRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateGrpsioServiceDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("mailing-list", "update-grpsio-service", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteGrpsioService returns an endpoint that makes HTTP requests to the
// mailing-list service delete-grpsio-service server.
func (c *Client) DeleteGrpsioService() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeleteGrpsioServiceRequest(c.encoder)
		decodeResponse = DecodeDeleteGrpsioServiceResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDeleteGrpsioServiceRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteGrpsioServiceDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("mailing-list", "delete-grpsio-service", err)
		}
		return decodeResponse(resp)
	}
}

// CreateGrpsioMailingList returns an endpoint that makes HTTP requests to the
// mailing-list service create-grpsio-mailing-list server.
func (c *Client) CreateGrpsioMailingList() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateGrpsioMailingListRequest(c.encoder)
		decodeResponse = DecodeCreateGrpsioMailingListResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildCreateGrpsioMailingListRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateGrpsioMailingListDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("mailing-list", "create-grpsio-mailing-list", err)
		}
		return decodeResponse(resp)
	}
}

// GetGrpsioMailingList returns an endpoint that makes HTTP requests to the
// mailing-list service get-grpsio-mailing-list server.
func (c *Client) GetGrpsioMailingList() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetGrpsioMailingListRequest(c.encoder)
		decodeResponse = DecodeGetGrpsioMailingListResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetGrpsioMailingListRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetGrpsioMailingListDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("mailing-list", "get-grpsio-mailing-list", err)
		}
		return decodeResponse(resp)
	}
}

// UpdateGrpsioMailingList returns an endpoint that makes HTTP requests to the
// mailing-list service update-grpsio-mailing-list server.
func (c *Client) UpdateGrpsioMailingList() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateGrpsioMailingListRequest(c.encoder)
		decodeResponse = DecodeUpdateGrpsioMailingListResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUpdateGrpsioMailingListRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateGrpsioMailingListDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("mailing-list", "update-grpsio-mailing-list", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteGrpsioMailingList returns an endpoint that makes HTTP requests to the
// mailing-list service delete-grpsio-mailing-list server.
func (c *Client) DeleteGrpsioMailingList() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeleteGrpsioMailingListRequest(c.encoder)
		decodeResponse = DecodeDeleteGrpsioMailingListResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDeleteGrpsioMailingListRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteGrpsioMailingListDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("mailing-list", "delete-grpsio-mailing-list", err)
		}
		return decodeResponse(resp)
	}
}

// CreateGrpsioMailingListMember returns an endpoint that makes HTTP requests
// to the mailing-list service create-grpsio-mailing-list-member server.
func (c *Client) CreateGrpsioMailingListMember() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateGrpsioMailingListMemberRequest(c.encoder)
		decodeResponse = DecodeCreateGrpsioMailingListMemberResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildCreateGrpsioMailingListMemberRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateGrpsioMailingListMemberDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("mailing-list", "create-grpsio-mailing-list-member", err)
		}
		return decodeResponse(resp)
	}
}

// GetGrpsioMailingListMember returns an endpoint that makes HTTP requests to
// the mailing-list service get-grpsio-mailing-list-member server.
func (c *Client) GetGrpsioMailingListMember() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetGrpsioMailingListMemberRequest(c.encoder)
		decodeResponse = DecodeGetGrpsioMailingListMemberResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetGrpsioMailingListMemberRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetGrpsioMailingListMemberDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("mailing-list", "get-grpsio-mailing-list-member", err)
		}
		return decodeResponse(resp)
	}
}

// UpdateGrpsioMailingListMember returns an endpoint that makes HTTP requests
// to the mailing-list service update-grpsio-mailing-list-member server.
func (c *Client) UpdateGrpsioMailingListMember() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateGrpsioMailingListMemberRequest(c.encoder)
		decodeResponse = DecodeUpdateGrpsioMailingListMemberResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUpdateGrpsioMailingListMemberRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateGrpsioMailingListMemberDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("mailing-list", "update-grpsio-mailing-list-member", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteGrpsioMailingListMember returns an endpoint that makes HTTP requests
// to the mailing-list service delete-grpsio-mailing-list-member server.
func (c *Client) DeleteGrpsioMailingListMember() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeleteGrpsioMailingListMemberRequest(c.encoder)
		decodeResponse = DecodeDeleteGrpsioMailingListMemberResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDeleteGrpsioMailingListMemberRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteGrpsioMailingListMemberDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("mailing-list", "delete-grpsio-mailing-list-member", err)
		}
		return decodeResponse(resp)
	}
}

// GroupsioWebhook returns an endpoint that makes HTTP requests to the
// mailing-list service groupsio-webhook server.
func (c *Client) GroupsioWebhook() goa.Endpoint {
	var (
		encodeRequest  = EncodeGroupsioWebhookRequest(c.encoder)
		decodeResponse = DecodeGroupsioWebhookResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGroupsioWebhookRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GroupsioWebhookDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("mailing-list", "groupsio-webhook", err)
		}
		return decodeResponse(resp)
	}
}
