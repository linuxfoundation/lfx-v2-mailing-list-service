// Code generated by goa v3.21.5, DO NOT EDIT.
//
// mailing-list HTTP client encoders and decoders
//
// Command:
// $ goa gen
// github.com/linuxfoundation/lfx-v2-mailing-list-service/cmd/mailing-list-api/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	mailinglist "github.com/linuxfoundation/lfx-v2-mailing-list-service/gen/mailing_list"
	goahttp "goa.design/goa/v3/http"
)

// BuildLivezRequest instantiates a HTTP request object with method and path
// set to call the "mailing-list" service "livez" endpoint
func (c *Client) BuildLivezRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: LivezMailingListPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("mailing-list", "livez", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeLivezResponse returns a decoder for responses returned by the
// mailing-list livez endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeLivezResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body []byte
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "livez", err)
			}
			return body, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("mailing-list", "livez", resp.StatusCode, string(body))
		}
	}
}

// BuildReadyzRequest instantiates a HTTP request object with method and path
// set to call the "mailing-list" service "readyz" endpoint
func (c *Client) BuildReadyzRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ReadyzMailingListPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("mailing-list", "readyz", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeReadyzResponse returns a decoder for responses returned by the
// mailing-list readyz endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeReadyzResponse may return the following errors:
//   - "ServiceUnavailable" (type *mailinglist.ServiceUnavailableError): http.StatusServiceUnavailable
//   - error: internal error
func DecodeReadyzResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body []byte
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "readyz", err)
			}
			return body, nil
		case http.StatusServiceUnavailable:
			var (
				body ReadyzServiceUnavailableResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "readyz", err)
			}
			err = ValidateReadyzServiceUnavailableResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing-list", "readyz", err)
			}
			return nil, NewReadyzServiceUnavailable(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("mailing-list", "readyz", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateGrpsioServiceRequest instantiates a HTTP request object with
// method and path set to call the "mailing-list" service
// "create-grpsio-service" endpoint
func (c *Client) BuildCreateGrpsioServiceRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateGrpsioServiceMailingListPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("mailing-list", "create-grpsio-service", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateGrpsioServiceRequest returns an encoder for requests sent to the
// mailing-list create-grpsio-service server.
func EncodeCreateGrpsioServiceRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*mailinglist.CreateGrpsioServicePayload)
		if !ok {
			return goahttp.ErrInvalidType("mailing-list", "create-grpsio-service", "*mailinglist.CreateGrpsioServicePayload", v)
		}
		if p.BearerToken != nil {
			head := *p.BearerToken
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		values.Add("v", p.Version)
		req.URL.RawQuery = values.Encode()
		body := NewCreateGrpsioServiceRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("mailing-list", "create-grpsio-service", err)
		}
		return nil
	}
}

// DecodeCreateGrpsioServiceResponse returns a decoder for responses returned
// by the mailing-list create-grpsio-service endpoint. restoreBody controls
// whether the response body should be restored after having been read.
// DecodeCreateGrpsioServiceResponse may return the following errors:
//   - "BadRequest" (type *mailinglist.BadRequestError): http.StatusBadRequest
//   - "Conflict" (type *mailinglist.ConflictError): http.StatusConflict
//   - "InternalServerError" (type *mailinglist.InternalServerError): http.StatusInternalServerError
//   - "NotFound" (type *mailinglist.NotFoundError): http.StatusNotFound
//   - "ServiceUnavailable" (type *mailinglist.ServiceUnavailableError): http.StatusServiceUnavailable
//   - error: internal error
func DecodeCreateGrpsioServiceResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body CreateGrpsioServiceResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "create-grpsio-service", err)
			}
			err = ValidateCreateGrpsioServiceResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing-list", "create-grpsio-service", err)
			}
			res := NewCreateGrpsioServiceGrpsIoServiceFullCreated(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body CreateGrpsioServiceBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "create-grpsio-service", err)
			}
			err = ValidateCreateGrpsioServiceBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing-list", "create-grpsio-service", err)
			}
			return nil, NewCreateGrpsioServiceBadRequest(&body)
		case http.StatusConflict:
			var (
				body CreateGrpsioServiceConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "create-grpsio-service", err)
			}
			err = ValidateCreateGrpsioServiceConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing-list", "create-grpsio-service", err)
			}
			return nil, NewCreateGrpsioServiceConflict(&body)
		case http.StatusInternalServerError:
			var (
				body CreateGrpsioServiceInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "create-grpsio-service", err)
			}
			err = ValidateCreateGrpsioServiceInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing-list", "create-grpsio-service", err)
			}
			return nil, NewCreateGrpsioServiceInternalServerError(&body)
		case http.StatusNotFound:
			var (
				body CreateGrpsioServiceNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "create-grpsio-service", err)
			}
			err = ValidateCreateGrpsioServiceNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing-list", "create-grpsio-service", err)
			}
			return nil, NewCreateGrpsioServiceNotFound(&body)
		case http.StatusServiceUnavailable:
			var (
				body CreateGrpsioServiceServiceUnavailableResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "create-grpsio-service", err)
			}
			err = ValidateCreateGrpsioServiceServiceUnavailableResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing-list", "create-grpsio-service", err)
			}
			return nil, NewCreateGrpsioServiceServiceUnavailable(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("mailing-list", "create-grpsio-service", resp.StatusCode, string(body))
		}
	}
}

// BuildGetGrpsioServiceRequest instantiates a HTTP request object with method
// and path set to call the "mailing-list" service "get-grpsio-service" endpoint
func (c *Client) BuildGetGrpsioServiceRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		uid string
	)
	{
		p, ok := v.(*mailinglist.GetGrpsioServicePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("mailing-list", "get-grpsio-service", "*mailinglist.GetGrpsioServicePayload", v)
		}
		if p.UID != nil {
			uid = *p.UID
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetGrpsioServiceMailingListPath(uid)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("mailing-list", "get-grpsio-service", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetGrpsioServiceRequest returns an encoder for requests sent to the
// mailing-list get-grpsio-service server.
func EncodeGetGrpsioServiceRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*mailinglist.GetGrpsioServicePayload)
		if !ok {
			return goahttp.ErrInvalidType("mailing-list", "get-grpsio-service", "*mailinglist.GetGrpsioServicePayload", v)
		}
		if p.BearerToken != nil {
			head := *p.BearerToken
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		if p.Version != nil {
			values.Add("v", *p.Version)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeGetGrpsioServiceResponse returns a decoder for responses returned by
// the mailing-list get-grpsio-service endpoint. restoreBody controls whether
// the response body should be restored after having been read.
// DecodeGetGrpsioServiceResponse may return the following errors:
//   - "BadRequest" (type *mailinglist.BadRequestError): http.StatusBadRequest
//   - "InternalServerError" (type *mailinglist.InternalServerError): http.StatusInternalServerError
//   - "NotFound" (type *mailinglist.NotFoundError): http.StatusNotFound
//   - "ServiceUnavailable" (type *mailinglist.ServiceUnavailableError): http.StatusServiceUnavailable
//   - error: internal error
func DecodeGetGrpsioServiceResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetGrpsioServiceResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "get-grpsio-service", err)
			}
			err = ValidateGetGrpsioServiceResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing-list", "get-grpsio-service", err)
			}
			var (
				etag *string
			)
			etagRaw := resp.Header.Get("Etag")
			if etagRaw != "" {
				etag = &etagRaw
			}
			res := NewGetGrpsioServiceResultOK(&body, etag)
			return res, nil
		case http.StatusBadRequest:
			var (
				body GetGrpsioServiceBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "get-grpsio-service", err)
			}
			err = ValidateGetGrpsioServiceBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing-list", "get-grpsio-service", err)
			}
			return nil, NewGetGrpsioServiceBadRequest(&body)
		case http.StatusInternalServerError:
			var (
				body GetGrpsioServiceInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "get-grpsio-service", err)
			}
			err = ValidateGetGrpsioServiceInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing-list", "get-grpsio-service", err)
			}
			return nil, NewGetGrpsioServiceInternalServerError(&body)
		case http.StatusNotFound:
			var (
				body GetGrpsioServiceNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "get-grpsio-service", err)
			}
			err = ValidateGetGrpsioServiceNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing-list", "get-grpsio-service", err)
			}
			return nil, NewGetGrpsioServiceNotFound(&body)
		case http.StatusServiceUnavailable:
			var (
				body GetGrpsioServiceServiceUnavailableResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "get-grpsio-service", err)
			}
			err = ValidateGetGrpsioServiceServiceUnavailableResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing-list", "get-grpsio-service", err)
			}
			return nil, NewGetGrpsioServiceServiceUnavailable(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("mailing-list", "get-grpsio-service", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateGrpsioServiceRequest instantiates a HTTP request object with
// method and path set to call the "mailing-list" service
// "update-grpsio-service" endpoint
func (c *Client) BuildUpdateGrpsioServiceRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		uid string
	)
	{
		p, ok := v.(*mailinglist.UpdateGrpsioServicePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("mailing-list", "update-grpsio-service", "*mailinglist.UpdateGrpsioServicePayload", v)
		}
		if p.UID != nil {
			uid = *p.UID
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateGrpsioServiceMailingListPath(uid)}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("mailing-list", "update-grpsio-service", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateGrpsioServiceRequest returns an encoder for requests sent to the
// mailing-list update-grpsio-service server.
func EncodeUpdateGrpsioServiceRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*mailinglist.UpdateGrpsioServicePayload)
		if !ok {
			return goahttp.ErrInvalidType("mailing-list", "update-grpsio-service", "*mailinglist.UpdateGrpsioServicePayload", v)
		}
		if p.BearerToken != nil {
			head := *p.BearerToken
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.IfMatch != nil {
			head := *p.IfMatch
			req.Header.Set("If-Match", head)
		}
		values := req.URL.Query()
		values.Add("v", p.Version)
		req.URL.RawQuery = values.Encode()
		body := NewUpdateGrpsioServiceRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("mailing-list", "update-grpsio-service", err)
		}
		return nil
	}
}

// DecodeUpdateGrpsioServiceResponse returns a decoder for responses returned
// by the mailing-list update-grpsio-service endpoint. restoreBody controls
// whether the response body should be restored after having been read.
// DecodeUpdateGrpsioServiceResponse may return the following errors:
//   - "BadRequest" (type *mailinglist.BadRequestError): http.StatusBadRequest
//   - "Conflict" (type *mailinglist.ConflictError): http.StatusConflict
//   - "InternalServerError" (type *mailinglist.InternalServerError): http.StatusInternalServerError
//   - "NotFound" (type *mailinglist.NotFoundError): http.StatusNotFound
//   - "ServiceUnavailable" (type *mailinglist.ServiceUnavailableError): http.StatusServiceUnavailable
//   - error: internal error
func DecodeUpdateGrpsioServiceResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdateGrpsioServiceResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "update-grpsio-service", err)
			}
			err = ValidateUpdateGrpsioServiceResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing-list", "update-grpsio-service", err)
			}
			res := NewUpdateGrpsioServiceGrpsIoServiceWithReadonlyAttributesOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body UpdateGrpsioServiceBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "update-grpsio-service", err)
			}
			err = ValidateUpdateGrpsioServiceBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing-list", "update-grpsio-service", err)
			}
			return nil, NewUpdateGrpsioServiceBadRequest(&body)
		case http.StatusConflict:
			var (
				body UpdateGrpsioServiceConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "update-grpsio-service", err)
			}
			err = ValidateUpdateGrpsioServiceConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing-list", "update-grpsio-service", err)
			}
			return nil, NewUpdateGrpsioServiceConflict(&body)
		case http.StatusInternalServerError:
			var (
				body UpdateGrpsioServiceInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "update-grpsio-service", err)
			}
			err = ValidateUpdateGrpsioServiceInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing-list", "update-grpsio-service", err)
			}
			return nil, NewUpdateGrpsioServiceInternalServerError(&body)
		case http.StatusNotFound:
			var (
				body UpdateGrpsioServiceNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "update-grpsio-service", err)
			}
			err = ValidateUpdateGrpsioServiceNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing-list", "update-grpsio-service", err)
			}
			return nil, NewUpdateGrpsioServiceNotFound(&body)
		case http.StatusServiceUnavailable:
			var (
				body UpdateGrpsioServiceServiceUnavailableResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "update-grpsio-service", err)
			}
			err = ValidateUpdateGrpsioServiceServiceUnavailableResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing-list", "update-grpsio-service", err)
			}
			return nil, NewUpdateGrpsioServiceServiceUnavailable(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("mailing-list", "update-grpsio-service", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteGrpsioServiceRequest instantiates a HTTP request object with
// method and path set to call the "mailing-list" service
// "delete-grpsio-service" endpoint
func (c *Client) BuildDeleteGrpsioServiceRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		uid string
	)
	{
		p, ok := v.(*mailinglist.DeleteGrpsioServicePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("mailing-list", "delete-grpsio-service", "*mailinglist.DeleteGrpsioServicePayload", v)
		}
		if p.UID != nil {
			uid = *p.UID
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteGrpsioServiceMailingListPath(uid)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("mailing-list", "delete-grpsio-service", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteGrpsioServiceRequest returns an encoder for requests sent to the
// mailing-list delete-grpsio-service server.
func EncodeDeleteGrpsioServiceRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*mailinglist.DeleteGrpsioServicePayload)
		if !ok {
			return goahttp.ErrInvalidType("mailing-list", "delete-grpsio-service", "*mailinglist.DeleteGrpsioServicePayload", v)
		}
		if p.BearerToken != nil {
			head := *p.BearerToken
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.IfMatch != nil {
			head := *p.IfMatch
			req.Header.Set("If-Match", head)
		}
		values := req.URL.Query()
		if p.Version != nil {
			values.Add("v", *p.Version)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeDeleteGrpsioServiceResponse returns a decoder for responses returned
// by the mailing-list delete-grpsio-service endpoint. restoreBody controls
// whether the response body should be restored after having been read.
// DecodeDeleteGrpsioServiceResponse may return the following errors:
//   - "BadRequest" (type *mailinglist.BadRequestError): http.StatusBadRequest
//   - "Conflict" (type *mailinglist.ConflictError): http.StatusConflict
//   - "InternalServerError" (type *mailinglist.InternalServerError): http.StatusInternalServerError
//   - "NotFound" (type *mailinglist.NotFoundError): http.StatusNotFound
//   - "ServiceUnavailable" (type *mailinglist.ServiceUnavailableError): http.StatusServiceUnavailable
//   - error: internal error
func DecodeDeleteGrpsioServiceResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body DeleteGrpsioServiceBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "delete-grpsio-service", err)
			}
			err = ValidateDeleteGrpsioServiceBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing-list", "delete-grpsio-service", err)
			}
			return nil, NewDeleteGrpsioServiceBadRequest(&body)
		case http.StatusConflict:
			var (
				body DeleteGrpsioServiceConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "delete-grpsio-service", err)
			}
			err = ValidateDeleteGrpsioServiceConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing-list", "delete-grpsio-service", err)
			}
			return nil, NewDeleteGrpsioServiceConflict(&body)
		case http.StatusInternalServerError:
			var (
				body DeleteGrpsioServiceInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "delete-grpsio-service", err)
			}
			err = ValidateDeleteGrpsioServiceInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing-list", "delete-grpsio-service", err)
			}
			return nil, NewDeleteGrpsioServiceInternalServerError(&body)
		case http.StatusNotFound:
			var (
				body DeleteGrpsioServiceNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "delete-grpsio-service", err)
			}
			err = ValidateDeleteGrpsioServiceNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing-list", "delete-grpsio-service", err)
			}
			return nil, NewDeleteGrpsioServiceNotFound(&body)
		case http.StatusServiceUnavailable:
			var (
				body DeleteGrpsioServiceServiceUnavailableResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "delete-grpsio-service", err)
			}
			err = ValidateDeleteGrpsioServiceServiceUnavailableResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing-list", "delete-grpsio-service", err)
			}
			return nil, NewDeleteGrpsioServiceServiceUnavailable(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("mailing-list", "delete-grpsio-service", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateGrpsioMailingListRequest instantiates a HTTP request object with
// method and path set to call the "mailing-list" service
// "create-grpsio-mailing-list" endpoint
func (c *Client) BuildCreateGrpsioMailingListRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateGrpsioMailingListMailingListPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("mailing-list", "create-grpsio-mailing-list", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateGrpsioMailingListRequest returns an encoder for requests sent to
// the mailing-list create-grpsio-mailing-list server.
func EncodeCreateGrpsioMailingListRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*mailinglist.CreateGrpsioMailingListPayload)
		if !ok {
			return goahttp.ErrInvalidType("mailing-list", "create-grpsio-mailing-list", "*mailinglist.CreateGrpsioMailingListPayload", v)
		}
		if p.BearerToken != nil {
			head := *p.BearerToken
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		values.Add("v", p.Version)
		req.URL.RawQuery = values.Encode()
		body := NewCreateGrpsioMailingListRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("mailing-list", "create-grpsio-mailing-list", err)
		}
		return nil
	}
}

// DecodeCreateGrpsioMailingListResponse returns a decoder for responses
// returned by the mailing-list create-grpsio-mailing-list endpoint.
// restoreBody controls whether the response body should be restored after
// having been read.
// DecodeCreateGrpsioMailingListResponse may return the following errors:
//   - "BadRequest" (type *mailinglist.BadRequestError): http.StatusBadRequest
//   - "Conflict" (type *mailinglist.ConflictError): http.StatusConflict
//   - "InternalServerError" (type *mailinglist.InternalServerError): http.StatusInternalServerError
//   - "NotFound" (type *mailinglist.NotFoundError): http.StatusNotFound
//   - "ServiceUnavailable" (type *mailinglist.ServiceUnavailableError): http.StatusServiceUnavailable
//   - error: internal error
func DecodeCreateGrpsioMailingListResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body CreateGrpsioMailingListResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "create-grpsio-mailing-list", err)
			}
			err = ValidateCreateGrpsioMailingListResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing-list", "create-grpsio-mailing-list", err)
			}
			res := NewCreateGrpsioMailingListGrpsIoMailingListFullCreated(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body CreateGrpsioMailingListBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "create-grpsio-mailing-list", err)
			}
			err = ValidateCreateGrpsioMailingListBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing-list", "create-grpsio-mailing-list", err)
			}
			return nil, NewCreateGrpsioMailingListBadRequest(&body)
		case http.StatusConflict:
			var (
				body CreateGrpsioMailingListConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "create-grpsio-mailing-list", err)
			}
			err = ValidateCreateGrpsioMailingListConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing-list", "create-grpsio-mailing-list", err)
			}
			return nil, NewCreateGrpsioMailingListConflict(&body)
		case http.StatusInternalServerError:
			var (
				body CreateGrpsioMailingListInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "create-grpsio-mailing-list", err)
			}
			err = ValidateCreateGrpsioMailingListInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing-list", "create-grpsio-mailing-list", err)
			}
			return nil, NewCreateGrpsioMailingListInternalServerError(&body)
		case http.StatusNotFound:
			var (
				body CreateGrpsioMailingListNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "create-grpsio-mailing-list", err)
			}
			err = ValidateCreateGrpsioMailingListNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing-list", "create-grpsio-mailing-list", err)
			}
			return nil, NewCreateGrpsioMailingListNotFound(&body)
		case http.StatusServiceUnavailable:
			var (
				body CreateGrpsioMailingListServiceUnavailableResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "create-grpsio-mailing-list", err)
			}
			err = ValidateCreateGrpsioMailingListServiceUnavailableResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing-list", "create-grpsio-mailing-list", err)
			}
			return nil, NewCreateGrpsioMailingListServiceUnavailable(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("mailing-list", "create-grpsio-mailing-list", resp.StatusCode, string(body))
		}
	}
}

// BuildGetGrpsioMailingListRequest instantiates a HTTP request object with
// method and path set to call the "mailing-list" service
// "get-grpsio-mailing-list" endpoint
func (c *Client) BuildGetGrpsioMailingListRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		uid string
	)
	{
		p, ok := v.(*mailinglist.GetGrpsioMailingListPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("mailing-list", "get-grpsio-mailing-list", "*mailinglist.GetGrpsioMailingListPayload", v)
		}
		if p.UID != nil {
			uid = *p.UID
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetGrpsioMailingListMailingListPath(uid)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("mailing-list", "get-grpsio-mailing-list", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetGrpsioMailingListRequest returns an encoder for requests sent to
// the mailing-list get-grpsio-mailing-list server.
func EncodeGetGrpsioMailingListRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*mailinglist.GetGrpsioMailingListPayload)
		if !ok {
			return goahttp.ErrInvalidType("mailing-list", "get-grpsio-mailing-list", "*mailinglist.GetGrpsioMailingListPayload", v)
		}
		{
			head := p.BearerToken
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		values.Add("v", p.Version)
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeGetGrpsioMailingListResponse returns a decoder for responses returned
// by the mailing-list get-grpsio-mailing-list endpoint. restoreBody controls
// whether the response body should be restored after having been read.
// DecodeGetGrpsioMailingListResponse may return the following errors:
//   - "BadRequest" (type *mailinglist.BadRequestError): http.StatusBadRequest
//   - "InternalServerError" (type *mailinglist.InternalServerError): http.StatusInternalServerError
//   - "NotFound" (type *mailinglist.NotFoundError): http.StatusNotFound
//   - "ServiceUnavailable" (type *mailinglist.ServiceUnavailableError): http.StatusServiceUnavailable
//   - error: internal error
func DecodeGetGrpsioMailingListResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetGrpsioMailingListResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "get-grpsio-mailing-list", err)
			}
			err = ValidateGetGrpsioMailingListResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing-list", "get-grpsio-mailing-list", err)
			}
			var (
				etag *string
			)
			etagRaw := resp.Header.Get("Etag")
			if etagRaw != "" {
				etag = &etagRaw
			}
			res := NewGetGrpsioMailingListResultOK(&body, etag)
			return res, nil
		case http.StatusBadRequest:
			var (
				body GetGrpsioMailingListBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "get-grpsio-mailing-list", err)
			}
			err = ValidateGetGrpsioMailingListBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing-list", "get-grpsio-mailing-list", err)
			}
			return nil, NewGetGrpsioMailingListBadRequest(&body)
		case http.StatusInternalServerError:
			var (
				body GetGrpsioMailingListInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "get-grpsio-mailing-list", err)
			}
			err = ValidateGetGrpsioMailingListInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing-list", "get-grpsio-mailing-list", err)
			}
			return nil, NewGetGrpsioMailingListInternalServerError(&body)
		case http.StatusNotFound:
			var (
				body GetGrpsioMailingListNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "get-grpsio-mailing-list", err)
			}
			err = ValidateGetGrpsioMailingListNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing-list", "get-grpsio-mailing-list", err)
			}
			return nil, NewGetGrpsioMailingListNotFound(&body)
		case http.StatusServiceUnavailable:
			var (
				body GetGrpsioMailingListServiceUnavailableResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "get-grpsio-mailing-list", err)
			}
			err = ValidateGetGrpsioMailingListServiceUnavailableResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing-list", "get-grpsio-mailing-list", err)
			}
			return nil, NewGetGrpsioMailingListServiceUnavailable(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("mailing-list", "get-grpsio-mailing-list", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateGrpsioMailingListRequest instantiates a HTTP request object with
// method and path set to call the "mailing-list" service
// "update-grpsio-mailing-list" endpoint
func (c *Client) BuildUpdateGrpsioMailingListRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		uid string
	)
	{
		p, ok := v.(*mailinglist.UpdateGrpsioMailingListPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("mailing-list", "update-grpsio-mailing-list", "*mailinglist.UpdateGrpsioMailingListPayload", v)
		}
		if p.UID != nil {
			uid = *p.UID
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateGrpsioMailingListMailingListPath(uid)}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("mailing-list", "update-grpsio-mailing-list", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateGrpsioMailingListRequest returns an encoder for requests sent to
// the mailing-list update-grpsio-mailing-list server.
func EncodeUpdateGrpsioMailingListRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*mailinglist.UpdateGrpsioMailingListPayload)
		if !ok {
			return goahttp.ErrInvalidType("mailing-list", "update-grpsio-mailing-list", "*mailinglist.UpdateGrpsioMailingListPayload", v)
		}
		if p.BearerToken != nil {
			head := *p.BearerToken
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.IfMatch != nil {
			head := *p.IfMatch
			req.Header.Set("If-Match", head)
		}
		values := req.URL.Query()
		values.Add("v", p.Version)
		req.URL.RawQuery = values.Encode()
		body := NewUpdateGrpsioMailingListRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("mailing-list", "update-grpsio-mailing-list", err)
		}
		return nil
	}
}

// DecodeUpdateGrpsioMailingListResponse returns a decoder for responses
// returned by the mailing-list update-grpsio-mailing-list endpoint.
// restoreBody controls whether the response body should be restored after
// having been read.
// DecodeUpdateGrpsioMailingListResponse may return the following errors:
//   - "BadRequest" (type *mailinglist.BadRequestError): http.StatusBadRequest
//   - "Conflict" (type *mailinglist.ConflictError): http.StatusConflict
//   - "InternalServerError" (type *mailinglist.InternalServerError): http.StatusInternalServerError
//   - "NotFound" (type *mailinglist.NotFoundError): http.StatusNotFound
//   - "ServiceUnavailable" (type *mailinglist.ServiceUnavailableError): http.StatusServiceUnavailable
//   - error: internal error
func DecodeUpdateGrpsioMailingListResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdateGrpsioMailingListResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "update-grpsio-mailing-list", err)
			}
			err = ValidateUpdateGrpsioMailingListResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing-list", "update-grpsio-mailing-list", err)
			}
			res := NewUpdateGrpsioMailingListGrpsIoMailingListWithReadonlyAttributesOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body UpdateGrpsioMailingListBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "update-grpsio-mailing-list", err)
			}
			err = ValidateUpdateGrpsioMailingListBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing-list", "update-grpsio-mailing-list", err)
			}
			return nil, NewUpdateGrpsioMailingListBadRequest(&body)
		case http.StatusConflict:
			var (
				body UpdateGrpsioMailingListConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "update-grpsio-mailing-list", err)
			}
			err = ValidateUpdateGrpsioMailingListConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing-list", "update-grpsio-mailing-list", err)
			}
			return nil, NewUpdateGrpsioMailingListConflict(&body)
		case http.StatusInternalServerError:
			var (
				body UpdateGrpsioMailingListInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "update-grpsio-mailing-list", err)
			}
			err = ValidateUpdateGrpsioMailingListInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing-list", "update-grpsio-mailing-list", err)
			}
			return nil, NewUpdateGrpsioMailingListInternalServerError(&body)
		case http.StatusNotFound:
			var (
				body UpdateGrpsioMailingListNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "update-grpsio-mailing-list", err)
			}
			err = ValidateUpdateGrpsioMailingListNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing-list", "update-grpsio-mailing-list", err)
			}
			return nil, NewUpdateGrpsioMailingListNotFound(&body)
		case http.StatusServiceUnavailable:
			var (
				body UpdateGrpsioMailingListServiceUnavailableResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "update-grpsio-mailing-list", err)
			}
			err = ValidateUpdateGrpsioMailingListServiceUnavailableResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing-list", "update-grpsio-mailing-list", err)
			}
			return nil, NewUpdateGrpsioMailingListServiceUnavailable(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("mailing-list", "update-grpsio-mailing-list", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteGrpsioMailingListRequest instantiates a HTTP request object with
// method and path set to call the "mailing-list" service
// "delete-grpsio-mailing-list" endpoint
func (c *Client) BuildDeleteGrpsioMailingListRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		uid string
	)
	{
		p, ok := v.(*mailinglist.DeleteGrpsioMailingListPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("mailing-list", "delete-grpsio-mailing-list", "*mailinglist.DeleteGrpsioMailingListPayload", v)
		}
		if p.UID != nil {
			uid = *p.UID
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteGrpsioMailingListMailingListPath(uid)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("mailing-list", "delete-grpsio-mailing-list", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteGrpsioMailingListRequest returns an encoder for requests sent to
// the mailing-list delete-grpsio-mailing-list server.
func EncodeDeleteGrpsioMailingListRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*mailinglist.DeleteGrpsioMailingListPayload)
		if !ok {
			return goahttp.ErrInvalidType("mailing-list", "delete-grpsio-mailing-list", "*mailinglist.DeleteGrpsioMailingListPayload", v)
		}
		if p.BearerToken != nil {
			head := *p.BearerToken
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.IfMatch != nil {
			head := *p.IfMatch
			req.Header.Set("If-Match", head)
		}
		values := req.URL.Query()
		if p.Version != nil {
			values.Add("v", *p.Version)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeDeleteGrpsioMailingListResponse returns a decoder for responses
// returned by the mailing-list delete-grpsio-mailing-list endpoint.
// restoreBody controls whether the response body should be restored after
// having been read.
// DecodeDeleteGrpsioMailingListResponse may return the following errors:
//   - "BadRequest" (type *mailinglist.BadRequestError): http.StatusBadRequest
//   - "Conflict" (type *mailinglist.ConflictError): http.StatusConflict
//   - "InternalServerError" (type *mailinglist.InternalServerError): http.StatusInternalServerError
//   - "NotFound" (type *mailinglist.NotFoundError): http.StatusNotFound
//   - "ServiceUnavailable" (type *mailinglist.ServiceUnavailableError): http.StatusServiceUnavailable
//   - error: internal error
func DecodeDeleteGrpsioMailingListResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body DeleteGrpsioMailingListBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "delete-grpsio-mailing-list", err)
			}
			err = ValidateDeleteGrpsioMailingListBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing-list", "delete-grpsio-mailing-list", err)
			}
			return nil, NewDeleteGrpsioMailingListBadRequest(&body)
		case http.StatusConflict:
			var (
				body DeleteGrpsioMailingListConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "delete-grpsio-mailing-list", err)
			}
			err = ValidateDeleteGrpsioMailingListConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing-list", "delete-grpsio-mailing-list", err)
			}
			return nil, NewDeleteGrpsioMailingListConflict(&body)
		case http.StatusInternalServerError:
			var (
				body DeleteGrpsioMailingListInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "delete-grpsio-mailing-list", err)
			}
			err = ValidateDeleteGrpsioMailingListInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing-list", "delete-grpsio-mailing-list", err)
			}
			return nil, NewDeleteGrpsioMailingListInternalServerError(&body)
		case http.StatusNotFound:
			var (
				body DeleteGrpsioMailingListNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "delete-grpsio-mailing-list", err)
			}
			err = ValidateDeleteGrpsioMailingListNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing-list", "delete-grpsio-mailing-list", err)
			}
			return nil, NewDeleteGrpsioMailingListNotFound(&body)
		case http.StatusServiceUnavailable:
			var (
				body DeleteGrpsioMailingListServiceUnavailableResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "delete-grpsio-mailing-list", err)
			}
			err = ValidateDeleteGrpsioMailingListServiceUnavailableResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing-list", "delete-grpsio-mailing-list", err)
			}
			return nil, NewDeleteGrpsioMailingListServiceUnavailable(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("mailing-list", "delete-grpsio-mailing-list", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateGrpsioMailingListMemberRequest instantiates a HTTP request object
// with method and path set to call the "mailing-list" service
// "create-grpsio-mailing-list-member" endpoint
func (c *Client) BuildCreateGrpsioMailingListMemberRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		uid string
	)
	{
		p, ok := v.(*mailinglist.CreateGrpsioMailingListMemberPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("mailing-list", "create-grpsio-mailing-list-member", "*mailinglist.CreateGrpsioMailingListMemberPayload", v)
		}
		uid = p.UID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateGrpsioMailingListMemberMailingListPath(uid)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("mailing-list", "create-grpsio-mailing-list-member", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateGrpsioMailingListMemberRequest returns an encoder for requests
// sent to the mailing-list create-grpsio-mailing-list-member server.
func EncodeCreateGrpsioMailingListMemberRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*mailinglist.CreateGrpsioMailingListMemberPayload)
		if !ok {
			return goahttp.ErrInvalidType("mailing-list", "create-grpsio-mailing-list-member", "*mailinglist.CreateGrpsioMailingListMemberPayload", v)
		}
		if p.BearerToken != nil {
			head := *p.BearerToken
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		values.Add("v", p.Version)
		req.URL.RawQuery = values.Encode()
		body := NewCreateGrpsioMailingListMemberRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("mailing-list", "create-grpsio-mailing-list-member", err)
		}
		return nil
	}
}

// DecodeCreateGrpsioMailingListMemberResponse returns a decoder for responses
// returned by the mailing-list create-grpsio-mailing-list-member endpoint.
// restoreBody controls whether the response body should be restored after
// having been read.
// DecodeCreateGrpsioMailingListMemberResponse may return the following errors:
//   - "BadRequest" (type *mailinglist.BadRequestError): http.StatusBadRequest
//   - "Conflict" (type *mailinglist.ConflictError): http.StatusConflict
//   - "InternalServerError" (type *mailinglist.InternalServerError): http.StatusInternalServerError
//   - "NotFound" (type *mailinglist.NotFoundError): http.StatusNotFound
//   - "ServiceUnavailable" (type *mailinglist.ServiceUnavailableError): http.StatusServiceUnavailable
//   - error: internal error
func DecodeCreateGrpsioMailingListMemberResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body CreateGrpsioMailingListMemberResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "create-grpsio-mailing-list-member", err)
			}
			err = ValidateCreateGrpsioMailingListMemberResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing-list", "create-grpsio-mailing-list-member", err)
			}
			res := NewCreateGrpsioMailingListMemberGrpsIoMemberFullCreated(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body CreateGrpsioMailingListMemberBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "create-grpsio-mailing-list-member", err)
			}
			err = ValidateCreateGrpsioMailingListMemberBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing-list", "create-grpsio-mailing-list-member", err)
			}
			return nil, NewCreateGrpsioMailingListMemberBadRequest(&body)
		case http.StatusConflict:
			var (
				body CreateGrpsioMailingListMemberConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "create-grpsio-mailing-list-member", err)
			}
			err = ValidateCreateGrpsioMailingListMemberConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing-list", "create-grpsio-mailing-list-member", err)
			}
			return nil, NewCreateGrpsioMailingListMemberConflict(&body)
		case http.StatusInternalServerError:
			var (
				body CreateGrpsioMailingListMemberInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "create-grpsio-mailing-list-member", err)
			}
			err = ValidateCreateGrpsioMailingListMemberInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing-list", "create-grpsio-mailing-list-member", err)
			}
			return nil, NewCreateGrpsioMailingListMemberInternalServerError(&body)
		case http.StatusNotFound:
			var (
				body CreateGrpsioMailingListMemberNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "create-grpsio-mailing-list-member", err)
			}
			err = ValidateCreateGrpsioMailingListMemberNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing-list", "create-grpsio-mailing-list-member", err)
			}
			return nil, NewCreateGrpsioMailingListMemberNotFound(&body)
		case http.StatusServiceUnavailable:
			var (
				body CreateGrpsioMailingListMemberServiceUnavailableResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "create-grpsio-mailing-list-member", err)
			}
			err = ValidateCreateGrpsioMailingListMemberServiceUnavailableResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing-list", "create-grpsio-mailing-list-member", err)
			}
			return nil, NewCreateGrpsioMailingListMemberServiceUnavailable(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("mailing-list", "create-grpsio-mailing-list-member", resp.StatusCode, string(body))
		}
	}
}

// BuildGetGrpsioMailingListMemberRequest instantiates a HTTP request object
// with method and path set to call the "mailing-list" service
// "get-grpsio-mailing-list-member" endpoint
func (c *Client) BuildGetGrpsioMailingListMemberRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		uid       string
		memberUID string
	)
	{
		p, ok := v.(*mailinglist.GetGrpsioMailingListMemberPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("mailing-list", "get-grpsio-mailing-list-member", "*mailinglist.GetGrpsioMailingListMemberPayload", v)
		}
		uid = p.UID
		memberUID = p.MemberUID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetGrpsioMailingListMemberMailingListPath(uid, memberUID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("mailing-list", "get-grpsio-mailing-list-member", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetGrpsioMailingListMemberRequest returns an encoder for requests sent
// to the mailing-list get-grpsio-mailing-list-member server.
func EncodeGetGrpsioMailingListMemberRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*mailinglist.GetGrpsioMailingListMemberPayload)
		if !ok {
			return goahttp.ErrInvalidType("mailing-list", "get-grpsio-mailing-list-member", "*mailinglist.GetGrpsioMailingListMemberPayload", v)
		}
		{
			head := p.BearerToken
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		values.Add("v", p.Version)
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeGetGrpsioMailingListMemberResponse returns a decoder for responses
// returned by the mailing-list get-grpsio-mailing-list-member endpoint.
// restoreBody controls whether the response body should be restored after
// having been read.
// DecodeGetGrpsioMailingListMemberResponse may return the following errors:
//   - "BadRequest" (type *mailinglist.BadRequestError): http.StatusBadRequest
//   - "InternalServerError" (type *mailinglist.InternalServerError): http.StatusInternalServerError
//   - "NotFound" (type *mailinglist.NotFoundError): http.StatusNotFound
//   - "ServiceUnavailable" (type *mailinglist.ServiceUnavailableError): http.StatusServiceUnavailable
//   - error: internal error
func DecodeGetGrpsioMailingListMemberResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetGrpsioMailingListMemberResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "get-grpsio-mailing-list-member", err)
			}
			err = ValidateGetGrpsioMailingListMemberResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing-list", "get-grpsio-mailing-list-member", err)
			}
			var (
				etag *string
			)
			etagRaw := resp.Header.Get("Etag")
			if etagRaw != "" {
				etag = &etagRaw
			}
			res := NewGetGrpsioMailingListMemberResultOK(&body, etag)
			return res, nil
		case http.StatusBadRequest:
			var (
				body GetGrpsioMailingListMemberBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "get-grpsio-mailing-list-member", err)
			}
			err = ValidateGetGrpsioMailingListMemberBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing-list", "get-grpsio-mailing-list-member", err)
			}
			return nil, NewGetGrpsioMailingListMemberBadRequest(&body)
		case http.StatusInternalServerError:
			var (
				body GetGrpsioMailingListMemberInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "get-grpsio-mailing-list-member", err)
			}
			err = ValidateGetGrpsioMailingListMemberInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing-list", "get-grpsio-mailing-list-member", err)
			}
			return nil, NewGetGrpsioMailingListMemberInternalServerError(&body)
		case http.StatusNotFound:
			var (
				body GetGrpsioMailingListMemberNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "get-grpsio-mailing-list-member", err)
			}
			err = ValidateGetGrpsioMailingListMemberNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing-list", "get-grpsio-mailing-list-member", err)
			}
			return nil, NewGetGrpsioMailingListMemberNotFound(&body)
		case http.StatusServiceUnavailable:
			var (
				body GetGrpsioMailingListMemberServiceUnavailableResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "get-grpsio-mailing-list-member", err)
			}
			err = ValidateGetGrpsioMailingListMemberServiceUnavailableResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing-list", "get-grpsio-mailing-list-member", err)
			}
			return nil, NewGetGrpsioMailingListMemberServiceUnavailable(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("mailing-list", "get-grpsio-mailing-list-member", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateGrpsioMailingListMemberRequest instantiates a HTTP request object
// with method and path set to call the "mailing-list" service
// "update-grpsio-mailing-list-member" endpoint
func (c *Client) BuildUpdateGrpsioMailingListMemberRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		uid       string
		memberUID string
	)
	{
		p, ok := v.(*mailinglist.UpdateGrpsioMailingListMemberPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("mailing-list", "update-grpsio-mailing-list-member", "*mailinglist.UpdateGrpsioMailingListMemberPayload", v)
		}
		uid = p.UID
		memberUID = p.MemberUID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateGrpsioMailingListMemberMailingListPath(uid, memberUID)}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("mailing-list", "update-grpsio-mailing-list-member", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateGrpsioMailingListMemberRequest returns an encoder for requests
// sent to the mailing-list update-grpsio-mailing-list-member server.
func EncodeUpdateGrpsioMailingListMemberRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*mailinglist.UpdateGrpsioMailingListMemberPayload)
		if !ok {
			return goahttp.ErrInvalidType("mailing-list", "update-grpsio-mailing-list-member", "*mailinglist.UpdateGrpsioMailingListMemberPayload", v)
		}
		{
			head := p.BearerToken
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		{
			head := p.IfMatch
			req.Header.Set("If-Match", head)
		}
		values := req.URL.Query()
		values.Add("v", p.Version)
		req.URL.RawQuery = values.Encode()
		body := NewUpdateGrpsioMailingListMemberRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("mailing-list", "update-grpsio-mailing-list-member", err)
		}
		return nil
	}
}

// DecodeUpdateGrpsioMailingListMemberResponse returns a decoder for responses
// returned by the mailing-list update-grpsio-mailing-list-member endpoint.
// restoreBody controls whether the response body should be restored after
// having been read.
// DecodeUpdateGrpsioMailingListMemberResponse may return the following errors:
//   - "BadRequest" (type *mailinglist.BadRequestError): http.StatusBadRequest
//   - "Conflict" (type *mailinglist.ConflictError): http.StatusConflict
//   - "InternalServerError" (type *mailinglist.InternalServerError): http.StatusInternalServerError
//   - "NotFound" (type *mailinglist.NotFoundError): http.StatusNotFound
//   - "ServiceUnavailable" (type *mailinglist.ServiceUnavailableError): http.StatusServiceUnavailable
//   - error: internal error
func DecodeUpdateGrpsioMailingListMemberResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdateGrpsioMailingListMemberResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "update-grpsio-mailing-list-member", err)
			}
			err = ValidateUpdateGrpsioMailingListMemberResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing-list", "update-grpsio-mailing-list-member", err)
			}
			res := NewUpdateGrpsioMailingListMemberGrpsIoMemberWithReadonlyAttributesOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body UpdateGrpsioMailingListMemberBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "update-grpsio-mailing-list-member", err)
			}
			err = ValidateUpdateGrpsioMailingListMemberBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing-list", "update-grpsio-mailing-list-member", err)
			}
			return nil, NewUpdateGrpsioMailingListMemberBadRequest(&body)
		case http.StatusConflict:
			var (
				body UpdateGrpsioMailingListMemberConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "update-grpsio-mailing-list-member", err)
			}
			err = ValidateUpdateGrpsioMailingListMemberConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing-list", "update-grpsio-mailing-list-member", err)
			}
			return nil, NewUpdateGrpsioMailingListMemberConflict(&body)
		case http.StatusInternalServerError:
			var (
				body UpdateGrpsioMailingListMemberInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "update-grpsio-mailing-list-member", err)
			}
			err = ValidateUpdateGrpsioMailingListMemberInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing-list", "update-grpsio-mailing-list-member", err)
			}
			return nil, NewUpdateGrpsioMailingListMemberInternalServerError(&body)
		case http.StatusNotFound:
			var (
				body UpdateGrpsioMailingListMemberNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "update-grpsio-mailing-list-member", err)
			}
			err = ValidateUpdateGrpsioMailingListMemberNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing-list", "update-grpsio-mailing-list-member", err)
			}
			return nil, NewUpdateGrpsioMailingListMemberNotFound(&body)
		case http.StatusServiceUnavailable:
			var (
				body UpdateGrpsioMailingListMemberServiceUnavailableResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "update-grpsio-mailing-list-member", err)
			}
			err = ValidateUpdateGrpsioMailingListMemberServiceUnavailableResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing-list", "update-grpsio-mailing-list-member", err)
			}
			return nil, NewUpdateGrpsioMailingListMemberServiceUnavailable(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("mailing-list", "update-grpsio-mailing-list-member", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteGrpsioMailingListMemberRequest instantiates a HTTP request object
// with method and path set to call the "mailing-list" service
// "delete-grpsio-mailing-list-member" endpoint
func (c *Client) BuildDeleteGrpsioMailingListMemberRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		uid       string
		memberUID string
	)
	{
		p, ok := v.(*mailinglist.DeleteGrpsioMailingListMemberPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("mailing-list", "delete-grpsio-mailing-list-member", "*mailinglist.DeleteGrpsioMailingListMemberPayload", v)
		}
		uid = p.UID
		memberUID = p.MemberUID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteGrpsioMailingListMemberMailingListPath(uid, memberUID)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("mailing-list", "delete-grpsio-mailing-list-member", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteGrpsioMailingListMemberRequest returns an encoder for requests
// sent to the mailing-list delete-grpsio-mailing-list-member server.
func EncodeDeleteGrpsioMailingListMemberRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*mailinglist.DeleteGrpsioMailingListMemberPayload)
		if !ok {
			return goahttp.ErrInvalidType("mailing-list", "delete-grpsio-mailing-list-member", "*mailinglist.DeleteGrpsioMailingListMemberPayload", v)
		}
		{
			head := p.BearerToken
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		{
			head := p.IfMatch
			req.Header.Set("If-Match", head)
		}
		values := req.URL.Query()
		values.Add("v", p.Version)
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeDeleteGrpsioMailingListMemberResponse returns a decoder for responses
// returned by the mailing-list delete-grpsio-mailing-list-member endpoint.
// restoreBody controls whether the response body should be restored after
// having been read.
// DecodeDeleteGrpsioMailingListMemberResponse may return the following errors:
//   - "BadRequest" (type *mailinglist.BadRequestError): http.StatusBadRequest
//   - "Conflict" (type *mailinglist.ConflictError): http.StatusConflict
//   - "InternalServerError" (type *mailinglist.InternalServerError): http.StatusInternalServerError
//   - "NotFound" (type *mailinglist.NotFoundError): http.StatusNotFound
//   - "ServiceUnavailable" (type *mailinglist.ServiceUnavailableError): http.StatusServiceUnavailable
//   - error: internal error
func DecodeDeleteGrpsioMailingListMemberResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body DeleteGrpsioMailingListMemberBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "delete-grpsio-mailing-list-member", err)
			}
			err = ValidateDeleteGrpsioMailingListMemberBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing-list", "delete-grpsio-mailing-list-member", err)
			}
			return nil, NewDeleteGrpsioMailingListMemberBadRequest(&body)
		case http.StatusConflict:
			var (
				body DeleteGrpsioMailingListMemberConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "delete-grpsio-mailing-list-member", err)
			}
			err = ValidateDeleteGrpsioMailingListMemberConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing-list", "delete-grpsio-mailing-list-member", err)
			}
			return nil, NewDeleteGrpsioMailingListMemberConflict(&body)
		case http.StatusInternalServerError:
			var (
				body DeleteGrpsioMailingListMemberInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "delete-grpsio-mailing-list-member", err)
			}
			err = ValidateDeleteGrpsioMailingListMemberInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing-list", "delete-grpsio-mailing-list-member", err)
			}
			return nil, NewDeleteGrpsioMailingListMemberInternalServerError(&body)
		case http.StatusNotFound:
			var (
				body DeleteGrpsioMailingListMemberNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "delete-grpsio-mailing-list-member", err)
			}
			err = ValidateDeleteGrpsioMailingListMemberNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing-list", "delete-grpsio-mailing-list-member", err)
			}
			return nil, NewDeleteGrpsioMailingListMemberNotFound(&body)
		case http.StatusServiceUnavailable:
			var (
				body DeleteGrpsioMailingListMemberServiceUnavailableResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "delete-grpsio-mailing-list-member", err)
			}
			err = ValidateDeleteGrpsioMailingListMemberServiceUnavailableResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing-list", "delete-grpsio-mailing-list-member", err)
			}
			return nil, NewDeleteGrpsioMailingListMemberServiceUnavailable(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("mailing-list", "delete-grpsio-mailing-list-member", resp.StatusCode, string(body))
		}
	}
}

// BuildGroupsioWebhookRequest instantiates a HTTP request object with method
// and path set to call the "mailing-list" service "groupsio-webhook" endpoint
func (c *Client) BuildGroupsioWebhookRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GroupsioWebhookMailingListPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("mailing-list", "groupsio-webhook", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGroupsioWebhookRequest returns an encoder for requests sent to the
// mailing-list groupsio-webhook server.
func EncodeGroupsioWebhookRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*mailinglist.GroupsioWebhookPayload)
		if !ok {
			return goahttp.ErrInvalidType("mailing-list", "groupsio-webhook", "*mailinglist.GroupsioWebhookPayload", v)
		}
		{
			head := p.Signature
			req.Header.Set("x-groupsio-signature", head)
		}
		body := NewGroupsioWebhookRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("mailing-list", "groupsio-webhook", err)
		}
		return nil
	}
}

// DecodeGroupsioWebhookResponse returns a decoder for responses returned by
// the mailing-list groupsio-webhook endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeGroupsioWebhookResponse may return the following errors:
//   - "BadRequest" (type *mailinglist.BadRequestError): http.StatusBadRequest
//   - "Unauthorized" (type *mailinglist.UnauthorizedError): http.StatusUnauthorized
//   - error: internal error
func DecodeGroupsioWebhookResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body GroupsioWebhookBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "groupsio-webhook", err)
			}
			err = ValidateGroupsioWebhookBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing-list", "groupsio-webhook", err)
			}
			return nil, NewGroupsioWebhookBadRequest(&body)
		case http.StatusUnauthorized:
			var (
				body GroupsioWebhookUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing-list", "groupsio-webhook", err)
			}
			err = ValidateGroupsioWebhookUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing-list", "groupsio-webhook", err)
			}
			return nil, NewGroupsioWebhookUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("mailing-list", "groupsio-webhook", resp.StatusCode, string(body))
		}
	}
}
