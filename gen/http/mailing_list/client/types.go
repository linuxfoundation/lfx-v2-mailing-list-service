// Code generated by goa v3.21.5, DO NOT EDIT.
//
// mailing-list HTTP client types
//
// Command:
// $ goa gen
// github.com/linuxfoundation/lfx-v2-mailing-list-service/cmd/mailing-list-api/design

package client

import (
	"unicode/utf8"

	mailinglist "github.com/linuxfoundation/lfx-v2-mailing-list-service/gen/mailing_list"
	goa "goa.design/goa/v3/pkg"
)

// CreateGrpsioServiceRequestBody is the type of the "mailing-list" service
// "create-grpsio-service" endpoint HTTP request body.
type CreateGrpsioServiceRequestBody struct {
	// Service type
	Type string `form:"type" json:"type" xml:"type"`
	// Service domain
	Domain *string `form:"domain,omitempty" json:"domain,omitempty" xml:"domain,omitempty"`
	// GroupsIO group ID
	GroupID *int64 `form:"group_id,omitempty" json:"group_id,omitempty" xml:"group_id,omitempty"`
	// Service status
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// List of global owner email addresses (required for primary, forbidden for
	// shared)
	GlobalOwners []string `form:"global_owners,omitempty" json:"global_owners,omitempty" xml:"global_owners,omitempty"`
	// Email prefix (required for formation and shared, forbidden for primary)
	Prefix *string `form:"prefix,omitempty" json:"prefix,omitempty" xml:"prefix,omitempty"`
	// Project slug identifier
	ProjectSlug *string `form:"project_slug,omitempty" json:"project_slug,omitempty" xml:"project_slug,omitempty"`
	// LFXv2 Project UID
	ProjectUID string `form:"project_uid" json:"project_uid" xml:"project_uid"`
	// Service URL
	URL *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
	// GroupsIO group name
	GroupName *string `form:"group_name,omitempty" json:"group_name,omitempty" xml:"group_name,omitempty"`
	// Whether the service is publicly accessible
	Public bool `form:"public" json:"public" xml:"public"`
	// Manager user IDs who can edit/modify this service
	Writers []string `form:"writers,omitempty" json:"writers,omitempty" xml:"writers,omitempty"`
	// Auditor user IDs who can audit this service
	Auditors []string `form:"auditors,omitempty" json:"auditors,omitempty" xml:"auditors,omitempty"`
}

// UpdateGrpsioServiceRequestBody is the type of the "mailing-list" service
// "update-grpsio-service" endpoint HTTP request body.
type UpdateGrpsioServiceRequestBody struct {
	// Service type
	Type string `form:"type" json:"type" xml:"type"`
	// Service domain
	Domain *string `form:"domain,omitempty" json:"domain,omitempty" xml:"domain,omitempty"`
	// GroupsIO group ID
	GroupID *int64 `form:"group_id,omitempty" json:"group_id,omitempty" xml:"group_id,omitempty"`
	// Service status
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// List of global owner email addresses (required for primary, forbidden for
	// shared)
	GlobalOwners []string `form:"global_owners,omitempty" json:"global_owners,omitempty" xml:"global_owners,omitempty"`
	// Email prefix (required for formation and shared, forbidden for primary)
	Prefix *string `form:"prefix,omitempty" json:"prefix,omitempty" xml:"prefix,omitempty"`
	// Project slug identifier
	ProjectSlug *string `form:"project_slug,omitempty" json:"project_slug,omitempty" xml:"project_slug,omitempty"`
	// LFXv2 Project UID
	ProjectUID string `form:"project_uid" json:"project_uid" xml:"project_uid"`
	// Service URL
	URL *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
	// GroupsIO group name
	GroupName *string `form:"group_name,omitempty" json:"group_name,omitempty" xml:"group_name,omitempty"`
	// Whether the service is publicly accessible
	Public bool `form:"public" json:"public" xml:"public"`
	// Manager user IDs who can edit/modify this service
	Writers []string `form:"writers,omitempty" json:"writers,omitempty" xml:"writers,omitempty"`
	// Auditor user IDs who can audit this service
	Auditors []string `form:"auditors,omitempty" json:"auditors,omitempty" xml:"auditors,omitempty"`
}

// CreateGrpsioMailingListRequestBody is the type of the "mailing-list" service
// "create-grpsio-mailing-list" endpoint HTTP request body.
type CreateGrpsioMailingListRequestBody struct {
	// Mailing list group name
	GroupName string `form:"group_name" json:"group_name" xml:"group_name"`
	// Whether the mailing list is publicly accessible
	Public bool `form:"public" json:"public" xml:"public"`
	// Mailing list type
	Type string `form:"type" json:"type" xml:"type"`
	// Committee UUID for committee-based mailing lists
	CommitteeUID *string `form:"committee_uid,omitempty" json:"committee_uid,omitempty" xml:"committee_uid,omitempty"`
	// Committee member filters
	CommitteeFilters []string `form:"committee_filters,omitempty" json:"committee_filters,omitempty" xml:"committee_filters,omitempty"`
	// Mailing list description (minimum 11 characters)
	Description string `form:"description" json:"description" xml:"description"`
	// Mailing list title
	Title string `form:"title" json:"title" xml:"title"`
	// Subject tag prefix
	SubjectTag *string `form:"subject_tag,omitempty" json:"subject_tag,omitempty" xml:"subject_tag,omitempty"`
	// Service UUID
	ServiceUID string `form:"service_uid" json:"service_uid" xml:"service_uid"`
	// Manager user IDs who can edit/modify this service
	Writers []string `form:"writers,omitempty" json:"writers,omitempty" xml:"writers,omitempty"`
	// Auditor user IDs who can audit this service
	Auditors []string `form:"auditors,omitempty" json:"auditors,omitempty" xml:"auditors,omitempty"`
}

// CreateGrpsioServiceResponseBody is the type of the "mailing-list" service
// "create-grpsio-service" endpoint HTTP response body.
type CreateGrpsioServiceResponseBody struct {
	// Service UID -- unique identifier for the service
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// Service type
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// Service domain
	Domain *string `form:"domain,omitempty" json:"domain,omitempty" xml:"domain,omitempty"`
	// GroupsIO group ID
	GroupID *int64 `form:"group_id,omitempty" json:"group_id,omitempty" xml:"group_id,omitempty"`
	// Service status
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// List of global owner email addresses (required for primary, forbidden for
	// shared)
	GlobalOwners []string `form:"global_owners,omitempty" json:"global_owners,omitempty" xml:"global_owners,omitempty"`
	// Email prefix (required for formation and shared, forbidden for primary)
	Prefix *string `form:"prefix,omitempty" json:"prefix,omitempty" xml:"prefix,omitempty"`
	// Project slug identifier
	ProjectSlug *string `form:"project_slug,omitempty" json:"project_slug,omitempty" xml:"project_slug,omitempty"`
	// LFXv2 Project UID
	ProjectUID *string `form:"project_uid,omitempty" json:"project_uid,omitempty" xml:"project_uid,omitempty"`
	// Service URL
	URL *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
	// GroupsIO group name
	GroupName *string `form:"group_name,omitempty" json:"group_name,omitempty" xml:"group_name,omitempty"`
	// Whether the service is publicly accessible
	Public *bool `form:"public,omitempty" json:"public,omitempty" xml:"public,omitempty"`
	// Project name (read-only)
	ProjectName *string `form:"project_name,omitempty" json:"project_name,omitempty" xml:"project_name,omitempty"`
	// The timestamp when the service was created (read-only)
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The timestamp when the service was last updated (read-only)
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// The timestamp when the service was last reviewed in RFC3339 format
	LastReviewedAt *string `form:"last_reviewed_at,omitempty" json:"last_reviewed_at,omitempty" xml:"last_reviewed_at,omitempty"`
	// The user ID who last reviewed this service
	LastReviewedBy *string `form:"last_reviewed_by,omitempty" json:"last_reviewed_by,omitempty" xml:"last_reviewed_by,omitempty"`
	// The user ID who last audited the service
	LastAuditedBy *string `form:"last_audited_by,omitempty" json:"last_audited_by,omitempty" xml:"last_audited_by,omitempty"`
	// The timestamp when the service was last audited
	LastAuditedTime *string `form:"last_audited_time,omitempty" json:"last_audited_time,omitempty" xml:"last_audited_time,omitempty"`
	// Manager user IDs who can edit/modify this service
	Writers []string `form:"writers,omitempty" json:"writers,omitempty" xml:"writers,omitempty"`
	// Auditor user IDs who can audit this service
	Auditors []string `form:"auditors,omitempty" json:"auditors,omitempty" xml:"auditors,omitempty"`
}

// GetGrpsioServiceResponseBody is the type of the "mailing-list" service
// "get-grpsio-service" endpoint HTTP response body.
type GetGrpsioServiceResponseBody ServiceWithReadonlyAttributesResponseBody

// UpdateGrpsioServiceResponseBody is the type of the "mailing-list" service
// "update-grpsio-service" endpoint HTTP response body.
type UpdateGrpsioServiceResponseBody struct {
	// Service UID -- unique identifier for the service
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// Service type
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// Service domain
	Domain *string `form:"domain,omitempty" json:"domain,omitempty" xml:"domain,omitempty"`
	// GroupsIO group ID
	GroupID *int64 `form:"group_id,omitempty" json:"group_id,omitempty" xml:"group_id,omitempty"`
	// Service status
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// List of global owner email addresses (required for primary, forbidden for
	// shared)
	GlobalOwners []string `form:"global_owners,omitempty" json:"global_owners,omitempty" xml:"global_owners,omitempty"`
	// Email prefix (required for formation and shared, forbidden for primary)
	Prefix *string `form:"prefix,omitempty" json:"prefix,omitempty" xml:"prefix,omitempty"`
	// Project slug identifier
	ProjectSlug *string `form:"project_slug,omitempty" json:"project_slug,omitempty" xml:"project_slug,omitempty"`
	// LFXv2 Project UID
	ProjectUID *string `form:"project_uid,omitempty" json:"project_uid,omitempty" xml:"project_uid,omitempty"`
	// Service URL
	URL *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
	// GroupsIO group name
	GroupName *string `form:"group_name,omitempty" json:"group_name,omitempty" xml:"group_name,omitempty"`
	// Whether the service is publicly accessible
	Public *bool `form:"public,omitempty" json:"public,omitempty" xml:"public,omitempty"`
	// Project name (read-only)
	ProjectName *string `form:"project_name,omitempty" json:"project_name,omitempty" xml:"project_name,omitempty"`
	// The timestamp when the service was created (read-only)
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The timestamp when the service was last updated (read-only)
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// The timestamp when the service was last reviewed in RFC3339 format
	LastReviewedAt *string `form:"last_reviewed_at,omitempty" json:"last_reviewed_at,omitempty" xml:"last_reviewed_at,omitempty"`
	// The user ID who last reviewed this service
	LastReviewedBy *string `form:"last_reviewed_by,omitempty" json:"last_reviewed_by,omitempty" xml:"last_reviewed_by,omitempty"`
	// The user ID who last audited the service
	LastAuditedBy *string `form:"last_audited_by,omitempty" json:"last_audited_by,omitempty" xml:"last_audited_by,omitempty"`
	// The timestamp when the service was last audited
	LastAuditedTime *string `form:"last_audited_time,omitempty" json:"last_audited_time,omitempty" xml:"last_audited_time,omitempty"`
	// Manager user IDs who can edit/modify this service
	Writers []string `form:"writers,omitempty" json:"writers,omitempty" xml:"writers,omitempty"`
	// Auditor user IDs who can audit this service
	Auditors []string `form:"auditors,omitempty" json:"auditors,omitempty" xml:"auditors,omitempty"`
}

// CreateGrpsioMailingListResponseBody is the type of the "mailing-list"
// service "create-grpsio-mailing-list" endpoint HTTP response body.
type CreateGrpsioMailingListResponseBody struct {
	// Mailing list UID -- unique identifier for the mailing list
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// Mailing list group name
	GroupName *string `form:"group_name,omitempty" json:"group_name,omitempty" xml:"group_name,omitempty"`
	// Whether the mailing list is publicly accessible
	Public *bool `form:"public,omitempty" json:"public,omitempty" xml:"public,omitempty"`
	// Mailing list type
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// Committee UUID for committee-based mailing lists
	CommitteeUID *string `form:"committee_uid,omitempty" json:"committee_uid,omitempty" xml:"committee_uid,omitempty"`
	// Committee member filters
	CommitteeFilters []string `form:"committee_filters,omitempty" json:"committee_filters,omitempty" xml:"committee_filters,omitempty"`
	// Mailing list description (minimum 11 characters)
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Mailing list title
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Subject tag prefix
	SubjectTag *string `form:"subject_tag,omitempty" json:"subject_tag,omitempty" xml:"subject_tag,omitempty"`
	// Service UUID
	ServiceUID *string `form:"service_uid,omitempty" json:"service_uid,omitempty" xml:"service_uid,omitempty"`
	// LFXv2 Project UID (inherited from parent service)
	ProjectUID *string `form:"project_uid,omitempty" json:"project_uid,omitempty" xml:"project_uid,omitempty"`
	// Project name (read-only)
	ProjectName *string `form:"project_name,omitempty" json:"project_name,omitempty" xml:"project_name,omitempty"`
	// Project slug identifier (read-only)
	ProjectSlug *string `form:"project_slug,omitempty" json:"project_slug,omitempty" xml:"project_slug,omitempty"`
	// The timestamp when the service was created (read-only)
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The timestamp when the service was last updated (read-only)
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// The timestamp when the service was last reviewed in RFC3339 format
	LastReviewedAt *string `form:"last_reviewed_at,omitempty" json:"last_reviewed_at,omitempty" xml:"last_reviewed_at,omitempty"`
	// The user ID who last reviewed this service
	LastReviewedBy *string `form:"last_reviewed_by,omitempty" json:"last_reviewed_by,omitempty" xml:"last_reviewed_by,omitempty"`
	// Manager user IDs who can edit/modify this service
	Writers []string `form:"writers,omitempty" json:"writers,omitempty" xml:"writers,omitempty"`
	// Auditor user IDs who can audit this service
	Auditors []string `form:"auditors,omitempty" json:"auditors,omitempty" xml:"auditors,omitempty"`
}

// ReadyzServiceUnavailableResponseBody is the type of the "mailing-list"
// service "readyz" endpoint HTTP response body for the "ServiceUnavailable"
// error.
type ReadyzServiceUnavailableResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateGrpsioServiceBadRequestResponseBody is the type of the "mailing-list"
// service "create-grpsio-service" endpoint HTTP response body for the
// "BadRequest" error.
type CreateGrpsioServiceBadRequestResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateGrpsioServiceConflictResponseBody is the type of the "mailing-list"
// service "create-grpsio-service" endpoint HTTP response body for the
// "Conflict" error.
type CreateGrpsioServiceConflictResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateGrpsioServiceInternalServerErrorResponseBody is the type of the
// "mailing-list" service "create-grpsio-service" endpoint HTTP response body
// for the "InternalServerError" error.
type CreateGrpsioServiceInternalServerErrorResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateGrpsioServiceNotFoundResponseBody is the type of the "mailing-list"
// service "create-grpsio-service" endpoint HTTP response body for the
// "NotFound" error.
type CreateGrpsioServiceNotFoundResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateGrpsioServiceServiceUnavailableResponseBody is the type of the
// "mailing-list" service "create-grpsio-service" endpoint HTTP response body
// for the "ServiceUnavailable" error.
type CreateGrpsioServiceServiceUnavailableResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetGrpsioServiceBadRequestResponseBody is the type of the "mailing-list"
// service "get-grpsio-service" endpoint HTTP response body for the
// "BadRequest" error.
type GetGrpsioServiceBadRequestResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetGrpsioServiceInternalServerErrorResponseBody is the type of the
// "mailing-list" service "get-grpsio-service" endpoint HTTP response body for
// the "InternalServerError" error.
type GetGrpsioServiceInternalServerErrorResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetGrpsioServiceNotFoundResponseBody is the type of the "mailing-list"
// service "get-grpsio-service" endpoint HTTP response body for the "NotFound"
// error.
type GetGrpsioServiceNotFoundResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetGrpsioServiceServiceUnavailableResponseBody is the type of the
// "mailing-list" service "get-grpsio-service" endpoint HTTP response body for
// the "ServiceUnavailable" error.
type GetGrpsioServiceServiceUnavailableResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateGrpsioServiceBadRequestResponseBody is the type of the "mailing-list"
// service "update-grpsio-service" endpoint HTTP response body for the
// "BadRequest" error.
type UpdateGrpsioServiceBadRequestResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateGrpsioServiceConflictResponseBody is the type of the "mailing-list"
// service "update-grpsio-service" endpoint HTTP response body for the
// "Conflict" error.
type UpdateGrpsioServiceConflictResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateGrpsioServiceInternalServerErrorResponseBody is the type of the
// "mailing-list" service "update-grpsio-service" endpoint HTTP response body
// for the "InternalServerError" error.
type UpdateGrpsioServiceInternalServerErrorResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateGrpsioServiceNotFoundResponseBody is the type of the "mailing-list"
// service "update-grpsio-service" endpoint HTTP response body for the
// "NotFound" error.
type UpdateGrpsioServiceNotFoundResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateGrpsioServiceServiceUnavailableResponseBody is the type of the
// "mailing-list" service "update-grpsio-service" endpoint HTTP response body
// for the "ServiceUnavailable" error.
type UpdateGrpsioServiceServiceUnavailableResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteGrpsioServiceBadRequestResponseBody is the type of the "mailing-list"
// service "delete-grpsio-service" endpoint HTTP response body for the
// "BadRequest" error.
type DeleteGrpsioServiceBadRequestResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteGrpsioServiceConflictResponseBody is the type of the "mailing-list"
// service "delete-grpsio-service" endpoint HTTP response body for the
// "Conflict" error.
type DeleteGrpsioServiceConflictResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteGrpsioServiceInternalServerErrorResponseBody is the type of the
// "mailing-list" service "delete-grpsio-service" endpoint HTTP response body
// for the "InternalServerError" error.
type DeleteGrpsioServiceInternalServerErrorResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteGrpsioServiceNotFoundResponseBody is the type of the "mailing-list"
// service "delete-grpsio-service" endpoint HTTP response body for the
// "NotFound" error.
type DeleteGrpsioServiceNotFoundResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteGrpsioServiceServiceUnavailableResponseBody is the type of the
// "mailing-list" service "delete-grpsio-service" endpoint HTTP response body
// for the "ServiceUnavailable" error.
type DeleteGrpsioServiceServiceUnavailableResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateGrpsioMailingListBadRequestResponseBody is the type of the
// "mailing-list" service "create-grpsio-mailing-list" endpoint HTTP response
// body for the "BadRequest" error.
type CreateGrpsioMailingListBadRequestResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateGrpsioMailingListConflictResponseBody is the type of the
// "mailing-list" service "create-grpsio-mailing-list" endpoint HTTP response
// body for the "Conflict" error.
type CreateGrpsioMailingListConflictResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateGrpsioMailingListInternalServerErrorResponseBody is the type of the
// "mailing-list" service "create-grpsio-mailing-list" endpoint HTTP response
// body for the "InternalServerError" error.
type CreateGrpsioMailingListInternalServerErrorResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateGrpsioMailingListNotFoundResponseBody is the type of the
// "mailing-list" service "create-grpsio-mailing-list" endpoint HTTP response
// body for the "NotFound" error.
type CreateGrpsioMailingListNotFoundResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateGrpsioMailingListServiceUnavailableResponseBody is the type of the
// "mailing-list" service "create-grpsio-mailing-list" endpoint HTTP response
// body for the "ServiceUnavailable" error.
type CreateGrpsioMailingListServiceUnavailableResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// ServiceWithReadonlyAttributesResponseBody is used to define fields on
// response body types.
type ServiceWithReadonlyAttributesResponseBody struct {
	// Service UID -- unique identifier for the service
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// Service type
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// Service domain
	Domain *string `form:"domain,omitempty" json:"domain,omitempty" xml:"domain,omitempty"`
	// GroupsIO group ID
	GroupID *int64 `form:"group_id,omitempty" json:"group_id,omitempty" xml:"group_id,omitempty"`
	// Service status
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// List of global owner email addresses (required for primary, forbidden for
	// shared)
	GlobalOwners []string `form:"global_owners,omitempty" json:"global_owners,omitempty" xml:"global_owners,omitempty"`
	// Email prefix (required for formation and shared, forbidden for primary)
	Prefix *string `form:"prefix,omitempty" json:"prefix,omitempty" xml:"prefix,omitempty"`
	// Project slug identifier
	ProjectSlug *string `form:"project_slug,omitempty" json:"project_slug,omitempty" xml:"project_slug,omitempty"`
	// LFXv2 Project UID
	ProjectUID *string `form:"project_uid,omitempty" json:"project_uid,omitempty" xml:"project_uid,omitempty"`
	// Service URL
	URL *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
	// GroupsIO group name
	GroupName *string `form:"group_name,omitempty" json:"group_name,omitempty" xml:"group_name,omitempty"`
	// Whether the service is publicly accessible
	Public *bool `form:"public,omitempty" json:"public,omitempty" xml:"public,omitempty"`
	// Project name (read-only)
	ProjectName *string `form:"project_name,omitempty" json:"project_name,omitempty" xml:"project_name,omitempty"`
	// The timestamp when the service was created (read-only)
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The timestamp when the service was last updated (read-only)
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// The timestamp when the service was last reviewed in RFC3339 format
	LastReviewedAt *string `form:"last_reviewed_at,omitempty" json:"last_reviewed_at,omitempty" xml:"last_reviewed_at,omitempty"`
	// The user ID who last reviewed this service
	LastReviewedBy *string `form:"last_reviewed_by,omitempty" json:"last_reviewed_by,omitempty" xml:"last_reviewed_by,omitempty"`
	// The user ID who last audited the service
	LastAuditedBy *string `form:"last_audited_by,omitempty" json:"last_audited_by,omitempty" xml:"last_audited_by,omitempty"`
	// The timestamp when the service was last audited
	LastAuditedTime *string `form:"last_audited_time,omitempty" json:"last_audited_time,omitempty" xml:"last_audited_time,omitempty"`
	// Manager user IDs who can edit/modify this service
	Writers []string `form:"writers,omitempty" json:"writers,omitempty" xml:"writers,omitempty"`
	// Auditor user IDs who can audit this service
	Auditors []string `form:"auditors,omitempty" json:"auditors,omitempty" xml:"auditors,omitempty"`
}

// NewCreateGrpsioServiceRequestBody builds the HTTP request body from the
// payload of the "create-grpsio-service" endpoint of the "mailing-list"
// service.
func NewCreateGrpsioServiceRequestBody(p *mailinglist.CreateGrpsioServicePayload) *CreateGrpsioServiceRequestBody {
	body := &CreateGrpsioServiceRequestBody{
		Type:        p.Type,
		Domain:      p.Domain,
		GroupID:     p.GroupID,
		Status:      p.Status,
		Prefix:      p.Prefix,
		ProjectSlug: p.ProjectSlug,
		ProjectUID:  p.ProjectUID,
		URL:         p.URL,
		GroupName:   p.GroupName,
		Public:      p.Public,
	}
	if p.GlobalOwners != nil {
		body.GlobalOwners = make([]string, len(p.GlobalOwners))
		for i, val := range p.GlobalOwners {
			body.GlobalOwners[i] = val
		}
	}
	{
		var zero bool
		if body.Public == zero {
			body.Public = false
		}
	}
	if p.Writers != nil {
		body.Writers = make([]string, len(p.Writers))
		for i, val := range p.Writers {
			body.Writers[i] = val
		}
	}
	if p.Auditors != nil {
		body.Auditors = make([]string, len(p.Auditors))
		for i, val := range p.Auditors {
			body.Auditors[i] = val
		}
	}
	return body
}

// NewUpdateGrpsioServiceRequestBody builds the HTTP request body from the
// payload of the "update-grpsio-service" endpoint of the "mailing-list"
// service.
func NewUpdateGrpsioServiceRequestBody(p *mailinglist.UpdateGrpsioServicePayload) *UpdateGrpsioServiceRequestBody {
	body := &UpdateGrpsioServiceRequestBody{
		Type:        p.Type,
		Domain:      p.Domain,
		GroupID:     p.GroupID,
		Status:      p.Status,
		Prefix:      p.Prefix,
		ProjectSlug: p.ProjectSlug,
		ProjectUID:  p.ProjectUID,
		URL:         p.URL,
		GroupName:   p.GroupName,
		Public:      p.Public,
	}
	if p.GlobalOwners != nil {
		body.GlobalOwners = make([]string, len(p.GlobalOwners))
		for i, val := range p.GlobalOwners {
			body.GlobalOwners[i] = val
		}
	}
	{
		var zero bool
		if body.Public == zero {
			body.Public = false
		}
	}
	if p.Writers != nil {
		body.Writers = make([]string, len(p.Writers))
		for i, val := range p.Writers {
			body.Writers[i] = val
		}
	}
	if p.Auditors != nil {
		body.Auditors = make([]string, len(p.Auditors))
		for i, val := range p.Auditors {
			body.Auditors[i] = val
		}
	}
	return body
}

// NewCreateGrpsioMailingListRequestBody builds the HTTP request body from the
// payload of the "create-grpsio-mailing-list" endpoint of the "mailing-list"
// service.
func NewCreateGrpsioMailingListRequestBody(p *mailinglist.CreateGrpsioMailingListPayload) *CreateGrpsioMailingListRequestBody {
	body := &CreateGrpsioMailingListRequestBody{
		GroupName:    p.GroupName,
		Public:       p.Public,
		Type:         p.Type,
		CommitteeUID: p.CommitteeUID,
		Description:  p.Description,
		Title:        p.Title,
		SubjectTag:   p.SubjectTag,
		ServiceUID:   p.ServiceUID,
	}
	if p.CommitteeFilters != nil {
		body.CommitteeFilters = make([]string, len(p.CommitteeFilters))
		for i, val := range p.CommitteeFilters {
			body.CommitteeFilters[i] = val
		}
	}
	if p.Writers != nil {
		body.Writers = make([]string, len(p.Writers))
		for i, val := range p.Writers {
			body.Writers[i] = val
		}
	}
	if p.Auditors != nil {
		body.Auditors = make([]string, len(p.Auditors))
		for i, val := range p.Auditors {
			body.Auditors[i] = val
		}
	}
	return body
}

// NewReadyzServiceUnavailable builds a mailing-list service readyz endpoint
// ServiceUnavailable error.
func NewReadyzServiceUnavailable(body *ReadyzServiceUnavailableResponseBody) *mailinglist.ServiceUnavailableError {
	v := &mailinglist.ServiceUnavailableError{
		Message: *body.Message,
	}

	return v
}

// NewCreateGrpsioServiceServiceFullCreated builds a "mailing-list" service
// "create-grpsio-service" endpoint result from a HTTP "Created" response.
func NewCreateGrpsioServiceServiceFullCreated(body *CreateGrpsioServiceResponseBody) *mailinglist.ServiceFull {
	v := &mailinglist.ServiceFull{
		UID:             body.UID,
		Type:            *body.Type,
		Domain:          body.Domain,
		GroupID:         body.GroupID,
		Status:          body.Status,
		Prefix:          body.Prefix,
		ProjectSlug:     body.ProjectSlug,
		ProjectUID:      *body.ProjectUID,
		URL:             body.URL,
		GroupName:       body.GroupName,
		ProjectName:     body.ProjectName,
		CreatedAt:       body.CreatedAt,
		UpdatedAt:       body.UpdatedAt,
		LastReviewedAt:  body.LastReviewedAt,
		LastReviewedBy:  body.LastReviewedBy,
		LastAuditedBy:   body.LastAuditedBy,
		LastAuditedTime: body.LastAuditedTime,
	}
	if body.Public != nil {
		v.Public = *body.Public
	}
	if body.GlobalOwners != nil {
		v.GlobalOwners = make([]string, len(body.GlobalOwners))
		for i, val := range body.GlobalOwners {
			v.GlobalOwners[i] = val
		}
	}
	if body.Public == nil {
		v.Public = false
	}
	if body.Writers != nil {
		v.Writers = make([]string, len(body.Writers))
		for i, val := range body.Writers {
			v.Writers[i] = val
		}
	}
	if body.Auditors != nil {
		v.Auditors = make([]string, len(body.Auditors))
		for i, val := range body.Auditors {
			v.Auditors[i] = val
		}
	}

	return v
}

// NewCreateGrpsioServiceBadRequest builds a mailing-list service
// create-grpsio-service endpoint BadRequest error.
func NewCreateGrpsioServiceBadRequest(body *CreateGrpsioServiceBadRequestResponseBody) *mailinglist.BadRequestError {
	v := &mailinglist.BadRequestError{
		Message: *body.Message,
	}

	return v
}

// NewCreateGrpsioServiceConflict builds a mailing-list service
// create-grpsio-service endpoint Conflict error.
func NewCreateGrpsioServiceConflict(body *CreateGrpsioServiceConflictResponseBody) *mailinglist.ConflictError {
	v := &mailinglist.ConflictError{
		Message: *body.Message,
	}

	return v
}

// NewCreateGrpsioServiceInternalServerError builds a mailing-list service
// create-grpsio-service endpoint InternalServerError error.
func NewCreateGrpsioServiceInternalServerError(body *CreateGrpsioServiceInternalServerErrorResponseBody) *mailinglist.InternalServerError {
	v := &mailinglist.InternalServerError{
		Message: *body.Message,
	}

	return v
}

// NewCreateGrpsioServiceNotFound builds a mailing-list service
// create-grpsio-service endpoint NotFound error.
func NewCreateGrpsioServiceNotFound(body *CreateGrpsioServiceNotFoundResponseBody) *mailinglist.NotFoundError {
	v := &mailinglist.NotFoundError{
		Message: *body.Message,
	}

	return v
}

// NewCreateGrpsioServiceServiceUnavailable builds a mailing-list service
// create-grpsio-service endpoint ServiceUnavailable error.
func NewCreateGrpsioServiceServiceUnavailable(body *CreateGrpsioServiceServiceUnavailableResponseBody) *mailinglist.ServiceUnavailableError {
	v := &mailinglist.ServiceUnavailableError{
		Message: *body.Message,
	}

	return v
}

// NewGetGrpsioServiceResultOK builds a "mailing-list" service
// "get-grpsio-service" endpoint result from a HTTP "OK" response.
func NewGetGrpsioServiceResultOK(body *GetGrpsioServiceResponseBody, etag *string) *mailinglist.GetGrpsioServiceResult {
	v := &mailinglist.ServiceWithReadonlyAttributes{
		UID:             body.UID,
		Type:            *body.Type,
		Domain:          body.Domain,
		GroupID:         body.GroupID,
		Status:          body.Status,
		Prefix:          body.Prefix,
		ProjectSlug:     body.ProjectSlug,
		ProjectUID:      *body.ProjectUID,
		URL:             body.URL,
		GroupName:       body.GroupName,
		ProjectName:     body.ProjectName,
		CreatedAt:       body.CreatedAt,
		UpdatedAt:       body.UpdatedAt,
		LastReviewedAt:  body.LastReviewedAt,
		LastReviewedBy:  body.LastReviewedBy,
		LastAuditedBy:   body.LastAuditedBy,
		LastAuditedTime: body.LastAuditedTime,
	}
	if body.Public != nil {
		v.Public = *body.Public
	}
	if body.GlobalOwners != nil {
		v.GlobalOwners = make([]string, len(body.GlobalOwners))
		for i, val := range body.GlobalOwners {
			v.GlobalOwners[i] = val
		}
	}
	if body.Public == nil {
		v.Public = false
	}
	if body.Writers != nil {
		v.Writers = make([]string, len(body.Writers))
		for i, val := range body.Writers {
			v.Writers[i] = val
		}
	}
	if body.Auditors != nil {
		v.Auditors = make([]string, len(body.Auditors))
		for i, val := range body.Auditors {
			v.Auditors[i] = val
		}
	}
	res := &mailinglist.GetGrpsioServiceResult{
		Service: v,
	}
	res.Etag = etag

	return res
}

// NewGetGrpsioServiceBadRequest builds a mailing-list service
// get-grpsio-service endpoint BadRequest error.
func NewGetGrpsioServiceBadRequest(body *GetGrpsioServiceBadRequestResponseBody) *mailinglist.BadRequestError {
	v := &mailinglist.BadRequestError{
		Message: *body.Message,
	}

	return v
}

// NewGetGrpsioServiceInternalServerError builds a mailing-list service
// get-grpsio-service endpoint InternalServerError error.
func NewGetGrpsioServiceInternalServerError(body *GetGrpsioServiceInternalServerErrorResponseBody) *mailinglist.InternalServerError {
	v := &mailinglist.InternalServerError{
		Message: *body.Message,
	}

	return v
}

// NewGetGrpsioServiceNotFound builds a mailing-list service get-grpsio-service
// endpoint NotFound error.
func NewGetGrpsioServiceNotFound(body *GetGrpsioServiceNotFoundResponseBody) *mailinglist.NotFoundError {
	v := &mailinglist.NotFoundError{
		Message: *body.Message,
	}

	return v
}

// NewGetGrpsioServiceServiceUnavailable builds a mailing-list service
// get-grpsio-service endpoint ServiceUnavailable error.
func NewGetGrpsioServiceServiceUnavailable(body *GetGrpsioServiceServiceUnavailableResponseBody) *mailinglist.ServiceUnavailableError {
	v := &mailinglist.ServiceUnavailableError{
		Message: *body.Message,
	}

	return v
}

// NewUpdateGrpsioServiceServiceWithReadonlyAttributesOK builds a
// "mailing-list" service "update-grpsio-service" endpoint result from a HTTP
// "OK" response.
func NewUpdateGrpsioServiceServiceWithReadonlyAttributesOK(body *UpdateGrpsioServiceResponseBody) *mailinglist.ServiceWithReadonlyAttributes {
	v := &mailinglist.ServiceWithReadonlyAttributes{
		UID:             body.UID,
		Type:            *body.Type,
		Domain:          body.Domain,
		GroupID:         body.GroupID,
		Status:          body.Status,
		Prefix:          body.Prefix,
		ProjectSlug:     body.ProjectSlug,
		ProjectUID:      *body.ProjectUID,
		URL:             body.URL,
		GroupName:       body.GroupName,
		ProjectName:     body.ProjectName,
		CreatedAt:       body.CreatedAt,
		UpdatedAt:       body.UpdatedAt,
		LastReviewedAt:  body.LastReviewedAt,
		LastReviewedBy:  body.LastReviewedBy,
		LastAuditedBy:   body.LastAuditedBy,
		LastAuditedTime: body.LastAuditedTime,
	}
	if body.Public != nil {
		v.Public = *body.Public
	}
	if body.GlobalOwners != nil {
		v.GlobalOwners = make([]string, len(body.GlobalOwners))
		for i, val := range body.GlobalOwners {
			v.GlobalOwners[i] = val
		}
	}
	if body.Public == nil {
		v.Public = false
	}
	if body.Writers != nil {
		v.Writers = make([]string, len(body.Writers))
		for i, val := range body.Writers {
			v.Writers[i] = val
		}
	}
	if body.Auditors != nil {
		v.Auditors = make([]string, len(body.Auditors))
		for i, val := range body.Auditors {
			v.Auditors[i] = val
		}
	}

	return v
}

// NewUpdateGrpsioServiceBadRequest builds a mailing-list service
// update-grpsio-service endpoint BadRequest error.
func NewUpdateGrpsioServiceBadRequest(body *UpdateGrpsioServiceBadRequestResponseBody) *mailinglist.BadRequestError {
	v := &mailinglist.BadRequestError{
		Message: *body.Message,
	}

	return v
}

// NewUpdateGrpsioServiceConflict builds a mailing-list service
// update-grpsio-service endpoint Conflict error.
func NewUpdateGrpsioServiceConflict(body *UpdateGrpsioServiceConflictResponseBody) *mailinglist.ConflictError {
	v := &mailinglist.ConflictError{
		Message: *body.Message,
	}

	return v
}

// NewUpdateGrpsioServiceInternalServerError builds a mailing-list service
// update-grpsio-service endpoint InternalServerError error.
func NewUpdateGrpsioServiceInternalServerError(body *UpdateGrpsioServiceInternalServerErrorResponseBody) *mailinglist.InternalServerError {
	v := &mailinglist.InternalServerError{
		Message: *body.Message,
	}

	return v
}

// NewUpdateGrpsioServiceNotFound builds a mailing-list service
// update-grpsio-service endpoint NotFound error.
func NewUpdateGrpsioServiceNotFound(body *UpdateGrpsioServiceNotFoundResponseBody) *mailinglist.NotFoundError {
	v := &mailinglist.NotFoundError{
		Message: *body.Message,
	}

	return v
}

// NewUpdateGrpsioServiceServiceUnavailable builds a mailing-list service
// update-grpsio-service endpoint ServiceUnavailable error.
func NewUpdateGrpsioServiceServiceUnavailable(body *UpdateGrpsioServiceServiceUnavailableResponseBody) *mailinglist.ServiceUnavailableError {
	v := &mailinglist.ServiceUnavailableError{
		Message: *body.Message,
	}

	return v
}

// NewDeleteGrpsioServiceBadRequest builds a mailing-list service
// delete-grpsio-service endpoint BadRequest error.
func NewDeleteGrpsioServiceBadRequest(body *DeleteGrpsioServiceBadRequestResponseBody) *mailinglist.BadRequestError {
	v := &mailinglist.BadRequestError{
		Message: *body.Message,
	}

	return v
}

// NewDeleteGrpsioServiceConflict builds a mailing-list service
// delete-grpsio-service endpoint Conflict error.
func NewDeleteGrpsioServiceConflict(body *DeleteGrpsioServiceConflictResponseBody) *mailinglist.ConflictError {
	v := &mailinglist.ConflictError{
		Message: *body.Message,
	}

	return v
}

// NewDeleteGrpsioServiceInternalServerError builds a mailing-list service
// delete-grpsio-service endpoint InternalServerError error.
func NewDeleteGrpsioServiceInternalServerError(body *DeleteGrpsioServiceInternalServerErrorResponseBody) *mailinglist.InternalServerError {
	v := &mailinglist.InternalServerError{
		Message: *body.Message,
	}

	return v
}

// NewDeleteGrpsioServiceNotFound builds a mailing-list service
// delete-grpsio-service endpoint NotFound error.
func NewDeleteGrpsioServiceNotFound(body *DeleteGrpsioServiceNotFoundResponseBody) *mailinglist.NotFoundError {
	v := &mailinglist.NotFoundError{
		Message: *body.Message,
	}

	return v
}

// NewDeleteGrpsioServiceServiceUnavailable builds a mailing-list service
// delete-grpsio-service endpoint ServiceUnavailable error.
func NewDeleteGrpsioServiceServiceUnavailable(body *DeleteGrpsioServiceServiceUnavailableResponseBody) *mailinglist.ServiceUnavailableError {
	v := &mailinglist.ServiceUnavailableError{
		Message: *body.Message,
	}

	return v
}

// NewCreateGrpsioMailingListMailingListFullCreated builds a "mailing-list"
// service "create-grpsio-mailing-list" endpoint result from a HTTP "Created"
// response.
func NewCreateGrpsioMailingListMailingListFullCreated(body *CreateGrpsioMailingListResponseBody) *mailinglist.MailingListFull {
	v := &mailinglist.MailingListFull{
		UID:            body.UID,
		GroupName:      body.GroupName,
		Type:           body.Type,
		CommitteeUID:   body.CommitteeUID,
		Description:    body.Description,
		Title:          body.Title,
		SubjectTag:     body.SubjectTag,
		ServiceUID:     body.ServiceUID,
		ProjectUID:     body.ProjectUID,
		ProjectName:    body.ProjectName,
		ProjectSlug:    body.ProjectSlug,
		CreatedAt:      body.CreatedAt,
		UpdatedAt:      body.UpdatedAt,
		LastReviewedAt: body.LastReviewedAt,
		LastReviewedBy: body.LastReviewedBy,
	}
	if body.Public != nil {
		v.Public = *body.Public
	}
	if body.Public == nil {
		v.Public = false
	}
	if body.CommitteeFilters != nil {
		v.CommitteeFilters = make([]string, len(body.CommitteeFilters))
		for i, val := range body.CommitteeFilters {
			v.CommitteeFilters[i] = val
		}
	}
	if body.Writers != nil {
		v.Writers = make([]string, len(body.Writers))
		for i, val := range body.Writers {
			v.Writers[i] = val
		}
	}
	if body.Auditors != nil {
		v.Auditors = make([]string, len(body.Auditors))
		for i, val := range body.Auditors {
			v.Auditors[i] = val
		}
	}

	return v
}

// NewCreateGrpsioMailingListBadRequest builds a mailing-list service
// create-grpsio-mailing-list endpoint BadRequest error.
func NewCreateGrpsioMailingListBadRequest(body *CreateGrpsioMailingListBadRequestResponseBody) *mailinglist.BadRequestError {
	v := &mailinglist.BadRequestError{
		Message: *body.Message,
	}

	return v
}

// NewCreateGrpsioMailingListConflict builds a mailing-list service
// create-grpsio-mailing-list endpoint Conflict error.
func NewCreateGrpsioMailingListConflict(body *CreateGrpsioMailingListConflictResponseBody) *mailinglist.ConflictError {
	v := &mailinglist.ConflictError{
		Message: *body.Message,
	}

	return v
}

// NewCreateGrpsioMailingListInternalServerError builds a mailing-list service
// create-grpsio-mailing-list endpoint InternalServerError error.
func NewCreateGrpsioMailingListInternalServerError(body *CreateGrpsioMailingListInternalServerErrorResponseBody) *mailinglist.InternalServerError {
	v := &mailinglist.InternalServerError{
		Message: *body.Message,
	}

	return v
}

// NewCreateGrpsioMailingListNotFound builds a mailing-list service
// create-grpsio-mailing-list endpoint NotFound error.
func NewCreateGrpsioMailingListNotFound(body *CreateGrpsioMailingListNotFoundResponseBody) *mailinglist.NotFoundError {
	v := &mailinglist.NotFoundError{
		Message: *body.Message,
	}

	return v
}

// NewCreateGrpsioMailingListServiceUnavailable builds a mailing-list service
// create-grpsio-mailing-list endpoint ServiceUnavailable error.
func NewCreateGrpsioMailingListServiceUnavailable(body *CreateGrpsioMailingListServiceUnavailableResponseBody) *mailinglist.ServiceUnavailableError {
	v := &mailinglist.ServiceUnavailableError{
		Message: *body.Message,
	}

	return v
}

// ValidateCreateGrpsioServiceResponseBody runs the validations defined on
// Create-Grpsio-ServiceResponseBody
func ValidateCreateGrpsioServiceResponseBody(body *CreateGrpsioServiceResponseBody) (err error) {
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.ProjectUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("project_uid", "body"))
	}
	if body.UID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.uid", *body.UID, goa.FormatUUID))
	}
	if body.Type != nil {
		if !(*body.Type == "primary" || *body.Type == "formation" || *body.Type == "shared") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", *body.Type, []any{"primary", "formation", "shared"}))
		}
	}
	for _, e := range body.GlobalOwners {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.global_owners[*]", e, goa.FormatEmail))
	}
	if body.ProjectSlug != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.project_slug", *body.ProjectSlug, goa.FormatRegexp))
	}
	if body.ProjectSlug != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.project_slug", *body.ProjectSlug, "^[a-z][a-z0-9_\\-]*[a-z0-9]$"))
	}
	if body.ProjectUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.project_uid", *body.ProjectUID, goa.FormatUUID))
	}
	if body.URL != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.url", *body.URL, goa.FormatURI))
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	if body.LastReviewedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.last_reviewed_at", *body.LastReviewedAt, goa.FormatDateTime))
	}
	if body.LastAuditedTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.last_audited_time", *body.LastAuditedTime, goa.FormatDateTime))
	}
	return
}

// ValidateGetGrpsioServiceResponseBody runs the validations defined on
// Get-Grpsio-ServiceResponseBody
func ValidateGetGrpsioServiceResponseBody(body *GetGrpsioServiceResponseBody) (err error) {
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.ProjectUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("project_uid", "body"))
	}
	if body.UID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.uid", *body.UID, goa.FormatUUID))
	}
	if body.Type != nil {
		if !(*body.Type == "primary" || *body.Type == "formation" || *body.Type == "shared") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", *body.Type, []any{"primary", "formation", "shared"}))
		}
	}
	for _, e := range body.GlobalOwners {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.global_owners[*]", e, goa.FormatEmail))
	}
	if body.ProjectSlug != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.project_slug", *body.ProjectSlug, goa.FormatRegexp))
	}
	if body.ProjectSlug != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.project_slug", *body.ProjectSlug, "^[a-z][a-z0-9_\\-]*[a-z0-9]$"))
	}
	if body.ProjectUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.project_uid", *body.ProjectUID, goa.FormatUUID))
	}
	if body.URL != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.url", *body.URL, goa.FormatURI))
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	if body.LastReviewedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.last_reviewed_at", *body.LastReviewedAt, goa.FormatDateTime))
	}
	if body.LastAuditedTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.last_audited_time", *body.LastAuditedTime, goa.FormatDateTime))
	}
	return
}

// ValidateUpdateGrpsioServiceResponseBody runs the validations defined on
// Update-Grpsio-ServiceResponseBody
func ValidateUpdateGrpsioServiceResponseBody(body *UpdateGrpsioServiceResponseBody) (err error) {
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.ProjectUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("project_uid", "body"))
	}
	if body.UID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.uid", *body.UID, goa.FormatUUID))
	}
	if body.Type != nil {
		if !(*body.Type == "primary" || *body.Type == "formation" || *body.Type == "shared") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", *body.Type, []any{"primary", "formation", "shared"}))
		}
	}
	for _, e := range body.GlobalOwners {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.global_owners[*]", e, goa.FormatEmail))
	}
	if body.ProjectSlug != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.project_slug", *body.ProjectSlug, goa.FormatRegexp))
	}
	if body.ProjectSlug != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.project_slug", *body.ProjectSlug, "^[a-z][a-z0-9_\\-]*[a-z0-9]$"))
	}
	if body.ProjectUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.project_uid", *body.ProjectUID, goa.FormatUUID))
	}
	if body.URL != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.url", *body.URL, goa.FormatURI))
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	if body.LastReviewedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.last_reviewed_at", *body.LastReviewedAt, goa.FormatDateTime))
	}
	if body.LastAuditedTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.last_audited_time", *body.LastAuditedTime, goa.FormatDateTime))
	}
	return
}

// ValidateCreateGrpsioMailingListResponseBody runs the validations defined on
// Create-Grpsio-Mailing-ListResponseBody
func ValidateCreateGrpsioMailingListResponseBody(body *CreateGrpsioMailingListResponseBody) (err error) {
	if body.UID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.uid", *body.UID, goa.FormatUUID))
	}
	if body.GroupName != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.group_name", *body.GroupName, "^[a-z][a-z0-9-]*[a-z0-9]$"))
	}
	if body.Type != nil {
		if !(*body.Type == "announcement" || *body.Type == "discussion_moderated" || *body.Type == "discussion_open") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", *body.Type, []any{"announcement", "discussion_moderated", "discussion_open"}))
		}
	}
	if body.CommitteeUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.committee_uid", *body.CommitteeUID, goa.FormatUUID))
	}
	for _, e := range body.CommitteeFilters {
		if !(e == "Voting Rep" || e == "Alternate Voting Rep" || e == "Observer" || e == "Emeritus" || e == "None") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.committee_filters[*]", e, []any{"Voting Rep", "Alternate Voting Rep", "Observer", "Emeritus", "None"}))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) < 11 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 11, true))
		}
	}
	if body.ServiceUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.service_uid", *body.ServiceUID, goa.FormatUUID))
	}
	if body.ProjectUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.project_uid", *body.ProjectUID, goa.FormatUUID))
	}
	if body.ProjectSlug != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.project_slug", *body.ProjectSlug, goa.FormatRegexp))
	}
	if body.ProjectSlug != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.project_slug", *body.ProjectSlug, "^[a-z][a-z0-9_\\-]*[a-z0-9]$"))
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	if body.LastReviewedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.last_reviewed_at", *body.LastReviewedAt, goa.FormatDateTime))
	}
	return
}

// ValidateReadyzServiceUnavailableResponseBody runs the validations defined on
// readyz_ServiceUnavailable_response_body
func ValidateReadyzServiceUnavailableResponseBody(body *ReadyzServiceUnavailableResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateGrpsioServiceBadRequestResponseBody runs the validations
// defined on create-grpsio-service_BadRequest_response_body
func ValidateCreateGrpsioServiceBadRequestResponseBody(body *CreateGrpsioServiceBadRequestResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateGrpsioServiceConflictResponseBody runs the validations defined
// on create-grpsio-service_Conflict_response_body
func ValidateCreateGrpsioServiceConflictResponseBody(body *CreateGrpsioServiceConflictResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateGrpsioServiceInternalServerErrorResponseBody runs the
// validations defined on
// create-grpsio-service_InternalServerError_response_body
func ValidateCreateGrpsioServiceInternalServerErrorResponseBody(body *CreateGrpsioServiceInternalServerErrorResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateGrpsioServiceNotFoundResponseBody runs the validations defined
// on create-grpsio-service_NotFound_response_body
func ValidateCreateGrpsioServiceNotFoundResponseBody(body *CreateGrpsioServiceNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateGrpsioServiceServiceUnavailableResponseBody runs the
// validations defined on create-grpsio-service_ServiceUnavailable_response_body
func ValidateCreateGrpsioServiceServiceUnavailableResponseBody(body *CreateGrpsioServiceServiceUnavailableResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetGrpsioServiceBadRequestResponseBody runs the validations defined
// on get-grpsio-service_BadRequest_response_body
func ValidateGetGrpsioServiceBadRequestResponseBody(body *GetGrpsioServiceBadRequestResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetGrpsioServiceInternalServerErrorResponseBody runs the validations
// defined on get-grpsio-service_InternalServerError_response_body
func ValidateGetGrpsioServiceInternalServerErrorResponseBody(body *GetGrpsioServiceInternalServerErrorResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetGrpsioServiceNotFoundResponseBody runs the validations defined on
// get-grpsio-service_NotFound_response_body
func ValidateGetGrpsioServiceNotFoundResponseBody(body *GetGrpsioServiceNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetGrpsioServiceServiceUnavailableResponseBody runs the validations
// defined on get-grpsio-service_ServiceUnavailable_response_body
func ValidateGetGrpsioServiceServiceUnavailableResponseBody(body *GetGrpsioServiceServiceUnavailableResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateGrpsioServiceBadRequestResponseBody runs the validations
// defined on update-grpsio-service_BadRequest_response_body
func ValidateUpdateGrpsioServiceBadRequestResponseBody(body *UpdateGrpsioServiceBadRequestResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateGrpsioServiceConflictResponseBody runs the validations defined
// on update-grpsio-service_Conflict_response_body
func ValidateUpdateGrpsioServiceConflictResponseBody(body *UpdateGrpsioServiceConflictResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateGrpsioServiceInternalServerErrorResponseBody runs the
// validations defined on
// update-grpsio-service_InternalServerError_response_body
func ValidateUpdateGrpsioServiceInternalServerErrorResponseBody(body *UpdateGrpsioServiceInternalServerErrorResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateGrpsioServiceNotFoundResponseBody runs the validations defined
// on update-grpsio-service_NotFound_response_body
func ValidateUpdateGrpsioServiceNotFoundResponseBody(body *UpdateGrpsioServiceNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateGrpsioServiceServiceUnavailableResponseBody runs the
// validations defined on update-grpsio-service_ServiceUnavailable_response_body
func ValidateUpdateGrpsioServiceServiceUnavailableResponseBody(body *UpdateGrpsioServiceServiceUnavailableResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteGrpsioServiceBadRequestResponseBody runs the validations
// defined on delete-grpsio-service_BadRequest_response_body
func ValidateDeleteGrpsioServiceBadRequestResponseBody(body *DeleteGrpsioServiceBadRequestResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteGrpsioServiceConflictResponseBody runs the validations defined
// on delete-grpsio-service_Conflict_response_body
func ValidateDeleteGrpsioServiceConflictResponseBody(body *DeleteGrpsioServiceConflictResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteGrpsioServiceInternalServerErrorResponseBody runs the
// validations defined on
// delete-grpsio-service_InternalServerError_response_body
func ValidateDeleteGrpsioServiceInternalServerErrorResponseBody(body *DeleteGrpsioServiceInternalServerErrorResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteGrpsioServiceNotFoundResponseBody runs the validations defined
// on delete-grpsio-service_NotFound_response_body
func ValidateDeleteGrpsioServiceNotFoundResponseBody(body *DeleteGrpsioServiceNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteGrpsioServiceServiceUnavailableResponseBody runs the
// validations defined on delete-grpsio-service_ServiceUnavailable_response_body
func ValidateDeleteGrpsioServiceServiceUnavailableResponseBody(body *DeleteGrpsioServiceServiceUnavailableResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateGrpsioMailingListBadRequestResponseBody runs the validations
// defined on create-grpsio-mailing-list_BadRequest_response_body
func ValidateCreateGrpsioMailingListBadRequestResponseBody(body *CreateGrpsioMailingListBadRequestResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateGrpsioMailingListConflictResponseBody runs the validations
// defined on create-grpsio-mailing-list_Conflict_response_body
func ValidateCreateGrpsioMailingListConflictResponseBody(body *CreateGrpsioMailingListConflictResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateGrpsioMailingListInternalServerErrorResponseBody runs the
// validations defined on
// create-grpsio-mailing-list_InternalServerError_response_body
func ValidateCreateGrpsioMailingListInternalServerErrorResponseBody(body *CreateGrpsioMailingListInternalServerErrorResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateGrpsioMailingListNotFoundResponseBody runs the validations
// defined on create-grpsio-mailing-list_NotFound_response_body
func ValidateCreateGrpsioMailingListNotFoundResponseBody(body *CreateGrpsioMailingListNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateGrpsioMailingListServiceUnavailableResponseBody runs the
// validations defined on
// create-grpsio-mailing-list_ServiceUnavailable_response_body
func ValidateCreateGrpsioMailingListServiceUnavailableResponseBody(body *CreateGrpsioMailingListServiceUnavailableResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateServiceWithReadonlyAttributesResponseBody runs the validations
// defined on service-with-readonly-attributesResponseBody
func ValidateServiceWithReadonlyAttributesResponseBody(body *ServiceWithReadonlyAttributesResponseBody) (err error) {
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.ProjectUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("project_uid", "body"))
	}
	if body.UID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.uid", *body.UID, goa.FormatUUID))
	}
	if body.Type != nil {
		if !(*body.Type == "primary" || *body.Type == "formation" || *body.Type == "shared") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", *body.Type, []any{"primary", "formation", "shared"}))
		}
	}
	for _, e := range body.GlobalOwners {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.global_owners[*]", e, goa.FormatEmail))
	}
	if body.ProjectSlug != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.project_slug", *body.ProjectSlug, goa.FormatRegexp))
	}
	if body.ProjectSlug != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.project_slug", *body.ProjectSlug, "^[a-z][a-z0-9_\\-]*[a-z0-9]$"))
	}
	if body.ProjectUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.project_uid", *body.ProjectUID, goa.FormatUUID))
	}
	if body.URL != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.url", *body.URL, goa.FormatURI))
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	if body.LastReviewedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.last_reviewed_at", *body.LastReviewedAt, goa.FormatDateTime))
	}
	if body.LastAuditedTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.last_audited_time", *body.LastAuditedTime, goa.FormatDateTime))
	}
	return
}
