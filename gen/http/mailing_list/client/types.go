// Code generated by goa v3.21.5, DO NOT EDIT.
//
// mailing-list HTTP client types
//
// Command:
// $ goa gen
// github.com/linuxfoundation/lfx-v2-mailing-list-service/cmd/mailing-list-api/design

package client

import (
	"unicode/utf8"

	mailinglist "github.com/linuxfoundation/lfx-v2-mailing-list-service/gen/mailing_list"
	goa "goa.design/goa/v3/pkg"
)

// CreateGrpsioServiceRequestBody is the type of the "mailing-list" service
// "create-grpsio-service" endpoint HTTP request body.
type CreateGrpsioServiceRequestBody struct {
	// Service type
	Type string `form:"type" json:"type" xml:"type"`
	// Service domain
	Domain *string `form:"domain,omitempty" json:"domain,omitempty" xml:"domain,omitempty"`
	// GroupsIO group ID
	GroupID *int64 `form:"group_id,omitempty" json:"group_id,omitempty" xml:"group_id,omitempty"`
	// Service status
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// List of global owner email addresses (required for primary, forbidden for
	// shared)
	GlobalOwners []string `form:"global_owners,omitempty" json:"global_owners,omitempty" xml:"global_owners,omitempty"`
	// Email prefix (required for formation and shared, forbidden for primary)
	Prefix *string `form:"prefix,omitempty" json:"prefix,omitempty" xml:"prefix,omitempty"`
	// Project slug identifier
	ProjectSlug *string `form:"project_slug,omitempty" json:"project_slug,omitempty" xml:"project_slug,omitempty"`
	// LFXv2 Project UID
	ProjectUID string `form:"project_uid" json:"project_uid" xml:"project_uid"`
	// Service URL
	URL *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
	// GroupsIO group name
	GroupName *string `form:"group_name,omitempty" json:"group_name,omitempty" xml:"group_name,omitempty"`
	// Whether the service is publicly accessible
	Public bool `form:"public" json:"public" xml:"public"`
	// Manager user IDs who can edit/modify this service
	Writers []string `form:"writers,omitempty" json:"writers,omitempty" xml:"writers,omitempty"`
	// Auditor user IDs who can audit this service
	Auditors []string `form:"auditors,omitempty" json:"auditors,omitempty" xml:"auditors,omitempty"`
}

// UpdateGrpsioServiceRequestBody is the type of the "mailing-list" service
// "update-grpsio-service" endpoint HTTP request body.
type UpdateGrpsioServiceRequestBody struct {
	// Service type
	Type string `form:"type" json:"type" xml:"type"`
	// Service domain
	Domain *string `form:"domain,omitempty" json:"domain,omitempty" xml:"domain,omitempty"`
	// GroupsIO group ID
	GroupID *int64 `form:"group_id,omitempty" json:"group_id,omitempty" xml:"group_id,omitempty"`
	// Service status
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// List of global owner email addresses (required for primary, forbidden for
	// shared)
	GlobalOwners []string `form:"global_owners,omitempty" json:"global_owners,omitempty" xml:"global_owners,omitempty"`
	// Email prefix (required for formation and shared, forbidden for primary)
	Prefix *string `form:"prefix,omitempty" json:"prefix,omitempty" xml:"prefix,omitempty"`
	// Project slug identifier
	ProjectSlug *string `form:"project_slug,omitempty" json:"project_slug,omitempty" xml:"project_slug,omitempty"`
	// LFXv2 Project UID
	ProjectUID string `form:"project_uid" json:"project_uid" xml:"project_uid"`
	// Service URL
	URL *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
	// GroupsIO group name
	GroupName *string `form:"group_name,omitempty" json:"group_name,omitempty" xml:"group_name,omitempty"`
	// Whether the service is publicly accessible
	Public bool `form:"public" json:"public" xml:"public"`
	// Manager user IDs who can edit/modify this service
	Writers []string `form:"writers,omitempty" json:"writers,omitempty" xml:"writers,omitempty"`
	// Auditor user IDs who can audit this service
	Auditors []string `form:"auditors,omitempty" json:"auditors,omitempty" xml:"auditors,omitempty"`
}

// CreateGrpsioMailingListRequestBody is the type of the "mailing-list" service
// "create-grpsio-mailing-list" endpoint HTTP request body.
type CreateGrpsioMailingListRequestBody struct {
	// Mailing list group name
	GroupName string `form:"group_name" json:"group_name" xml:"group_name"`
	// Whether the mailing list is publicly accessible
	Public bool `form:"public" json:"public" xml:"public"`
	// Mailing list type
	Type string `form:"type" json:"type" xml:"type"`
	// Committee UUID for committee-based mailing lists
	CommitteeUID *string `form:"committee_uid,omitempty" json:"committee_uid,omitempty" xml:"committee_uid,omitempty"`
	// Committee member filters
	CommitteeFilters []string `form:"committee_filters,omitempty" json:"committee_filters,omitempty" xml:"committee_filters,omitempty"`
	// Mailing list description (11-500 characters)
	Description string `form:"description" json:"description" xml:"description"`
	// Mailing list title
	Title string `form:"title" json:"title" xml:"title"`
	// Subject tag prefix
	SubjectTag *string `form:"subject_tag,omitempty" json:"subject_tag,omitempty" xml:"subject_tag,omitempty"`
	// Service UUID
	ServiceUID string `form:"service_uid" json:"service_uid" xml:"service_uid"`
	// Manager user IDs who can edit/modify this service
	Writers []string `form:"writers,omitempty" json:"writers,omitempty" xml:"writers,omitempty"`
	// Auditor user IDs who can audit this service
	Auditors []string `form:"auditors,omitempty" json:"auditors,omitempty" xml:"auditors,omitempty"`
}

// UpdateGrpsioMailingListRequestBody is the type of the "mailing-list" service
// "update-grpsio-mailing-list" endpoint HTTP request body.
type UpdateGrpsioMailingListRequestBody struct {
	// Mailing list group name
	GroupName string `form:"group_name" json:"group_name" xml:"group_name"`
	// Whether the mailing list is publicly accessible
	Public bool `form:"public" json:"public" xml:"public"`
	// Mailing list type
	Type string `form:"type" json:"type" xml:"type"`
	// Committee UUID for committee-based mailing lists
	CommitteeUID *string `form:"committee_uid,omitempty" json:"committee_uid,omitempty" xml:"committee_uid,omitempty"`
	// Committee member filters
	CommitteeFilters []string `form:"committee_filters,omitempty" json:"committee_filters,omitempty" xml:"committee_filters,omitempty"`
	// Mailing list description (11-500 characters)
	Description string `form:"description" json:"description" xml:"description"`
	// Mailing list title
	Title string `form:"title" json:"title" xml:"title"`
	// Subject tag prefix
	SubjectTag *string `form:"subject_tag,omitempty" json:"subject_tag,omitempty" xml:"subject_tag,omitempty"`
	// Service UUID
	ServiceUID string `form:"service_uid" json:"service_uid" xml:"service_uid"`
	// Manager user IDs who can edit/modify this service
	Writers []string `form:"writers,omitempty" json:"writers,omitempty" xml:"writers,omitempty"`
	// Auditor user IDs who can audit this service
	Auditors []string `form:"auditors,omitempty" json:"auditors,omitempty" xml:"auditors,omitempty"`
}

// CreateGrpsioMailingListMemberRequestBody is the type of the "mailing-list"
// service "create-grpsio-mailing-list-member" endpoint HTTP request body.
type CreateGrpsioMailingListMemberRequestBody struct {
	// Member username
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Member first name
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	// Member last name
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	// Member email address
	Email string `form:"email" json:"email" xml:"email"`
	// Member organization
	Organization *string `form:"organization,omitempty" json:"organization,omitempty" xml:"organization,omitempty"`
	// Member job title
	JobTitle *string `form:"job_title,omitempty" json:"job_title,omitempty" xml:"job_title,omitempty"`
	// Member type
	MemberType string `form:"member_type" json:"member_type" xml:"member_type"`
	// Email delivery mode
	DeliveryMode string `form:"delivery_mode" json:"delivery_mode" xml:"delivery_mode"`
	// Moderation status
	ModStatus string `form:"mod_status" json:"mod_status" xml:"mod_status"`
	// Last reviewed timestamp
	LastReviewedAt *string `form:"last_reviewed_at,omitempty" json:"last_reviewed_at,omitempty" xml:"last_reviewed_at,omitempty"`
	// Last reviewed by user ID
	LastReviewedBy *string `form:"last_reviewed_by,omitempty" json:"last_reviewed_by,omitempty" xml:"last_reviewed_by,omitempty"`
}

// UpdateGrpsioMailingListMemberRequestBody is the type of the "mailing-list"
// service "update-grpsio-mailing-list-member" endpoint HTTP request body.
type UpdateGrpsioMailingListMemberRequestBody struct {
	// Member username
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Member first name
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	// Member last name
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	// Member organization
	Organization *string `form:"organization,omitempty" json:"organization,omitempty" xml:"organization,omitempty"`
	// Member job title
	JobTitle *string `form:"job_title,omitempty" json:"job_title,omitempty" xml:"job_title,omitempty"`
	// Email delivery mode
	DeliveryMode string `form:"delivery_mode" json:"delivery_mode" xml:"delivery_mode"`
	// Moderation status
	ModStatus string `form:"mod_status" json:"mod_status" xml:"mod_status"`
}

// GroupsioWebhookRequestBody is the type of the "mailing-list" service
// "groupsio-webhook" endpoint HTTP request body.
type GroupsioWebhookRequestBody struct {
	// Raw webhook event body
	Body []byte `form:"body" json:"body" xml:"body"`
}

// CreateGrpsioServiceResponseBody is the type of the "mailing-list" service
// "create-grpsio-service" endpoint HTTP response body.
type CreateGrpsioServiceResponseBody struct {
	// Service UID -- unique identifier for the service
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// Service type
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// Service domain
	Domain *string `form:"domain,omitempty" json:"domain,omitempty" xml:"domain,omitempty"`
	// GroupsIO group ID
	GroupID *int64 `form:"group_id,omitempty" json:"group_id,omitempty" xml:"group_id,omitempty"`
	// Service status
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// List of global owner email addresses (required for primary, forbidden for
	// shared)
	GlobalOwners []string `form:"global_owners,omitempty" json:"global_owners,omitempty" xml:"global_owners,omitempty"`
	// Email prefix (required for formation and shared, forbidden for primary)
	Prefix *string `form:"prefix,omitempty" json:"prefix,omitempty" xml:"prefix,omitempty"`
	// Project slug identifier
	ProjectSlug *string `form:"project_slug,omitempty" json:"project_slug,omitempty" xml:"project_slug,omitempty"`
	// LFXv2 Project UID
	ProjectUID *string `form:"project_uid,omitempty" json:"project_uid,omitempty" xml:"project_uid,omitempty"`
	// Service URL
	URL *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
	// GroupsIO group name
	GroupName *string `form:"group_name,omitempty" json:"group_name,omitempty" xml:"group_name,omitempty"`
	// Whether the service is publicly accessible
	Public *bool `form:"public,omitempty" json:"public,omitempty" xml:"public,omitempty"`
	// Project name (read-only)
	ProjectName *string `form:"project_name,omitempty" json:"project_name,omitempty" xml:"project_name,omitempty"`
	// The timestamp when the service was created (read-only)
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The timestamp when the service was last updated (read-only)
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// The timestamp when the service was last reviewed in RFC3339 format
	LastReviewedAt *string `form:"last_reviewed_at,omitempty" json:"last_reviewed_at,omitempty" xml:"last_reviewed_at,omitempty"`
	// The user ID who last reviewed this service
	LastReviewedBy *string `form:"last_reviewed_by,omitempty" json:"last_reviewed_by,omitempty" xml:"last_reviewed_by,omitempty"`
	// The user ID who last audited the service
	LastAuditedBy *string `form:"last_audited_by,omitempty" json:"last_audited_by,omitempty" xml:"last_audited_by,omitempty"`
	// The timestamp when the service was last audited
	LastAuditedTime *string `form:"last_audited_time,omitempty" json:"last_audited_time,omitempty" xml:"last_audited_time,omitempty"`
	// Manager user IDs who can edit/modify this service
	Writers []string `form:"writers,omitempty" json:"writers,omitempty" xml:"writers,omitempty"`
	// Auditor user IDs who can audit this service
	Auditors []string `form:"auditors,omitempty" json:"auditors,omitempty" xml:"auditors,omitempty"`
}

// GetGrpsioServiceResponseBody is the type of the "mailing-list" service
// "get-grpsio-service" endpoint HTTP response body.
type GetGrpsioServiceResponseBody GrpsIoServiceWithReadonlyAttributesResponseBody

// UpdateGrpsioServiceResponseBody is the type of the "mailing-list" service
// "update-grpsio-service" endpoint HTTP response body.
type UpdateGrpsioServiceResponseBody struct {
	// Service UID -- unique identifier for the service
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// Service type
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// Service domain
	Domain *string `form:"domain,omitempty" json:"domain,omitempty" xml:"domain,omitempty"`
	// GroupsIO group ID
	GroupID *int64 `form:"group_id,omitempty" json:"group_id,omitempty" xml:"group_id,omitempty"`
	// Service status
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// List of global owner email addresses (required for primary, forbidden for
	// shared)
	GlobalOwners []string `form:"global_owners,omitempty" json:"global_owners,omitempty" xml:"global_owners,omitempty"`
	// Email prefix (required for formation and shared, forbidden for primary)
	Prefix *string `form:"prefix,omitempty" json:"prefix,omitempty" xml:"prefix,omitempty"`
	// Project slug identifier
	ProjectSlug *string `form:"project_slug,omitempty" json:"project_slug,omitempty" xml:"project_slug,omitempty"`
	// LFXv2 Project UID
	ProjectUID *string `form:"project_uid,omitempty" json:"project_uid,omitempty" xml:"project_uid,omitempty"`
	// Service URL
	URL *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
	// GroupsIO group name
	GroupName *string `form:"group_name,omitempty" json:"group_name,omitempty" xml:"group_name,omitempty"`
	// Whether the service is publicly accessible
	Public *bool `form:"public,omitempty" json:"public,omitempty" xml:"public,omitempty"`
	// Project name (read-only)
	ProjectName *string `form:"project_name,omitempty" json:"project_name,omitempty" xml:"project_name,omitempty"`
	// The timestamp when the service was created (read-only)
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The timestamp when the service was last updated (read-only)
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// The timestamp when the service was last reviewed in RFC3339 format
	LastReviewedAt *string `form:"last_reviewed_at,omitempty" json:"last_reviewed_at,omitempty" xml:"last_reviewed_at,omitempty"`
	// The user ID who last reviewed this service
	LastReviewedBy *string `form:"last_reviewed_by,omitempty" json:"last_reviewed_by,omitempty" xml:"last_reviewed_by,omitempty"`
	// The user ID who last audited the service
	LastAuditedBy *string `form:"last_audited_by,omitempty" json:"last_audited_by,omitempty" xml:"last_audited_by,omitempty"`
	// The timestamp when the service was last audited
	LastAuditedTime *string `form:"last_audited_time,omitempty" json:"last_audited_time,omitempty" xml:"last_audited_time,omitempty"`
	// Manager user IDs who can edit/modify this service
	Writers []string `form:"writers,omitempty" json:"writers,omitempty" xml:"writers,omitempty"`
	// Auditor user IDs who can audit this service
	Auditors []string `form:"auditors,omitempty" json:"auditors,omitempty" xml:"auditors,omitempty"`
}

// CreateGrpsioMailingListResponseBody is the type of the "mailing-list"
// service "create-grpsio-mailing-list" endpoint HTTP response body.
type CreateGrpsioMailingListResponseBody struct {
	// Mailing list UID -- unique identifier for the mailing list
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// Mailing list group name
	GroupName *string `form:"group_name,omitempty" json:"group_name,omitempty" xml:"group_name,omitempty"`
	// Whether the mailing list is publicly accessible
	Public *bool `form:"public,omitempty" json:"public,omitempty" xml:"public,omitempty"`
	// Mailing list type
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// Committee UUID for committee-based mailing lists
	CommitteeUID *string `form:"committee_uid,omitempty" json:"committee_uid,omitempty" xml:"committee_uid,omitempty"`
	// Committee member filters
	CommitteeFilters []string `form:"committee_filters,omitempty" json:"committee_filters,omitempty" xml:"committee_filters,omitempty"`
	// Mailing list description (11-500 characters)
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Mailing list title
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Subject tag prefix
	SubjectTag *string `form:"subject_tag,omitempty" json:"subject_tag,omitempty" xml:"subject_tag,omitempty"`
	// Service UUID
	ServiceUID *string `form:"service_uid,omitempty" json:"service_uid,omitempty" xml:"service_uid,omitempty"`
	// LFXv2 Project UID (inherited from parent service)
	ProjectUID *string `form:"project_uid,omitempty" json:"project_uid,omitempty" xml:"project_uid,omitempty"`
	// Project name (read-only)
	ProjectName *string `form:"project_name,omitempty" json:"project_name,omitempty" xml:"project_name,omitempty"`
	// Project slug identifier (read-only)
	ProjectSlug *string `form:"project_slug,omitempty" json:"project_slug,omitempty" xml:"project_slug,omitempty"`
	// The timestamp when the service was created (read-only)
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The timestamp when the service was last updated (read-only)
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// The timestamp when the service was last reviewed in RFC3339 format
	LastReviewedAt *string `form:"last_reviewed_at,omitempty" json:"last_reviewed_at,omitempty" xml:"last_reviewed_at,omitempty"`
	// The user ID who last reviewed this service
	LastReviewedBy *string `form:"last_reviewed_by,omitempty" json:"last_reviewed_by,omitempty" xml:"last_reviewed_by,omitempty"`
	// Manager user IDs who can edit/modify this service
	Writers []string `form:"writers,omitempty" json:"writers,omitempty" xml:"writers,omitempty"`
	// Auditor user IDs who can audit this service
	Auditors []string `form:"auditors,omitempty" json:"auditors,omitempty" xml:"auditors,omitempty"`
}

// GetGrpsioMailingListResponseBody is the type of the "mailing-list" service
// "get-grpsio-mailing-list" endpoint HTTP response body.
type GetGrpsioMailingListResponseBody GrpsIoMailingListWithReadonlyAttributesResponseBody

// UpdateGrpsioMailingListResponseBody is the type of the "mailing-list"
// service "update-grpsio-mailing-list" endpoint HTTP response body.
type UpdateGrpsioMailingListResponseBody struct {
	// Mailing list UID -- unique identifier for the mailing list
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// Mailing list group name
	GroupName *string `form:"group_name,omitempty" json:"group_name,omitempty" xml:"group_name,omitempty"`
	// Whether the mailing list is publicly accessible
	Public *bool `form:"public,omitempty" json:"public,omitempty" xml:"public,omitempty"`
	// Mailing list type
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// Committee UUID for committee-based mailing lists
	CommitteeUID *string `form:"committee_uid,omitempty" json:"committee_uid,omitempty" xml:"committee_uid,omitempty"`
	// Committee member filters
	CommitteeFilters []string `form:"committee_filters,omitempty" json:"committee_filters,omitempty" xml:"committee_filters,omitempty"`
	// Mailing list description (11-500 characters)
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Mailing list title
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Subject tag prefix
	SubjectTag *string `form:"subject_tag,omitempty" json:"subject_tag,omitempty" xml:"subject_tag,omitempty"`
	// Service UUID
	ServiceUID *string `form:"service_uid,omitempty" json:"service_uid,omitempty" xml:"service_uid,omitempty"`
	// LFXv2 Project UID (inherited from parent service)
	ProjectUID *string `form:"project_uid,omitempty" json:"project_uid,omitempty" xml:"project_uid,omitempty"`
	// Project name (read-only)
	ProjectName *string `form:"project_name,omitempty" json:"project_name,omitempty" xml:"project_name,omitempty"`
	// Project slug identifier (read-only)
	ProjectSlug *string `form:"project_slug,omitempty" json:"project_slug,omitempty" xml:"project_slug,omitempty"`
	// The timestamp when the service was created (read-only)
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The timestamp when the service was last updated (read-only)
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// Manager user IDs who can edit/modify this service
	Writers []string `form:"writers,omitempty" json:"writers,omitempty" xml:"writers,omitempty"`
	// Auditor user IDs who can audit this service
	Auditors []string `form:"auditors,omitempty" json:"auditors,omitempty" xml:"auditors,omitempty"`
}

// CreateGrpsioMailingListMemberResponseBody is the type of the "mailing-list"
// service "create-grpsio-mailing-list-member" endpoint HTTP response body.
type CreateGrpsioMailingListMemberResponseBody struct {
	// Member UID
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// Mailing list UID
	MailingListUID *string `form:"mailing_list_uid,omitempty" json:"mailing_list_uid,omitempty" xml:"mailing_list_uid,omitempty"`
	// Member username
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Member first name
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	// Member last name
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	// Member email address
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// Member organization
	Organization *string `form:"organization,omitempty" json:"organization,omitempty" xml:"organization,omitempty"`
	// Member job title
	JobTitle *string `form:"job_title,omitempty" json:"job_title,omitempty" xml:"job_title,omitempty"`
	// Member type
	MemberType *string `form:"member_type,omitempty" json:"member_type,omitempty" xml:"member_type,omitempty"`
	// Email delivery mode
	DeliveryMode *string `form:"delivery_mode,omitempty" json:"delivery_mode,omitempty" xml:"delivery_mode,omitempty"`
	// Moderation status
	ModStatus *string `form:"mod_status,omitempty" json:"mod_status,omitempty" xml:"mod_status,omitempty"`
	// Last reviewed timestamp
	LastReviewedAt *string `form:"last_reviewed_at,omitempty" json:"last_reviewed_at,omitempty" xml:"last_reviewed_at,omitempty"`
	// Last reviewed by user ID
	LastReviewedBy *string `form:"last_reviewed_by,omitempty" json:"last_reviewed_by,omitempty" xml:"last_reviewed_by,omitempty"`
	// Member status
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Groups.io member ID
	GroupsioMemberID *int64 `form:"groupsio_member_id,omitempty" json:"groupsio_member_id,omitempty" xml:"groupsio_member_id,omitempty"`
	// Groups.io group ID
	GroupsioGroupID *int64 `form:"groupsio_group_id,omitempty" json:"groupsio_group_id,omitempty" xml:"groupsio_group_id,omitempty"`
	// The timestamp when the service was created (read-only)
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The timestamp when the service was last updated (read-only)
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// Manager user IDs who can edit/modify this service
	Writers []string `form:"writers,omitempty" json:"writers,omitempty" xml:"writers,omitempty"`
	// Auditor user IDs who can audit this service
	Auditors []string `form:"auditors,omitempty" json:"auditors,omitempty" xml:"auditors,omitempty"`
}

// GetGrpsioMailingListMemberResponseBody is the type of the "mailing-list"
// service "get-grpsio-mailing-list-member" endpoint HTTP response body.
type GetGrpsioMailingListMemberResponseBody GrpsIoMemberWithReadonlyAttributesResponseBody

// UpdateGrpsioMailingListMemberResponseBody is the type of the "mailing-list"
// service "update-grpsio-mailing-list-member" endpoint HTTP response body.
type UpdateGrpsioMailingListMemberResponseBody struct {
	// Member UID
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// Mailing list UID
	MailingListUID *string `form:"mailing_list_uid,omitempty" json:"mailing_list_uid,omitempty" xml:"mailing_list_uid,omitempty"`
	// Member username
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Member first name
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	// Member last name
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	// Member email address
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// Member organization
	Organization *string `form:"organization,omitempty" json:"organization,omitempty" xml:"organization,omitempty"`
	// Member job title
	JobTitle *string `form:"job_title,omitempty" json:"job_title,omitempty" xml:"job_title,omitempty"`
	// Member type
	MemberType *string `form:"member_type,omitempty" json:"member_type,omitempty" xml:"member_type,omitempty"`
	// Email delivery mode
	DeliveryMode *string `form:"delivery_mode,omitempty" json:"delivery_mode,omitempty" xml:"delivery_mode,omitempty"`
	// Moderation status
	ModStatus *string `form:"mod_status,omitempty" json:"mod_status,omitempty" xml:"mod_status,omitempty"`
	// Last reviewed timestamp
	LastReviewedAt *string `form:"last_reviewed_at,omitempty" json:"last_reviewed_at,omitempty" xml:"last_reviewed_at,omitempty"`
	// Last reviewed by user ID
	LastReviewedBy *string `form:"last_reviewed_by,omitempty" json:"last_reviewed_by,omitempty" xml:"last_reviewed_by,omitempty"`
	// Member status
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Groups.io member ID
	GroupsioMemberID *int64 `form:"groupsio_member_id,omitempty" json:"groupsio_member_id,omitempty" xml:"groupsio_member_id,omitempty"`
	// Groups.io group ID
	GroupsioGroupID *int64 `form:"groupsio_group_id,omitempty" json:"groupsio_group_id,omitempty" xml:"groupsio_group_id,omitempty"`
	// The timestamp when the service was created (read-only)
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The timestamp when the service was last updated (read-only)
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// Manager user IDs who can edit/modify this service
	Writers []string `form:"writers,omitempty" json:"writers,omitempty" xml:"writers,omitempty"`
	// Auditor user IDs who can audit this service
	Auditors []string `form:"auditors,omitempty" json:"auditors,omitempty" xml:"auditors,omitempty"`
}

// ReadyzServiceUnavailableResponseBody is the type of the "mailing-list"
// service "readyz" endpoint HTTP response body for the "ServiceUnavailable"
// error.
type ReadyzServiceUnavailableResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateGrpsioServiceBadRequestResponseBody is the type of the "mailing-list"
// service "create-grpsio-service" endpoint HTTP response body for the
// "BadRequest" error.
type CreateGrpsioServiceBadRequestResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateGrpsioServiceConflictResponseBody is the type of the "mailing-list"
// service "create-grpsio-service" endpoint HTTP response body for the
// "Conflict" error.
type CreateGrpsioServiceConflictResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateGrpsioServiceInternalServerErrorResponseBody is the type of the
// "mailing-list" service "create-grpsio-service" endpoint HTTP response body
// for the "InternalServerError" error.
type CreateGrpsioServiceInternalServerErrorResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateGrpsioServiceNotFoundResponseBody is the type of the "mailing-list"
// service "create-grpsio-service" endpoint HTTP response body for the
// "NotFound" error.
type CreateGrpsioServiceNotFoundResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateGrpsioServiceServiceUnavailableResponseBody is the type of the
// "mailing-list" service "create-grpsio-service" endpoint HTTP response body
// for the "ServiceUnavailable" error.
type CreateGrpsioServiceServiceUnavailableResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetGrpsioServiceBadRequestResponseBody is the type of the "mailing-list"
// service "get-grpsio-service" endpoint HTTP response body for the
// "BadRequest" error.
type GetGrpsioServiceBadRequestResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetGrpsioServiceInternalServerErrorResponseBody is the type of the
// "mailing-list" service "get-grpsio-service" endpoint HTTP response body for
// the "InternalServerError" error.
type GetGrpsioServiceInternalServerErrorResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetGrpsioServiceNotFoundResponseBody is the type of the "mailing-list"
// service "get-grpsio-service" endpoint HTTP response body for the "NotFound"
// error.
type GetGrpsioServiceNotFoundResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetGrpsioServiceServiceUnavailableResponseBody is the type of the
// "mailing-list" service "get-grpsio-service" endpoint HTTP response body for
// the "ServiceUnavailable" error.
type GetGrpsioServiceServiceUnavailableResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateGrpsioServiceBadRequestResponseBody is the type of the "mailing-list"
// service "update-grpsio-service" endpoint HTTP response body for the
// "BadRequest" error.
type UpdateGrpsioServiceBadRequestResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateGrpsioServiceConflictResponseBody is the type of the "mailing-list"
// service "update-grpsio-service" endpoint HTTP response body for the
// "Conflict" error.
type UpdateGrpsioServiceConflictResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateGrpsioServiceInternalServerErrorResponseBody is the type of the
// "mailing-list" service "update-grpsio-service" endpoint HTTP response body
// for the "InternalServerError" error.
type UpdateGrpsioServiceInternalServerErrorResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateGrpsioServiceNotFoundResponseBody is the type of the "mailing-list"
// service "update-grpsio-service" endpoint HTTP response body for the
// "NotFound" error.
type UpdateGrpsioServiceNotFoundResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateGrpsioServiceServiceUnavailableResponseBody is the type of the
// "mailing-list" service "update-grpsio-service" endpoint HTTP response body
// for the "ServiceUnavailable" error.
type UpdateGrpsioServiceServiceUnavailableResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteGrpsioServiceBadRequestResponseBody is the type of the "mailing-list"
// service "delete-grpsio-service" endpoint HTTP response body for the
// "BadRequest" error.
type DeleteGrpsioServiceBadRequestResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteGrpsioServiceConflictResponseBody is the type of the "mailing-list"
// service "delete-grpsio-service" endpoint HTTP response body for the
// "Conflict" error.
type DeleteGrpsioServiceConflictResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteGrpsioServiceInternalServerErrorResponseBody is the type of the
// "mailing-list" service "delete-grpsio-service" endpoint HTTP response body
// for the "InternalServerError" error.
type DeleteGrpsioServiceInternalServerErrorResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteGrpsioServiceNotFoundResponseBody is the type of the "mailing-list"
// service "delete-grpsio-service" endpoint HTTP response body for the
// "NotFound" error.
type DeleteGrpsioServiceNotFoundResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteGrpsioServiceServiceUnavailableResponseBody is the type of the
// "mailing-list" service "delete-grpsio-service" endpoint HTTP response body
// for the "ServiceUnavailable" error.
type DeleteGrpsioServiceServiceUnavailableResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateGrpsioMailingListBadRequestResponseBody is the type of the
// "mailing-list" service "create-grpsio-mailing-list" endpoint HTTP response
// body for the "BadRequest" error.
type CreateGrpsioMailingListBadRequestResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateGrpsioMailingListConflictResponseBody is the type of the
// "mailing-list" service "create-grpsio-mailing-list" endpoint HTTP response
// body for the "Conflict" error.
type CreateGrpsioMailingListConflictResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateGrpsioMailingListInternalServerErrorResponseBody is the type of the
// "mailing-list" service "create-grpsio-mailing-list" endpoint HTTP response
// body for the "InternalServerError" error.
type CreateGrpsioMailingListInternalServerErrorResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateGrpsioMailingListNotFoundResponseBody is the type of the
// "mailing-list" service "create-grpsio-mailing-list" endpoint HTTP response
// body for the "NotFound" error.
type CreateGrpsioMailingListNotFoundResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateGrpsioMailingListServiceUnavailableResponseBody is the type of the
// "mailing-list" service "create-grpsio-mailing-list" endpoint HTTP response
// body for the "ServiceUnavailable" error.
type CreateGrpsioMailingListServiceUnavailableResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetGrpsioMailingListBadRequestResponseBody is the type of the "mailing-list"
// service "get-grpsio-mailing-list" endpoint HTTP response body for the
// "BadRequest" error.
type GetGrpsioMailingListBadRequestResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetGrpsioMailingListInternalServerErrorResponseBody is the type of the
// "mailing-list" service "get-grpsio-mailing-list" endpoint HTTP response body
// for the "InternalServerError" error.
type GetGrpsioMailingListInternalServerErrorResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetGrpsioMailingListNotFoundResponseBody is the type of the "mailing-list"
// service "get-grpsio-mailing-list" endpoint HTTP response body for the
// "NotFound" error.
type GetGrpsioMailingListNotFoundResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetGrpsioMailingListServiceUnavailableResponseBody is the type of the
// "mailing-list" service "get-grpsio-mailing-list" endpoint HTTP response body
// for the "ServiceUnavailable" error.
type GetGrpsioMailingListServiceUnavailableResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateGrpsioMailingListBadRequestResponseBody is the type of the
// "mailing-list" service "update-grpsio-mailing-list" endpoint HTTP response
// body for the "BadRequest" error.
type UpdateGrpsioMailingListBadRequestResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateGrpsioMailingListConflictResponseBody is the type of the
// "mailing-list" service "update-grpsio-mailing-list" endpoint HTTP response
// body for the "Conflict" error.
type UpdateGrpsioMailingListConflictResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateGrpsioMailingListInternalServerErrorResponseBody is the type of the
// "mailing-list" service "update-grpsio-mailing-list" endpoint HTTP response
// body for the "InternalServerError" error.
type UpdateGrpsioMailingListInternalServerErrorResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateGrpsioMailingListNotFoundResponseBody is the type of the
// "mailing-list" service "update-grpsio-mailing-list" endpoint HTTP response
// body for the "NotFound" error.
type UpdateGrpsioMailingListNotFoundResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateGrpsioMailingListServiceUnavailableResponseBody is the type of the
// "mailing-list" service "update-grpsio-mailing-list" endpoint HTTP response
// body for the "ServiceUnavailable" error.
type UpdateGrpsioMailingListServiceUnavailableResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteGrpsioMailingListBadRequestResponseBody is the type of the
// "mailing-list" service "delete-grpsio-mailing-list" endpoint HTTP response
// body for the "BadRequest" error.
type DeleteGrpsioMailingListBadRequestResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteGrpsioMailingListConflictResponseBody is the type of the
// "mailing-list" service "delete-grpsio-mailing-list" endpoint HTTP response
// body for the "Conflict" error.
type DeleteGrpsioMailingListConflictResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteGrpsioMailingListInternalServerErrorResponseBody is the type of the
// "mailing-list" service "delete-grpsio-mailing-list" endpoint HTTP response
// body for the "InternalServerError" error.
type DeleteGrpsioMailingListInternalServerErrorResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteGrpsioMailingListNotFoundResponseBody is the type of the
// "mailing-list" service "delete-grpsio-mailing-list" endpoint HTTP response
// body for the "NotFound" error.
type DeleteGrpsioMailingListNotFoundResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteGrpsioMailingListServiceUnavailableResponseBody is the type of the
// "mailing-list" service "delete-grpsio-mailing-list" endpoint HTTP response
// body for the "ServiceUnavailable" error.
type DeleteGrpsioMailingListServiceUnavailableResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateGrpsioMailingListMemberBadRequestResponseBody is the type of the
// "mailing-list" service "create-grpsio-mailing-list-member" endpoint HTTP
// response body for the "BadRequest" error.
type CreateGrpsioMailingListMemberBadRequestResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateGrpsioMailingListMemberConflictResponseBody is the type of the
// "mailing-list" service "create-grpsio-mailing-list-member" endpoint HTTP
// response body for the "Conflict" error.
type CreateGrpsioMailingListMemberConflictResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateGrpsioMailingListMemberInternalServerErrorResponseBody is the type of
// the "mailing-list" service "create-grpsio-mailing-list-member" endpoint HTTP
// response body for the "InternalServerError" error.
type CreateGrpsioMailingListMemberInternalServerErrorResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateGrpsioMailingListMemberNotFoundResponseBody is the type of the
// "mailing-list" service "create-grpsio-mailing-list-member" endpoint HTTP
// response body for the "NotFound" error.
type CreateGrpsioMailingListMemberNotFoundResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateGrpsioMailingListMemberServiceUnavailableResponseBody is the type of
// the "mailing-list" service "create-grpsio-mailing-list-member" endpoint HTTP
// response body for the "ServiceUnavailable" error.
type CreateGrpsioMailingListMemberServiceUnavailableResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetGrpsioMailingListMemberBadRequestResponseBody is the type of the
// "mailing-list" service "get-grpsio-mailing-list-member" endpoint HTTP
// response body for the "BadRequest" error.
type GetGrpsioMailingListMemberBadRequestResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetGrpsioMailingListMemberInternalServerErrorResponseBody is the type of the
// "mailing-list" service "get-grpsio-mailing-list-member" endpoint HTTP
// response body for the "InternalServerError" error.
type GetGrpsioMailingListMemberInternalServerErrorResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetGrpsioMailingListMemberNotFoundResponseBody is the type of the
// "mailing-list" service "get-grpsio-mailing-list-member" endpoint HTTP
// response body for the "NotFound" error.
type GetGrpsioMailingListMemberNotFoundResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetGrpsioMailingListMemberServiceUnavailableResponseBody is the type of the
// "mailing-list" service "get-grpsio-mailing-list-member" endpoint HTTP
// response body for the "ServiceUnavailable" error.
type GetGrpsioMailingListMemberServiceUnavailableResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateGrpsioMailingListMemberBadRequestResponseBody is the type of the
// "mailing-list" service "update-grpsio-mailing-list-member" endpoint HTTP
// response body for the "BadRequest" error.
type UpdateGrpsioMailingListMemberBadRequestResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateGrpsioMailingListMemberConflictResponseBody is the type of the
// "mailing-list" service "update-grpsio-mailing-list-member" endpoint HTTP
// response body for the "Conflict" error.
type UpdateGrpsioMailingListMemberConflictResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateGrpsioMailingListMemberInternalServerErrorResponseBody is the type of
// the "mailing-list" service "update-grpsio-mailing-list-member" endpoint HTTP
// response body for the "InternalServerError" error.
type UpdateGrpsioMailingListMemberInternalServerErrorResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateGrpsioMailingListMemberNotFoundResponseBody is the type of the
// "mailing-list" service "update-grpsio-mailing-list-member" endpoint HTTP
// response body for the "NotFound" error.
type UpdateGrpsioMailingListMemberNotFoundResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateGrpsioMailingListMemberServiceUnavailableResponseBody is the type of
// the "mailing-list" service "update-grpsio-mailing-list-member" endpoint HTTP
// response body for the "ServiceUnavailable" error.
type UpdateGrpsioMailingListMemberServiceUnavailableResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteGrpsioMailingListMemberBadRequestResponseBody is the type of the
// "mailing-list" service "delete-grpsio-mailing-list-member" endpoint HTTP
// response body for the "BadRequest" error.
type DeleteGrpsioMailingListMemberBadRequestResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteGrpsioMailingListMemberConflictResponseBody is the type of the
// "mailing-list" service "delete-grpsio-mailing-list-member" endpoint HTTP
// response body for the "Conflict" error.
type DeleteGrpsioMailingListMemberConflictResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteGrpsioMailingListMemberInternalServerErrorResponseBody is the type of
// the "mailing-list" service "delete-grpsio-mailing-list-member" endpoint HTTP
// response body for the "InternalServerError" error.
type DeleteGrpsioMailingListMemberInternalServerErrorResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteGrpsioMailingListMemberNotFoundResponseBody is the type of the
// "mailing-list" service "delete-grpsio-mailing-list-member" endpoint HTTP
// response body for the "NotFound" error.
type DeleteGrpsioMailingListMemberNotFoundResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteGrpsioMailingListMemberServiceUnavailableResponseBody is the type of
// the "mailing-list" service "delete-grpsio-mailing-list-member" endpoint HTTP
// response body for the "ServiceUnavailable" error.
type DeleteGrpsioMailingListMemberServiceUnavailableResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GroupsioWebhookBadRequestResponseBody is the type of the "mailing-list"
// service "groupsio-webhook" endpoint HTTP response body for the "BadRequest"
// error.
type GroupsioWebhookBadRequestResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GroupsioWebhookUnauthorizedResponseBody is the type of the "mailing-list"
// service "groupsio-webhook" endpoint HTTP response body for the
// "Unauthorized" error.
type GroupsioWebhookUnauthorizedResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GrpsIoServiceWithReadonlyAttributesResponseBody is used to define fields on
// response body types.
type GrpsIoServiceWithReadonlyAttributesResponseBody struct {
	// Service UID -- unique identifier for the service
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// Service type
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// Service domain
	Domain *string `form:"domain,omitempty" json:"domain,omitempty" xml:"domain,omitempty"`
	// GroupsIO group ID
	GroupID *int64 `form:"group_id,omitempty" json:"group_id,omitempty" xml:"group_id,omitempty"`
	// Service status
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// List of global owner email addresses (required for primary, forbidden for
	// shared)
	GlobalOwners []string `form:"global_owners,omitempty" json:"global_owners,omitempty" xml:"global_owners,omitempty"`
	// Email prefix (required for formation and shared, forbidden for primary)
	Prefix *string `form:"prefix,omitempty" json:"prefix,omitempty" xml:"prefix,omitempty"`
	// Project slug identifier
	ProjectSlug *string `form:"project_slug,omitempty" json:"project_slug,omitempty" xml:"project_slug,omitempty"`
	// LFXv2 Project UID
	ProjectUID *string `form:"project_uid,omitempty" json:"project_uid,omitempty" xml:"project_uid,omitempty"`
	// Service URL
	URL *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
	// GroupsIO group name
	GroupName *string `form:"group_name,omitempty" json:"group_name,omitempty" xml:"group_name,omitempty"`
	// Whether the service is publicly accessible
	Public *bool `form:"public,omitempty" json:"public,omitempty" xml:"public,omitempty"`
	// Project name (read-only)
	ProjectName *string `form:"project_name,omitempty" json:"project_name,omitempty" xml:"project_name,omitempty"`
	// The timestamp when the service was created (read-only)
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The timestamp when the service was last updated (read-only)
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// The timestamp when the service was last reviewed in RFC3339 format
	LastReviewedAt *string `form:"last_reviewed_at,omitempty" json:"last_reviewed_at,omitempty" xml:"last_reviewed_at,omitempty"`
	// The user ID who last reviewed this service
	LastReviewedBy *string `form:"last_reviewed_by,omitempty" json:"last_reviewed_by,omitempty" xml:"last_reviewed_by,omitempty"`
	// The user ID who last audited the service
	LastAuditedBy *string `form:"last_audited_by,omitempty" json:"last_audited_by,omitempty" xml:"last_audited_by,omitempty"`
	// The timestamp when the service was last audited
	LastAuditedTime *string `form:"last_audited_time,omitempty" json:"last_audited_time,omitempty" xml:"last_audited_time,omitempty"`
	// Manager user IDs who can edit/modify this service
	Writers []string `form:"writers,omitempty" json:"writers,omitempty" xml:"writers,omitempty"`
	// Auditor user IDs who can audit this service
	Auditors []string `form:"auditors,omitempty" json:"auditors,omitempty" xml:"auditors,omitempty"`
}

// GrpsIoMailingListWithReadonlyAttributesResponseBody is used to define fields
// on response body types.
type GrpsIoMailingListWithReadonlyAttributesResponseBody struct {
	// Mailing list UID -- unique identifier for the mailing list
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// Mailing list group name
	GroupName *string `form:"group_name,omitempty" json:"group_name,omitempty" xml:"group_name,omitempty"`
	// Whether the mailing list is publicly accessible
	Public *bool `form:"public,omitempty" json:"public,omitempty" xml:"public,omitempty"`
	// Mailing list type
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// Committee UUID for committee-based mailing lists
	CommitteeUID *string `form:"committee_uid,omitempty" json:"committee_uid,omitempty" xml:"committee_uid,omitempty"`
	// Committee member filters
	CommitteeFilters []string `form:"committee_filters,omitempty" json:"committee_filters,omitempty" xml:"committee_filters,omitempty"`
	// Mailing list description (11-500 characters)
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Mailing list title
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Subject tag prefix
	SubjectTag *string `form:"subject_tag,omitempty" json:"subject_tag,omitempty" xml:"subject_tag,omitempty"`
	// Service UUID
	ServiceUID *string `form:"service_uid,omitempty" json:"service_uid,omitempty" xml:"service_uid,omitempty"`
	// LFXv2 Project UID (inherited from parent service)
	ProjectUID *string `form:"project_uid,omitempty" json:"project_uid,omitempty" xml:"project_uid,omitempty"`
	// Project name (read-only)
	ProjectName *string `form:"project_name,omitempty" json:"project_name,omitempty" xml:"project_name,omitempty"`
	// Project slug identifier (read-only)
	ProjectSlug *string `form:"project_slug,omitempty" json:"project_slug,omitempty" xml:"project_slug,omitempty"`
	// The timestamp when the service was created (read-only)
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The timestamp when the service was last updated (read-only)
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// Manager user IDs who can edit/modify this service
	Writers []string `form:"writers,omitempty" json:"writers,omitempty" xml:"writers,omitempty"`
	// Auditor user IDs who can audit this service
	Auditors []string `form:"auditors,omitempty" json:"auditors,omitempty" xml:"auditors,omitempty"`
}

// GrpsIoMemberWithReadonlyAttributesResponseBody is used to define fields on
// response body types.
type GrpsIoMemberWithReadonlyAttributesResponseBody struct {
	// Member UID
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// Mailing list UID
	MailingListUID *string `form:"mailing_list_uid,omitempty" json:"mailing_list_uid,omitempty" xml:"mailing_list_uid,omitempty"`
	// Member username
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Member first name
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	// Member last name
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	// Member email address
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// Member organization
	Organization *string `form:"organization,omitempty" json:"organization,omitempty" xml:"organization,omitempty"`
	// Member job title
	JobTitle *string `form:"job_title,omitempty" json:"job_title,omitempty" xml:"job_title,omitempty"`
	// Member type
	MemberType *string `form:"member_type,omitempty" json:"member_type,omitempty" xml:"member_type,omitempty"`
	// Email delivery mode
	DeliveryMode *string `form:"delivery_mode,omitempty" json:"delivery_mode,omitempty" xml:"delivery_mode,omitempty"`
	// Moderation status
	ModStatus *string `form:"mod_status,omitempty" json:"mod_status,omitempty" xml:"mod_status,omitempty"`
	// Last reviewed timestamp
	LastReviewedAt *string `form:"last_reviewed_at,omitempty" json:"last_reviewed_at,omitempty" xml:"last_reviewed_at,omitempty"`
	// Last reviewed by user ID
	LastReviewedBy *string `form:"last_reviewed_by,omitempty" json:"last_reviewed_by,omitempty" xml:"last_reviewed_by,omitempty"`
	// Member status
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Groups.io member ID
	GroupsioMemberID *int64 `form:"groupsio_member_id,omitempty" json:"groupsio_member_id,omitempty" xml:"groupsio_member_id,omitempty"`
	// Groups.io group ID
	GroupsioGroupID *int64 `form:"groupsio_group_id,omitempty" json:"groupsio_group_id,omitempty" xml:"groupsio_group_id,omitempty"`
	// The timestamp when the service was created (read-only)
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The timestamp when the service was last updated (read-only)
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// Manager user IDs who can edit/modify this service
	Writers []string `form:"writers,omitempty" json:"writers,omitempty" xml:"writers,omitempty"`
	// Auditor user IDs who can audit this service
	Auditors []string `form:"auditors,omitempty" json:"auditors,omitempty" xml:"auditors,omitempty"`
}

// NewCreateGrpsioServiceRequestBody builds the HTTP request body from the
// payload of the "create-grpsio-service" endpoint of the "mailing-list"
// service.
func NewCreateGrpsioServiceRequestBody(p *mailinglist.CreateGrpsioServicePayload) *CreateGrpsioServiceRequestBody {
	body := &CreateGrpsioServiceRequestBody{
		Type:        p.Type,
		Domain:      p.Domain,
		GroupID:     p.GroupID,
		Status:      p.Status,
		Prefix:      p.Prefix,
		ProjectSlug: p.ProjectSlug,
		ProjectUID:  p.ProjectUID,
		URL:         p.URL,
		GroupName:   p.GroupName,
		Public:      p.Public,
	}
	if p.GlobalOwners != nil {
		body.GlobalOwners = make([]string, len(p.GlobalOwners))
		for i, val := range p.GlobalOwners {
			body.GlobalOwners[i] = val
		}
	}
	{
		var zero bool
		if body.Public == zero {
			body.Public = false
		}
	}
	if p.Writers != nil {
		body.Writers = make([]string, len(p.Writers))
		for i, val := range p.Writers {
			body.Writers[i] = val
		}
	}
	if p.Auditors != nil {
		body.Auditors = make([]string, len(p.Auditors))
		for i, val := range p.Auditors {
			body.Auditors[i] = val
		}
	}
	return body
}

// NewUpdateGrpsioServiceRequestBody builds the HTTP request body from the
// payload of the "update-grpsio-service" endpoint of the "mailing-list"
// service.
func NewUpdateGrpsioServiceRequestBody(p *mailinglist.UpdateGrpsioServicePayload) *UpdateGrpsioServiceRequestBody {
	body := &UpdateGrpsioServiceRequestBody{
		Type:        p.Type,
		Domain:      p.Domain,
		GroupID:     p.GroupID,
		Status:      p.Status,
		Prefix:      p.Prefix,
		ProjectSlug: p.ProjectSlug,
		ProjectUID:  p.ProjectUID,
		URL:         p.URL,
		GroupName:   p.GroupName,
		Public:      p.Public,
	}
	if p.GlobalOwners != nil {
		body.GlobalOwners = make([]string, len(p.GlobalOwners))
		for i, val := range p.GlobalOwners {
			body.GlobalOwners[i] = val
		}
	}
	{
		var zero bool
		if body.Public == zero {
			body.Public = false
		}
	}
	if p.Writers != nil {
		body.Writers = make([]string, len(p.Writers))
		for i, val := range p.Writers {
			body.Writers[i] = val
		}
	}
	if p.Auditors != nil {
		body.Auditors = make([]string, len(p.Auditors))
		for i, val := range p.Auditors {
			body.Auditors[i] = val
		}
	}
	return body
}

// NewCreateGrpsioMailingListRequestBody builds the HTTP request body from the
// payload of the "create-grpsio-mailing-list" endpoint of the "mailing-list"
// service.
func NewCreateGrpsioMailingListRequestBody(p *mailinglist.CreateGrpsioMailingListPayload) *CreateGrpsioMailingListRequestBody {
	body := &CreateGrpsioMailingListRequestBody{
		GroupName:    p.GroupName,
		Public:       p.Public,
		Type:         p.Type,
		CommitteeUID: p.CommitteeUID,
		Description:  p.Description,
		Title:        p.Title,
		SubjectTag:   p.SubjectTag,
		ServiceUID:   p.ServiceUID,
	}
	if p.CommitteeFilters != nil {
		body.CommitteeFilters = make([]string, len(p.CommitteeFilters))
		for i, val := range p.CommitteeFilters {
			body.CommitteeFilters[i] = val
		}
	}
	if p.Writers != nil {
		body.Writers = make([]string, len(p.Writers))
		for i, val := range p.Writers {
			body.Writers[i] = val
		}
	}
	if p.Auditors != nil {
		body.Auditors = make([]string, len(p.Auditors))
		for i, val := range p.Auditors {
			body.Auditors[i] = val
		}
	}
	return body
}

// NewUpdateGrpsioMailingListRequestBody builds the HTTP request body from the
// payload of the "update-grpsio-mailing-list" endpoint of the "mailing-list"
// service.
func NewUpdateGrpsioMailingListRequestBody(p *mailinglist.UpdateGrpsioMailingListPayload) *UpdateGrpsioMailingListRequestBody {
	body := &UpdateGrpsioMailingListRequestBody{
		GroupName:    p.GroupName,
		Public:       p.Public,
		Type:         p.Type,
		CommitteeUID: p.CommitteeUID,
		Description:  p.Description,
		Title:        p.Title,
		SubjectTag:   p.SubjectTag,
		ServiceUID:   p.ServiceUID,
	}
	if p.CommitteeFilters != nil {
		body.CommitteeFilters = make([]string, len(p.CommitteeFilters))
		for i, val := range p.CommitteeFilters {
			body.CommitteeFilters[i] = val
		}
	}
	if p.Writers != nil {
		body.Writers = make([]string, len(p.Writers))
		for i, val := range p.Writers {
			body.Writers[i] = val
		}
	}
	if p.Auditors != nil {
		body.Auditors = make([]string, len(p.Auditors))
		for i, val := range p.Auditors {
			body.Auditors[i] = val
		}
	}
	return body
}

// NewCreateGrpsioMailingListMemberRequestBody builds the HTTP request body
// from the payload of the "create-grpsio-mailing-list-member" endpoint of the
// "mailing-list" service.
func NewCreateGrpsioMailingListMemberRequestBody(p *mailinglist.CreateGrpsioMailingListMemberPayload) *CreateGrpsioMailingListMemberRequestBody {
	body := &CreateGrpsioMailingListMemberRequestBody{
		Username:       p.Username,
		FirstName:      p.FirstName,
		LastName:       p.LastName,
		Email:          p.Email,
		Organization:   p.Organization,
		JobTitle:       p.JobTitle,
		MemberType:     p.MemberType,
		DeliveryMode:   p.DeliveryMode,
		ModStatus:      p.ModStatus,
		LastReviewedAt: p.LastReviewedAt,
		LastReviewedBy: p.LastReviewedBy,
	}
	{
		var zero string
		if body.MemberType == zero {
			body.MemberType = "direct"
		}
	}
	{
		var zero string
		if body.DeliveryMode == zero {
			body.DeliveryMode = "normal"
		}
	}
	{
		var zero string
		if body.ModStatus == zero {
			body.ModStatus = "none"
		}
	}
	return body
}

// NewUpdateGrpsioMailingListMemberRequestBody builds the HTTP request body
// from the payload of the "update-grpsio-mailing-list-member" endpoint of the
// "mailing-list" service.
func NewUpdateGrpsioMailingListMemberRequestBody(p *mailinglist.UpdateGrpsioMailingListMemberPayload) *UpdateGrpsioMailingListMemberRequestBody {
	body := &UpdateGrpsioMailingListMemberRequestBody{
		Username:     p.Username,
		FirstName:    p.FirstName,
		LastName:     p.LastName,
		Organization: p.Organization,
		JobTitle:     p.JobTitle,
		DeliveryMode: p.DeliveryMode,
		ModStatus:    p.ModStatus,
	}
	{
		var zero string
		if body.DeliveryMode == zero {
			body.DeliveryMode = "normal"
		}
	}
	{
		var zero string
		if body.ModStatus == zero {
			body.ModStatus = "none"
		}
	}
	return body
}

// NewGroupsioWebhookRequestBody builds the HTTP request body from the payload
// of the "groupsio-webhook" endpoint of the "mailing-list" service.
func NewGroupsioWebhookRequestBody(p *mailinglist.GroupsioWebhookPayload) *GroupsioWebhookRequestBody {
	body := &GroupsioWebhookRequestBody{
		Body: p.Body,
	}
	return body
}

// NewReadyzServiceUnavailable builds a mailing-list service readyz endpoint
// ServiceUnavailable error.
func NewReadyzServiceUnavailable(body *ReadyzServiceUnavailableResponseBody) *mailinglist.ServiceUnavailableError {
	v := &mailinglist.ServiceUnavailableError{
		Message: *body.Message,
	}

	return v
}

// NewCreateGrpsioServiceGrpsIoServiceFullCreated builds a "mailing-list"
// service "create-grpsio-service" endpoint result from a HTTP "Created"
// response.
func NewCreateGrpsioServiceGrpsIoServiceFullCreated(body *CreateGrpsioServiceResponseBody) *mailinglist.GrpsIoServiceFull {
	v := &mailinglist.GrpsIoServiceFull{
		UID:             body.UID,
		Type:            *body.Type,
		Domain:          body.Domain,
		GroupID:         body.GroupID,
		Status:          body.Status,
		Prefix:          body.Prefix,
		ProjectSlug:     body.ProjectSlug,
		ProjectUID:      *body.ProjectUID,
		URL:             body.URL,
		GroupName:       body.GroupName,
		ProjectName:     body.ProjectName,
		CreatedAt:       body.CreatedAt,
		UpdatedAt:       body.UpdatedAt,
		LastReviewedAt:  body.LastReviewedAt,
		LastReviewedBy:  body.LastReviewedBy,
		LastAuditedBy:   body.LastAuditedBy,
		LastAuditedTime: body.LastAuditedTime,
	}
	if body.Public != nil {
		v.Public = *body.Public
	}
	if body.GlobalOwners != nil {
		v.GlobalOwners = make([]string, len(body.GlobalOwners))
		for i, val := range body.GlobalOwners {
			v.GlobalOwners[i] = val
		}
	}
	if body.Public == nil {
		v.Public = false
	}
	if body.Writers != nil {
		v.Writers = make([]string, len(body.Writers))
		for i, val := range body.Writers {
			v.Writers[i] = val
		}
	}
	if body.Auditors != nil {
		v.Auditors = make([]string, len(body.Auditors))
		for i, val := range body.Auditors {
			v.Auditors[i] = val
		}
	}

	return v
}

// NewCreateGrpsioServiceBadRequest builds a mailing-list service
// create-grpsio-service endpoint BadRequest error.
func NewCreateGrpsioServiceBadRequest(body *CreateGrpsioServiceBadRequestResponseBody) *mailinglist.BadRequestError {
	v := &mailinglist.BadRequestError{
		Message: *body.Message,
	}

	return v
}

// NewCreateGrpsioServiceConflict builds a mailing-list service
// create-grpsio-service endpoint Conflict error.
func NewCreateGrpsioServiceConflict(body *CreateGrpsioServiceConflictResponseBody) *mailinglist.ConflictError {
	v := &mailinglist.ConflictError{
		Message: *body.Message,
	}

	return v
}

// NewCreateGrpsioServiceInternalServerError builds a mailing-list service
// create-grpsio-service endpoint InternalServerError error.
func NewCreateGrpsioServiceInternalServerError(body *CreateGrpsioServiceInternalServerErrorResponseBody) *mailinglist.InternalServerError {
	v := &mailinglist.InternalServerError{
		Message: *body.Message,
	}

	return v
}

// NewCreateGrpsioServiceNotFound builds a mailing-list service
// create-grpsio-service endpoint NotFound error.
func NewCreateGrpsioServiceNotFound(body *CreateGrpsioServiceNotFoundResponseBody) *mailinglist.NotFoundError {
	v := &mailinglist.NotFoundError{
		Message: *body.Message,
	}

	return v
}

// NewCreateGrpsioServiceServiceUnavailable builds a mailing-list service
// create-grpsio-service endpoint ServiceUnavailable error.
func NewCreateGrpsioServiceServiceUnavailable(body *CreateGrpsioServiceServiceUnavailableResponseBody) *mailinglist.ServiceUnavailableError {
	v := &mailinglist.ServiceUnavailableError{
		Message: *body.Message,
	}

	return v
}

// NewGetGrpsioServiceResultOK builds a "mailing-list" service
// "get-grpsio-service" endpoint result from a HTTP "OK" response.
func NewGetGrpsioServiceResultOK(body *GetGrpsioServiceResponseBody, etag *string) *mailinglist.GetGrpsioServiceResult {
	v := &mailinglist.GrpsIoServiceWithReadonlyAttributes{
		UID:             body.UID,
		Type:            *body.Type,
		Domain:          body.Domain,
		GroupID:         body.GroupID,
		Status:          body.Status,
		Prefix:          body.Prefix,
		ProjectSlug:     body.ProjectSlug,
		ProjectUID:      *body.ProjectUID,
		URL:             body.URL,
		GroupName:       body.GroupName,
		ProjectName:     body.ProjectName,
		CreatedAt:       body.CreatedAt,
		UpdatedAt:       body.UpdatedAt,
		LastReviewedAt:  body.LastReviewedAt,
		LastReviewedBy:  body.LastReviewedBy,
		LastAuditedBy:   body.LastAuditedBy,
		LastAuditedTime: body.LastAuditedTime,
	}
	if body.Public != nil {
		v.Public = *body.Public
	}
	if body.GlobalOwners != nil {
		v.GlobalOwners = make([]string, len(body.GlobalOwners))
		for i, val := range body.GlobalOwners {
			v.GlobalOwners[i] = val
		}
	}
	if body.Public == nil {
		v.Public = false
	}
	if body.Writers != nil {
		v.Writers = make([]string, len(body.Writers))
		for i, val := range body.Writers {
			v.Writers[i] = val
		}
	}
	if body.Auditors != nil {
		v.Auditors = make([]string, len(body.Auditors))
		for i, val := range body.Auditors {
			v.Auditors[i] = val
		}
	}
	res := &mailinglist.GetGrpsioServiceResult{
		Service: v,
	}
	res.Etag = etag

	return res
}

// NewGetGrpsioServiceBadRequest builds a mailing-list service
// get-grpsio-service endpoint BadRequest error.
func NewGetGrpsioServiceBadRequest(body *GetGrpsioServiceBadRequestResponseBody) *mailinglist.BadRequestError {
	v := &mailinglist.BadRequestError{
		Message: *body.Message,
	}

	return v
}

// NewGetGrpsioServiceInternalServerError builds a mailing-list service
// get-grpsio-service endpoint InternalServerError error.
func NewGetGrpsioServiceInternalServerError(body *GetGrpsioServiceInternalServerErrorResponseBody) *mailinglist.InternalServerError {
	v := &mailinglist.InternalServerError{
		Message: *body.Message,
	}

	return v
}

// NewGetGrpsioServiceNotFound builds a mailing-list service get-grpsio-service
// endpoint NotFound error.
func NewGetGrpsioServiceNotFound(body *GetGrpsioServiceNotFoundResponseBody) *mailinglist.NotFoundError {
	v := &mailinglist.NotFoundError{
		Message: *body.Message,
	}

	return v
}

// NewGetGrpsioServiceServiceUnavailable builds a mailing-list service
// get-grpsio-service endpoint ServiceUnavailable error.
func NewGetGrpsioServiceServiceUnavailable(body *GetGrpsioServiceServiceUnavailableResponseBody) *mailinglist.ServiceUnavailableError {
	v := &mailinglist.ServiceUnavailableError{
		Message: *body.Message,
	}

	return v
}

// NewUpdateGrpsioServiceGrpsIoServiceWithReadonlyAttributesOK builds a
// "mailing-list" service "update-grpsio-service" endpoint result from a HTTP
// "OK" response.
func NewUpdateGrpsioServiceGrpsIoServiceWithReadonlyAttributesOK(body *UpdateGrpsioServiceResponseBody) *mailinglist.GrpsIoServiceWithReadonlyAttributes {
	v := &mailinglist.GrpsIoServiceWithReadonlyAttributes{
		UID:             body.UID,
		Type:            *body.Type,
		Domain:          body.Domain,
		GroupID:         body.GroupID,
		Status:          body.Status,
		Prefix:          body.Prefix,
		ProjectSlug:     body.ProjectSlug,
		ProjectUID:      *body.ProjectUID,
		URL:             body.URL,
		GroupName:       body.GroupName,
		ProjectName:     body.ProjectName,
		CreatedAt:       body.CreatedAt,
		UpdatedAt:       body.UpdatedAt,
		LastReviewedAt:  body.LastReviewedAt,
		LastReviewedBy:  body.LastReviewedBy,
		LastAuditedBy:   body.LastAuditedBy,
		LastAuditedTime: body.LastAuditedTime,
	}
	if body.Public != nil {
		v.Public = *body.Public
	}
	if body.GlobalOwners != nil {
		v.GlobalOwners = make([]string, len(body.GlobalOwners))
		for i, val := range body.GlobalOwners {
			v.GlobalOwners[i] = val
		}
	}
	if body.Public == nil {
		v.Public = false
	}
	if body.Writers != nil {
		v.Writers = make([]string, len(body.Writers))
		for i, val := range body.Writers {
			v.Writers[i] = val
		}
	}
	if body.Auditors != nil {
		v.Auditors = make([]string, len(body.Auditors))
		for i, val := range body.Auditors {
			v.Auditors[i] = val
		}
	}

	return v
}

// NewUpdateGrpsioServiceBadRequest builds a mailing-list service
// update-grpsio-service endpoint BadRequest error.
func NewUpdateGrpsioServiceBadRequest(body *UpdateGrpsioServiceBadRequestResponseBody) *mailinglist.BadRequestError {
	v := &mailinglist.BadRequestError{
		Message: *body.Message,
	}

	return v
}

// NewUpdateGrpsioServiceConflict builds a mailing-list service
// update-grpsio-service endpoint Conflict error.
func NewUpdateGrpsioServiceConflict(body *UpdateGrpsioServiceConflictResponseBody) *mailinglist.ConflictError {
	v := &mailinglist.ConflictError{
		Message: *body.Message,
	}

	return v
}

// NewUpdateGrpsioServiceInternalServerError builds a mailing-list service
// update-grpsio-service endpoint InternalServerError error.
func NewUpdateGrpsioServiceInternalServerError(body *UpdateGrpsioServiceInternalServerErrorResponseBody) *mailinglist.InternalServerError {
	v := &mailinglist.InternalServerError{
		Message: *body.Message,
	}

	return v
}

// NewUpdateGrpsioServiceNotFound builds a mailing-list service
// update-grpsio-service endpoint NotFound error.
func NewUpdateGrpsioServiceNotFound(body *UpdateGrpsioServiceNotFoundResponseBody) *mailinglist.NotFoundError {
	v := &mailinglist.NotFoundError{
		Message: *body.Message,
	}

	return v
}

// NewUpdateGrpsioServiceServiceUnavailable builds a mailing-list service
// update-grpsio-service endpoint ServiceUnavailable error.
func NewUpdateGrpsioServiceServiceUnavailable(body *UpdateGrpsioServiceServiceUnavailableResponseBody) *mailinglist.ServiceUnavailableError {
	v := &mailinglist.ServiceUnavailableError{
		Message: *body.Message,
	}

	return v
}

// NewDeleteGrpsioServiceBadRequest builds a mailing-list service
// delete-grpsio-service endpoint BadRequest error.
func NewDeleteGrpsioServiceBadRequest(body *DeleteGrpsioServiceBadRequestResponseBody) *mailinglist.BadRequestError {
	v := &mailinglist.BadRequestError{
		Message: *body.Message,
	}

	return v
}

// NewDeleteGrpsioServiceConflict builds a mailing-list service
// delete-grpsio-service endpoint Conflict error.
func NewDeleteGrpsioServiceConflict(body *DeleteGrpsioServiceConflictResponseBody) *mailinglist.ConflictError {
	v := &mailinglist.ConflictError{
		Message: *body.Message,
	}

	return v
}

// NewDeleteGrpsioServiceInternalServerError builds a mailing-list service
// delete-grpsio-service endpoint InternalServerError error.
func NewDeleteGrpsioServiceInternalServerError(body *DeleteGrpsioServiceInternalServerErrorResponseBody) *mailinglist.InternalServerError {
	v := &mailinglist.InternalServerError{
		Message: *body.Message,
	}

	return v
}

// NewDeleteGrpsioServiceNotFound builds a mailing-list service
// delete-grpsio-service endpoint NotFound error.
func NewDeleteGrpsioServiceNotFound(body *DeleteGrpsioServiceNotFoundResponseBody) *mailinglist.NotFoundError {
	v := &mailinglist.NotFoundError{
		Message: *body.Message,
	}

	return v
}

// NewDeleteGrpsioServiceServiceUnavailable builds a mailing-list service
// delete-grpsio-service endpoint ServiceUnavailable error.
func NewDeleteGrpsioServiceServiceUnavailable(body *DeleteGrpsioServiceServiceUnavailableResponseBody) *mailinglist.ServiceUnavailableError {
	v := &mailinglist.ServiceUnavailableError{
		Message: *body.Message,
	}

	return v
}

// NewCreateGrpsioMailingListGrpsIoMailingListFullCreated builds a
// "mailing-list" service "create-grpsio-mailing-list" endpoint result from a
// HTTP "Created" response.
func NewCreateGrpsioMailingListGrpsIoMailingListFullCreated(body *CreateGrpsioMailingListResponseBody) *mailinglist.GrpsIoMailingListFull {
	v := &mailinglist.GrpsIoMailingListFull{
		UID:            body.UID,
		GroupName:      body.GroupName,
		Type:           body.Type,
		CommitteeUID:   body.CommitteeUID,
		Description:    body.Description,
		Title:          body.Title,
		SubjectTag:     body.SubjectTag,
		ServiceUID:     body.ServiceUID,
		ProjectUID:     body.ProjectUID,
		ProjectName:    body.ProjectName,
		ProjectSlug:    body.ProjectSlug,
		CreatedAt:      body.CreatedAt,
		UpdatedAt:      body.UpdatedAt,
		LastReviewedAt: body.LastReviewedAt,
		LastReviewedBy: body.LastReviewedBy,
	}
	if body.Public != nil {
		v.Public = *body.Public
	}
	if body.Public == nil {
		v.Public = false
	}
	if body.CommitteeFilters != nil {
		v.CommitteeFilters = make([]string, len(body.CommitteeFilters))
		for i, val := range body.CommitteeFilters {
			v.CommitteeFilters[i] = val
		}
	}
	if body.Writers != nil {
		v.Writers = make([]string, len(body.Writers))
		for i, val := range body.Writers {
			v.Writers[i] = val
		}
	}
	if body.Auditors != nil {
		v.Auditors = make([]string, len(body.Auditors))
		for i, val := range body.Auditors {
			v.Auditors[i] = val
		}
	}

	return v
}

// NewCreateGrpsioMailingListBadRequest builds a mailing-list service
// create-grpsio-mailing-list endpoint BadRequest error.
func NewCreateGrpsioMailingListBadRequest(body *CreateGrpsioMailingListBadRequestResponseBody) *mailinglist.BadRequestError {
	v := &mailinglist.BadRequestError{
		Message: *body.Message,
	}

	return v
}

// NewCreateGrpsioMailingListConflict builds a mailing-list service
// create-grpsio-mailing-list endpoint Conflict error.
func NewCreateGrpsioMailingListConflict(body *CreateGrpsioMailingListConflictResponseBody) *mailinglist.ConflictError {
	v := &mailinglist.ConflictError{
		Message: *body.Message,
	}

	return v
}

// NewCreateGrpsioMailingListInternalServerError builds a mailing-list service
// create-grpsio-mailing-list endpoint InternalServerError error.
func NewCreateGrpsioMailingListInternalServerError(body *CreateGrpsioMailingListInternalServerErrorResponseBody) *mailinglist.InternalServerError {
	v := &mailinglist.InternalServerError{
		Message: *body.Message,
	}

	return v
}

// NewCreateGrpsioMailingListNotFound builds a mailing-list service
// create-grpsio-mailing-list endpoint NotFound error.
func NewCreateGrpsioMailingListNotFound(body *CreateGrpsioMailingListNotFoundResponseBody) *mailinglist.NotFoundError {
	v := &mailinglist.NotFoundError{
		Message: *body.Message,
	}

	return v
}

// NewCreateGrpsioMailingListServiceUnavailable builds a mailing-list service
// create-grpsio-mailing-list endpoint ServiceUnavailable error.
func NewCreateGrpsioMailingListServiceUnavailable(body *CreateGrpsioMailingListServiceUnavailableResponseBody) *mailinglist.ServiceUnavailableError {
	v := &mailinglist.ServiceUnavailableError{
		Message: *body.Message,
	}

	return v
}

// NewGetGrpsioMailingListResultOK builds a "mailing-list" service
// "get-grpsio-mailing-list" endpoint result from a HTTP "OK" response.
func NewGetGrpsioMailingListResultOK(body *GetGrpsioMailingListResponseBody, etag *string) *mailinglist.GetGrpsioMailingListResult {
	v := &mailinglist.GrpsIoMailingListWithReadonlyAttributes{
		UID:          body.UID,
		GroupName:    body.GroupName,
		Type:         body.Type,
		CommitteeUID: body.CommitteeUID,
		Description:  body.Description,
		Title:        body.Title,
		SubjectTag:   body.SubjectTag,
		ServiceUID:   body.ServiceUID,
		ProjectUID:   body.ProjectUID,
		ProjectName:  body.ProjectName,
		ProjectSlug:  body.ProjectSlug,
		CreatedAt:    body.CreatedAt,
		UpdatedAt:    body.UpdatedAt,
	}
	if body.Public != nil {
		v.Public = *body.Public
	}
	if body.Public == nil {
		v.Public = false
	}
	if body.CommitteeFilters != nil {
		v.CommitteeFilters = make([]string, len(body.CommitteeFilters))
		for i, val := range body.CommitteeFilters {
			v.CommitteeFilters[i] = val
		}
	}
	if body.Writers != nil {
		v.Writers = make([]string, len(body.Writers))
		for i, val := range body.Writers {
			v.Writers[i] = val
		}
	}
	if body.Auditors != nil {
		v.Auditors = make([]string, len(body.Auditors))
		for i, val := range body.Auditors {
			v.Auditors[i] = val
		}
	}
	res := &mailinglist.GetGrpsioMailingListResult{
		MailingList: v,
	}
	res.Etag = etag

	return res
}

// NewGetGrpsioMailingListBadRequest builds a mailing-list service
// get-grpsio-mailing-list endpoint BadRequest error.
func NewGetGrpsioMailingListBadRequest(body *GetGrpsioMailingListBadRequestResponseBody) *mailinglist.BadRequestError {
	v := &mailinglist.BadRequestError{
		Message: *body.Message,
	}

	return v
}

// NewGetGrpsioMailingListInternalServerError builds a mailing-list service
// get-grpsio-mailing-list endpoint InternalServerError error.
func NewGetGrpsioMailingListInternalServerError(body *GetGrpsioMailingListInternalServerErrorResponseBody) *mailinglist.InternalServerError {
	v := &mailinglist.InternalServerError{
		Message: *body.Message,
	}

	return v
}

// NewGetGrpsioMailingListNotFound builds a mailing-list service
// get-grpsio-mailing-list endpoint NotFound error.
func NewGetGrpsioMailingListNotFound(body *GetGrpsioMailingListNotFoundResponseBody) *mailinglist.NotFoundError {
	v := &mailinglist.NotFoundError{
		Message: *body.Message,
	}

	return v
}

// NewGetGrpsioMailingListServiceUnavailable builds a mailing-list service
// get-grpsio-mailing-list endpoint ServiceUnavailable error.
func NewGetGrpsioMailingListServiceUnavailable(body *GetGrpsioMailingListServiceUnavailableResponseBody) *mailinglist.ServiceUnavailableError {
	v := &mailinglist.ServiceUnavailableError{
		Message: *body.Message,
	}

	return v
}

// NewUpdateGrpsioMailingListGrpsIoMailingListWithReadonlyAttributesOK builds a
// "mailing-list" service "update-grpsio-mailing-list" endpoint result from a
// HTTP "OK" response.
func NewUpdateGrpsioMailingListGrpsIoMailingListWithReadonlyAttributesOK(body *UpdateGrpsioMailingListResponseBody) *mailinglist.GrpsIoMailingListWithReadonlyAttributes {
	v := &mailinglist.GrpsIoMailingListWithReadonlyAttributes{
		UID:          body.UID,
		GroupName:    body.GroupName,
		Type:         body.Type,
		CommitteeUID: body.CommitteeUID,
		Description:  body.Description,
		Title:        body.Title,
		SubjectTag:   body.SubjectTag,
		ServiceUID:   body.ServiceUID,
		ProjectUID:   body.ProjectUID,
		ProjectName:  body.ProjectName,
		ProjectSlug:  body.ProjectSlug,
		CreatedAt:    body.CreatedAt,
		UpdatedAt:    body.UpdatedAt,
	}
	if body.Public != nil {
		v.Public = *body.Public
	}
	if body.Public == nil {
		v.Public = false
	}
	if body.CommitteeFilters != nil {
		v.CommitteeFilters = make([]string, len(body.CommitteeFilters))
		for i, val := range body.CommitteeFilters {
			v.CommitteeFilters[i] = val
		}
	}
	if body.Writers != nil {
		v.Writers = make([]string, len(body.Writers))
		for i, val := range body.Writers {
			v.Writers[i] = val
		}
	}
	if body.Auditors != nil {
		v.Auditors = make([]string, len(body.Auditors))
		for i, val := range body.Auditors {
			v.Auditors[i] = val
		}
	}

	return v
}

// NewUpdateGrpsioMailingListBadRequest builds a mailing-list service
// update-grpsio-mailing-list endpoint BadRequest error.
func NewUpdateGrpsioMailingListBadRequest(body *UpdateGrpsioMailingListBadRequestResponseBody) *mailinglist.BadRequestError {
	v := &mailinglist.BadRequestError{
		Message: *body.Message,
	}

	return v
}

// NewUpdateGrpsioMailingListConflict builds a mailing-list service
// update-grpsio-mailing-list endpoint Conflict error.
func NewUpdateGrpsioMailingListConflict(body *UpdateGrpsioMailingListConflictResponseBody) *mailinglist.ConflictError {
	v := &mailinglist.ConflictError{
		Message: *body.Message,
	}

	return v
}

// NewUpdateGrpsioMailingListInternalServerError builds a mailing-list service
// update-grpsio-mailing-list endpoint InternalServerError error.
func NewUpdateGrpsioMailingListInternalServerError(body *UpdateGrpsioMailingListInternalServerErrorResponseBody) *mailinglist.InternalServerError {
	v := &mailinglist.InternalServerError{
		Message: *body.Message,
	}

	return v
}

// NewUpdateGrpsioMailingListNotFound builds a mailing-list service
// update-grpsio-mailing-list endpoint NotFound error.
func NewUpdateGrpsioMailingListNotFound(body *UpdateGrpsioMailingListNotFoundResponseBody) *mailinglist.NotFoundError {
	v := &mailinglist.NotFoundError{
		Message: *body.Message,
	}

	return v
}

// NewUpdateGrpsioMailingListServiceUnavailable builds a mailing-list service
// update-grpsio-mailing-list endpoint ServiceUnavailable error.
func NewUpdateGrpsioMailingListServiceUnavailable(body *UpdateGrpsioMailingListServiceUnavailableResponseBody) *mailinglist.ServiceUnavailableError {
	v := &mailinglist.ServiceUnavailableError{
		Message: *body.Message,
	}

	return v
}

// NewDeleteGrpsioMailingListBadRequest builds a mailing-list service
// delete-grpsio-mailing-list endpoint BadRequest error.
func NewDeleteGrpsioMailingListBadRequest(body *DeleteGrpsioMailingListBadRequestResponseBody) *mailinglist.BadRequestError {
	v := &mailinglist.BadRequestError{
		Message: *body.Message,
	}

	return v
}

// NewDeleteGrpsioMailingListConflict builds a mailing-list service
// delete-grpsio-mailing-list endpoint Conflict error.
func NewDeleteGrpsioMailingListConflict(body *DeleteGrpsioMailingListConflictResponseBody) *mailinglist.ConflictError {
	v := &mailinglist.ConflictError{
		Message: *body.Message,
	}

	return v
}

// NewDeleteGrpsioMailingListInternalServerError builds a mailing-list service
// delete-grpsio-mailing-list endpoint InternalServerError error.
func NewDeleteGrpsioMailingListInternalServerError(body *DeleteGrpsioMailingListInternalServerErrorResponseBody) *mailinglist.InternalServerError {
	v := &mailinglist.InternalServerError{
		Message: *body.Message,
	}

	return v
}

// NewDeleteGrpsioMailingListNotFound builds a mailing-list service
// delete-grpsio-mailing-list endpoint NotFound error.
func NewDeleteGrpsioMailingListNotFound(body *DeleteGrpsioMailingListNotFoundResponseBody) *mailinglist.NotFoundError {
	v := &mailinglist.NotFoundError{
		Message: *body.Message,
	}

	return v
}

// NewDeleteGrpsioMailingListServiceUnavailable builds a mailing-list service
// delete-grpsio-mailing-list endpoint ServiceUnavailable error.
func NewDeleteGrpsioMailingListServiceUnavailable(body *DeleteGrpsioMailingListServiceUnavailableResponseBody) *mailinglist.ServiceUnavailableError {
	v := &mailinglist.ServiceUnavailableError{
		Message: *body.Message,
	}

	return v
}

// NewCreateGrpsioMailingListMemberGrpsIoMemberFullCreated builds a
// "mailing-list" service "create-grpsio-mailing-list-member" endpoint result
// from a HTTP "Created" response.
func NewCreateGrpsioMailingListMemberGrpsIoMemberFullCreated(body *CreateGrpsioMailingListMemberResponseBody) *mailinglist.GrpsIoMemberFull {
	v := &mailinglist.GrpsIoMemberFull{
		UID:              *body.UID,
		MailingListUID:   *body.MailingListUID,
		Username:         body.Username,
		FirstName:        *body.FirstName,
		LastName:         *body.LastName,
		Email:            *body.Email,
		Organization:     body.Organization,
		JobTitle:         body.JobTitle,
		MemberType:       *body.MemberType,
		DeliveryMode:     *body.DeliveryMode,
		ModStatus:        *body.ModStatus,
		LastReviewedAt:   body.LastReviewedAt,
		LastReviewedBy:   body.LastReviewedBy,
		Status:           *body.Status,
		GroupsioMemberID: body.GroupsioMemberID,
		GroupsioGroupID:  body.GroupsioGroupID,
		CreatedAt:        *body.CreatedAt,
		UpdatedAt:        *body.UpdatedAt,
	}
	if body.Writers != nil {
		v.Writers = make([]string, len(body.Writers))
		for i, val := range body.Writers {
			v.Writers[i] = val
		}
	}
	if body.Auditors != nil {
		v.Auditors = make([]string, len(body.Auditors))
		for i, val := range body.Auditors {
			v.Auditors[i] = val
		}
	}

	return v
}

// NewCreateGrpsioMailingListMemberBadRequest builds a mailing-list service
// create-grpsio-mailing-list-member endpoint BadRequest error.
func NewCreateGrpsioMailingListMemberBadRequest(body *CreateGrpsioMailingListMemberBadRequestResponseBody) *mailinglist.BadRequestError {
	v := &mailinglist.BadRequestError{
		Message: *body.Message,
	}

	return v
}

// NewCreateGrpsioMailingListMemberConflict builds a mailing-list service
// create-grpsio-mailing-list-member endpoint Conflict error.
func NewCreateGrpsioMailingListMemberConflict(body *CreateGrpsioMailingListMemberConflictResponseBody) *mailinglist.ConflictError {
	v := &mailinglist.ConflictError{
		Message: *body.Message,
	}

	return v
}

// NewCreateGrpsioMailingListMemberInternalServerError builds a mailing-list
// service create-grpsio-mailing-list-member endpoint InternalServerError error.
func NewCreateGrpsioMailingListMemberInternalServerError(body *CreateGrpsioMailingListMemberInternalServerErrorResponseBody) *mailinglist.InternalServerError {
	v := &mailinglist.InternalServerError{
		Message: *body.Message,
	}

	return v
}

// NewCreateGrpsioMailingListMemberNotFound builds a mailing-list service
// create-grpsio-mailing-list-member endpoint NotFound error.
func NewCreateGrpsioMailingListMemberNotFound(body *CreateGrpsioMailingListMemberNotFoundResponseBody) *mailinglist.NotFoundError {
	v := &mailinglist.NotFoundError{
		Message: *body.Message,
	}

	return v
}

// NewCreateGrpsioMailingListMemberServiceUnavailable builds a mailing-list
// service create-grpsio-mailing-list-member endpoint ServiceUnavailable error.
func NewCreateGrpsioMailingListMemberServiceUnavailable(body *CreateGrpsioMailingListMemberServiceUnavailableResponseBody) *mailinglist.ServiceUnavailableError {
	v := &mailinglist.ServiceUnavailableError{
		Message: *body.Message,
	}

	return v
}

// NewGetGrpsioMailingListMemberResultOK builds a "mailing-list" service
// "get-grpsio-mailing-list-member" endpoint result from a HTTP "OK" response.
func NewGetGrpsioMailingListMemberResultOK(body *GetGrpsioMailingListMemberResponseBody, etag *string) *mailinglist.GetGrpsioMailingListMemberResult {
	v := &mailinglist.GrpsIoMemberWithReadonlyAttributes{
		UID:              body.UID,
		MailingListUID:   body.MailingListUID,
		Username:         body.Username,
		FirstName:        body.FirstName,
		LastName:         body.LastName,
		Email:            body.Email,
		Organization:     body.Organization,
		JobTitle:         body.JobTitle,
		LastReviewedAt:   body.LastReviewedAt,
		LastReviewedBy:   body.LastReviewedBy,
		Status:           body.Status,
		GroupsioMemberID: body.GroupsioMemberID,
		GroupsioGroupID:  body.GroupsioGroupID,
		CreatedAt:        body.CreatedAt,
		UpdatedAt:        body.UpdatedAt,
	}
	if body.MemberType != nil {
		v.MemberType = *body.MemberType
	}
	if body.DeliveryMode != nil {
		v.DeliveryMode = *body.DeliveryMode
	}
	if body.ModStatus != nil {
		v.ModStatus = *body.ModStatus
	}
	if body.MemberType == nil {
		v.MemberType = "direct"
	}
	if body.DeliveryMode == nil {
		v.DeliveryMode = "normal"
	}
	if body.ModStatus == nil {
		v.ModStatus = "none"
	}
	if body.Writers != nil {
		v.Writers = make([]string, len(body.Writers))
		for i, val := range body.Writers {
			v.Writers[i] = val
		}
	}
	if body.Auditors != nil {
		v.Auditors = make([]string, len(body.Auditors))
		for i, val := range body.Auditors {
			v.Auditors[i] = val
		}
	}
	res := &mailinglist.GetGrpsioMailingListMemberResult{
		Member: v,
	}
	res.Etag = etag

	return res
}

// NewGetGrpsioMailingListMemberBadRequest builds a mailing-list service
// get-grpsio-mailing-list-member endpoint BadRequest error.
func NewGetGrpsioMailingListMemberBadRequest(body *GetGrpsioMailingListMemberBadRequestResponseBody) *mailinglist.BadRequestError {
	v := &mailinglist.BadRequestError{
		Message: *body.Message,
	}

	return v
}

// NewGetGrpsioMailingListMemberInternalServerError builds a mailing-list
// service get-grpsio-mailing-list-member endpoint InternalServerError error.
func NewGetGrpsioMailingListMemberInternalServerError(body *GetGrpsioMailingListMemberInternalServerErrorResponseBody) *mailinglist.InternalServerError {
	v := &mailinglist.InternalServerError{
		Message: *body.Message,
	}

	return v
}

// NewGetGrpsioMailingListMemberNotFound builds a mailing-list service
// get-grpsio-mailing-list-member endpoint NotFound error.
func NewGetGrpsioMailingListMemberNotFound(body *GetGrpsioMailingListMemberNotFoundResponseBody) *mailinglist.NotFoundError {
	v := &mailinglist.NotFoundError{
		Message: *body.Message,
	}

	return v
}

// NewGetGrpsioMailingListMemberServiceUnavailable builds a mailing-list
// service get-grpsio-mailing-list-member endpoint ServiceUnavailable error.
func NewGetGrpsioMailingListMemberServiceUnavailable(body *GetGrpsioMailingListMemberServiceUnavailableResponseBody) *mailinglist.ServiceUnavailableError {
	v := &mailinglist.ServiceUnavailableError{
		Message: *body.Message,
	}

	return v
}

// NewUpdateGrpsioMailingListMemberGrpsIoMemberWithReadonlyAttributesOK builds
// a "mailing-list" service "update-grpsio-mailing-list-member" endpoint result
// from a HTTP "OK" response.
func NewUpdateGrpsioMailingListMemberGrpsIoMemberWithReadonlyAttributesOK(body *UpdateGrpsioMailingListMemberResponseBody) *mailinglist.GrpsIoMemberWithReadonlyAttributes {
	v := &mailinglist.GrpsIoMemberWithReadonlyAttributes{
		UID:              body.UID,
		MailingListUID:   body.MailingListUID,
		Username:         body.Username,
		FirstName:        body.FirstName,
		LastName:         body.LastName,
		Email:            body.Email,
		Organization:     body.Organization,
		JobTitle:         body.JobTitle,
		LastReviewedAt:   body.LastReviewedAt,
		LastReviewedBy:   body.LastReviewedBy,
		Status:           body.Status,
		GroupsioMemberID: body.GroupsioMemberID,
		GroupsioGroupID:  body.GroupsioGroupID,
		CreatedAt:        body.CreatedAt,
		UpdatedAt:        body.UpdatedAt,
	}
	if body.MemberType != nil {
		v.MemberType = *body.MemberType
	}
	if body.DeliveryMode != nil {
		v.DeliveryMode = *body.DeliveryMode
	}
	if body.ModStatus != nil {
		v.ModStatus = *body.ModStatus
	}
	if body.MemberType == nil {
		v.MemberType = "direct"
	}
	if body.DeliveryMode == nil {
		v.DeliveryMode = "normal"
	}
	if body.ModStatus == nil {
		v.ModStatus = "none"
	}
	if body.Writers != nil {
		v.Writers = make([]string, len(body.Writers))
		for i, val := range body.Writers {
			v.Writers[i] = val
		}
	}
	if body.Auditors != nil {
		v.Auditors = make([]string, len(body.Auditors))
		for i, val := range body.Auditors {
			v.Auditors[i] = val
		}
	}

	return v
}

// NewUpdateGrpsioMailingListMemberBadRequest builds a mailing-list service
// update-grpsio-mailing-list-member endpoint BadRequest error.
func NewUpdateGrpsioMailingListMemberBadRequest(body *UpdateGrpsioMailingListMemberBadRequestResponseBody) *mailinglist.BadRequestError {
	v := &mailinglist.BadRequestError{
		Message: *body.Message,
	}

	return v
}

// NewUpdateGrpsioMailingListMemberConflict builds a mailing-list service
// update-grpsio-mailing-list-member endpoint Conflict error.
func NewUpdateGrpsioMailingListMemberConflict(body *UpdateGrpsioMailingListMemberConflictResponseBody) *mailinglist.ConflictError {
	v := &mailinglist.ConflictError{
		Message: *body.Message,
	}

	return v
}

// NewUpdateGrpsioMailingListMemberInternalServerError builds a mailing-list
// service update-grpsio-mailing-list-member endpoint InternalServerError error.
func NewUpdateGrpsioMailingListMemberInternalServerError(body *UpdateGrpsioMailingListMemberInternalServerErrorResponseBody) *mailinglist.InternalServerError {
	v := &mailinglist.InternalServerError{
		Message: *body.Message,
	}

	return v
}

// NewUpdateGrpsioMailingListMemberNotFound builds a mailing-list service
// update-grpsio-mailing-list-member endpoint NotFound error.
func NewUpdateGrpsioMailingListMemberNotFound(body *UpdateGrpsioMailingListMemberNotFoundResponseBody) *mailinglist.NotFoundError {
	v := &mailinglist.NotFoundError{
		Message: *body.Message,
	}

	return v
}

// NewUpdateGrpsioMailingListMemberServiceUnavailable builds a mailing-list
// service update-grpsio-mailing-list-member endpoint ServiceUnavailable error.
func NewUpdateGrpsioMailingListMemberServiceUnavailable(body *UpdateGrpsioMailingListMemberServiceUnavailableResponseBody) *mailinglist.ServiceUnavailableError {
	v := &mailinglist.ServiceUnavailableError{
		Message: *body.Message,
	}

	return v
}

// NewDeleteGrpsioMailingListMemberBadRequest builds a mailing-list service
// delete-grpsio-mailing-list-member endpoint BadRequest error.
func NewDeleteGrpsioMailingListMemberBadRequest(body *DeleteGrpsioMailingListMemberBadRequestResponseBody) *mailinglist.BadRequestError {
	v := &mailinglist.BadRequestError{
		Message: *body.Message,
	}

	return v
}

// NewDeleteGrpsioMailingListMemberConflict builds a mailing-list service
// delete-grpsio-mailing-list-member endpoint Conflict error.
func NewDeleteGrpsioMailingListMemberConflict(body *DeleteGrpsioMailingListMemberConflictResponseBody) *mailinglist.ConflictError {
	v := &mailinglist.ConflictError{
		Message: *body.Message,
	}

	return v
}

// NewDeleteGrpsioMailingListMemberInternalServerError builds a mailing-list
// service delete-grpsio-mailing-list-member endpoint InternalServerError error.
func NewDeleteGrpsioMailingListMemberInternalServerError(body *DeleteGrpsioMailingListMemberInternalServerErrorResponseBody) *mailinglist.InternalServerError {
	v := &mailinglist.InternalServerError{
		Message: *body.Message,
	}

	return v
}

// NewDeleteGrpsioMailingListMemberNotFound builds a mailing-list service
// delete-grpsio-mailing-list-member endpoint NotFound error.
func NewDeleteGrpsioMailingListMemberNotFound(body *DeleteGrpsioMailingListMemberNotFoundResponseBody) *mailinglist.NotFoundError {
	v := &mailinglist.NotFoundError{
		Message: *body.Message,
	}

	return v
}

// NewDeleteGrpsioMailingListMemberServiceUnavailable builds a mailing-list
// service delete-grpsio-mailing-list-member endpoint ServiceUnavailable error.
func NewDeleteGrpsioMailingListMemberServiceUnavailable(body *DeleteGrpsioMailingListMemberServiceUnavailableResponseBody) *mailinglist.ServiceUnavailableError {
	v := &mailinglist.ServiceUnavailableError{
		Message: *body.Message,
	}

	return v
}

// NewGroupsioWebhookBadRequest builds a mailing-list service groupsio-webhook
// endpoint BadRequest error.
func NewGroupsioWebhookBadRequest(body *GroupsioWebhookBadRequestResponseBody) *mailinglist.BadRequestError {
	v := &mailinglist.BadRequestError{
		Message: *body.Message,
	}

	return v
}

// NewGroupsioWebhookUnauthorized builds a mailing-list service
// groupsio-webhook endpoint Unauthorized error.
func NewGroupsioWebhookUnauthorized(body *GroupsioWebhookUnauthorizedResponseBody) *mailinglist.UnauthorizedError {
	v := &mailinglist.UnauthorizedError{
		Message: *body.Message,
	}

	return v
}

// ValidateCreateGrpsioServiceResponseBody runs the validations defined on
// Create-Grpsio-ServiceResponseBody
func ValidateCreateGrpsioServiceResponseBody(body *CreateGrpsioServiceResponseBody) (err error) {
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.ProjectUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("project_uid", "body"))
	}
	if body.UID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.uid", *body.UID, goa.FormatUUID))
	}
	if body.Type != nil {
		if !(*body.Type == "primary" || *body.Type == "formation" || *body.Type == "shared") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", *body.Type, []any{"primary", "formation", "shared"}))
		}
	}
	for _, e := range body.GlobalOwners {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.global_owners[*]", e, goa.FormatEmail))
	}
	if body.ProjectSlug != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.project_slug", *body.ProjectSlug, goa.FormatRegexp))
	}
	if body.ProjectSlug != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.project_slug", *body.ProjectSlug, "^[a-z][a-z0-9_\\-]*[a-z0-9]$"))
	}
	if body.ProjectUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.project_uid", *body.ProjectUID, goa.FormatUUID))
	}
	if body.URL != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.url", *body.URL, goa.FormatURI))
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	if body.LastReviewedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.last_reviewed_at", *body.LastReviewedAt, goa.FormatDateTime))
	}
	if body.LastAuditedTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.last_audited_time", *body.LastAuditedTime, goa.FormatDateTime))
	}
	return
}

// ValidateGetGrpsioServiceResponseBody runs the validations defined on
// Get-Grpsio-ServiceResponseBody
func ValidateGetGrpsioServiceResponseBody(body *GetGrpsioServiceResponseBody) (err error) {
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.ProjectUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("project_uid", "body"))
	}
	if body.UID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.uid", *body.UID, goa.FormatUUID))
	}
	if body.Type != nil {
		if !(*body.Type == "primary" || *body.Type == "formation" || *body.Type == "shared") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", *body.Type, []any{"primary", "formation", "shared"}))
		}
	}
	for _, e := range body.GlobalOwners {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.global_owners[*]", e, goa.FormatEmail))
	}
	if body.ProjectSlug != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.project_slug", *body.ProjectSlug, goa.FormatRegexp))
	}
	if body.ProjectSlug != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.project_slug", *body.ProjectSlug, "^[a-z][a-z0-9_\\-]*[a-z0-9]$"))
	}
	if body.ProjectUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.project_uid", *body.ProjectUID, goa.FormatUUID))
	}
	if body.URL != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.url", *body.URL, goa.FormatURI))
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	if body.LastReviewedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.last_reviewed_at", *body.LastReviewedAt, goa.FormatDateTime))
	}
	if body.LastAuditedTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.last_audited_time", *body.LastAuditedTime, goa.FormatDateTime))
	}
	return
}

// ValidateUpdateGrpsioServiceResponseBody runs the validations defined on
// Update-Grpsio-ServiceResponseBody
func ValidateUpdateGrpsioServiceResponseBody(body *UpdateGrpsioServiceResponseBody) (err error) {
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.ProjectUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("project_uid", "body"))
	}
	if body.UID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.uid", *body.UID, goa.FormatUUID))
	}
	if body.Type != nil {
		if !(*body.Type == "primary" || *body.Type == "formation" || *body.Type == "shared") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", *body.Type, []any{"primary", "formation", "shared"}))
		}
	}
	for _, e := range body.GlobalOwners {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.global_owners[*]", e, goa.FormatEmail))
	}
	if body.ProjectSlug != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.project_slug", *body.ProjectSlug, goa.FormatRegexp))
	}
	if body.ProjectSlug != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.project_slug", *body.ProjectSlug, "^[a-z][a-z0-9_\\-]*[a-z0-9]$"))
	}
	if body.ProjectUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.project_uid", *body.ProjectUID, goa.FormatUUID))
	}
	if body.URL != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.url", *body.URL, goa.FormatURI))
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	if body.LastReviewedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.last_reviewed_at", *body.LastReviewedAt, goa.FormatDateTime))
	}
	if body.LastAuditedTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.last_audited_time", *body.LastAuditedTime, goa.FormatDateTime))
	}
	return
}

// ValidateCreateGrpsioMailingListResponseBody runs the validations defined on
// Create-Grpsio-Mailing-ListResponseBody
func ValidateCreateGrpsioMailingListResponseBody(body *CreateGrpsioMailingListResponseBody) (err error) {
	if body.UID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.uid", *body.UID, goa.FormatUUID))
	}
	if body.GroupName != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.group_name", *body.GroupName, "^[a-zA-Z0-9][a-zA-Z0-9_-]*[a-zA-Z0-9]$"))
	}
	if body.GroupName != nil {
		if utf8.RuneCountInString(*body.GroupName) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.group_name", *body.GroupName, utf8.RuneCountInString(*body.GroupName), 3, true))
		}
	}
	if body.GroupName != nil {
		if utf8.RuneCountInString(*body.GroupName) > 34 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.group_name", *body.GroupName, utf8.RuneCountInString(*body.GroupName), 34, false))
		}
	}
	if body.Type != nil {
		if !(*body.Type == "announcement" || *body.Type == "discussion_moderated" || *body.Type == "discussion_open") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", *body.Type, []any{"announcement", "discussion_moderated", "discussion_open"}))
		}
	}
	if body.CommitteeUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.committee_uid", *body.CommitteeUID, goa.FormatUUID))
	}
	for _, e := range body.CommitteeFilters {
		if !(e == "Voting Rep" || e == "Alternate Voting Rep" || e == "Observer" || e == "Emeritus" || e == "None") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.committee_filters[*]", e, []any{"Voting Rep", "Alternate Voting Rep", "Observer", "Emeritus", "None"}))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) < 11 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 11, true))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 500 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 500, false))
		}
	}
	if body.Title != nil {
		if utf8.RuneCountInString(*body.Title) < 5 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.title", *body.Title, utf8.RuneCountInString(*body.Title), 5, true))
		}
	}
	if body.Title != nil {
		if utf8.RuneCountInString(*body.Title) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.title", *body.Title, utf8.RuneCountInString(*body.Title), 100, false))
		}
	}
	if body.SubjectTag != nil {
		if utf8.RuneCountInString(*body.SubjectTag) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.subject_tag", *body.SubjectTag, utf8.RuneCountInString(*body.SubjectTag), 50, false))
		}
	}
	if body.ServiceUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.service_uid", *body.ServiceUID, goa.FormatUUID))
	}
	if body.ProjectUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.project_uid", *body.ProjectUID, goa.FormatUUID))
	}
	if body.ProjectSlug != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.project_slug", *body.ProjectSlug, goa.FormatRegexp))
	}
	if body.ProjectSlug != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.project_slug", *body.ProjectSlug, "^[a-z][a-z0-9_\\-]*[a-z0-9]$"))
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	if body.LastReviewedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.last_reviewed_at", *body.LastReviewedAt, goa.FormatDateTime))
	}
	return
}

// ValidateGetGrpsioMailingListResponseBody runs the validations defined on
// Get-Grpsio-Mailing-ListResponseBody
func ValidateGetGrpsioMailingListResponseBody(body *GetGrpsioMailingListResponseBody) (err error) {
	if body.UID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.uid", *body.UID, goa.FormatUUID))
	}
	if body.GroupName != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.group_name", *body.GroupName, "^[a-zA-Z0-9][a-zA-Z0-9_-]*[a-zA-Z0-9]$"))
	}
	if body.GroupName != nil {
		if utf8.RuneCountInString(*body.GroupName) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.group_name", *body.GroupName, utf8.RuneCountInString(*body.GroupName), 3, true))
		}
	}
	if body.GroupName != nil {
		if utf8.RuneCountInString(*body.GroupName) > 34 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.group_name", *body.GroupName, utf8.RuneCountInString(*body.GroupName), 34, false))
		}
	}
	if body.Type != nil {
		if !(*body.Type == "announcement" || *body.Type == "discussion_moderated" || *body.Type == "discussion_open") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", *body.Type, []any{"announcement", "discussion_moderated", "discussion_open"}))
		}
	}
	if body.CommitteeUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.committee_uid", *body.CommitteeUID, goa.FormatUUID))
	}
	for _, e := range body.CommitteeFilters {
		if !(e == "Voting Rep" || e == "Alternate Voting Rep" || e == "Observer" || e == "Emeritus" || e == "None") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.committee_filters[*]", e, []any{"Voting Rep", "Alternate Voting Rep", "Observer", "Emeritus", "None"}))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) < 11 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 11, true))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 500 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 500, false))
		}
	}
	if body.Title != nil {
		if utf8.RuneCountInString(*body.Title) < 5 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.title", *body.Title, utf8.RuneCountInString(*body.Title), 5, true))
		}
	}
	if body.Title != nil {
		if utf8.RuneCountInString(*body.Title) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.title", *body.Title, utf8.RuneCountInString(*body.Title), 100, false))
		}
	}
	if body.SubjectTag != nil {
		if utf8.RuneCountInString(*body.SubjectTag) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.subject_tag", *body.SubjectTag, utf8.RuneCountInString(*body.SubjectTag), 50, false))
		}
	}
	if body.ServiceUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.service_uid", *body.ServiceUID, goa.FormatUUID))
	}
	if body.ProjectUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.project_uid", *body.ProjectUID, goa.FormatUUID))
	}
	if body.ProjectSlug != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.project_slug", *body.ProjectSlug, goa.FormatRegexp))
	}
	if body.ProjectSlug != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.project_slug", *body.ProjectSlug, "^[a-z][a-z0-9_\\-]*[a-z0-9]$"))
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	return
}

// ValidateUpdateGrpsioMailingListResponseBody runs the validations defined on
// Update-Grpsio-Mailing-ListResponseBody
func ValidateUpdateGrpsioMailingListResponseBody(body *UpdateGrpsioMailingListResponseBody) (err error) {
	if body.UID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.uid", *body.UID, goa.FormatUUID))
	}
	if body.GroupName != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.group_name", *body.GroupName, "^[a-zA-Z0-9][a-zA-Z0-9_-]*[a-zA-Z0-9]$"))
	}
	if body.GroupName != nil {
		if utf8.RuneCountInString(*body.GroupName) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.group_name", *body.GroupName, utf8.RuneCountInString(*body.GroupName), 3, true))
		}
	}
	if body.GroupName != nil {
		if utf8.RuneCountInString(*body.GroupName) > 34 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.group_name", *body.GroupName, utf8.RuneCountInString(*body.GroupName), 34, false))
		}
	}
	if body.Type != nil {
		if !(*body.Type == "announcement" || *body.Type == "discussion_moderated" || *body.Type == "discussion_open") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", *body.Type, []any{"announcement", "discussion_moderated", "discussion_open"}))
		}
	}
	if body.CommitteeUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.committee_uid", *body.CommitteeUID, goa.FormatUUID))
	}
	for _, e := range body.CommitteeFilters {
		if !(e == "Voting Rep" || e == "Alternate Voting Rep" || e == "Observer" || e == "Emeritus" || e == "None") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.committee_filters[*]", e, []any{"Voting Rep", "Alternate Voting Rep", "Observer", "Emeritus", "None"}))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) < 11 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 11, true))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 500 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 500, false))
		}
	}
	if body.Title != nil {
		if utf8.RuneCountInString(*body.Title) < 5 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.title", *body.Title, utf8.RuneCountInString(*body.Title), 5, true))
		}
	}
	if body.Title != nil {
		if utf8.RuneCountInString(*body.Title) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.title", *body.Title, utf8.RuneCountInString(*body.Title), 100, false))
		}
	}
	if body.SubjectTag != nil {
		if utf8.RuneCountInString(*body.SubjectTag) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.subject_tag", *body.SubjectTag, utf8.RuneCountInString(*body.SubjectTag), 50, false))
		}
	}
	if body.ServiceUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.service_uid", *body.ServiceUID, goa.FormatUUID))
	}
	if body.ProjectUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.project_uid", *body.ProjectUID, goa.FormatUUID))
	}
	if body.ProjectSlug != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.project_slug", *body.ProjectSlug, goa.FormatRegexp))
	}
	if body.ProjectSlug != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.project_slug", *body.ProjectSlug, "^[a-z][a-z0-9_\\-]*[a-z0-9]$"))
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	return
}

// ValidateCreateGrpsioMailingListMemberResponseBody runs the validations
// defined on Create-Grpsio-Mailing-List-MemberResponseBody
func ValidateCreateGrpsioMailingListMemberResponseBody(body *CreateGrpsioMailingListMemberResponseBody) (err error) {
	if body.UID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uid", "body"))
	}
	if body.MailingListUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("mailing_list_uid", "body"))
	}
	if body.FirstName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("first_name", "body"))
	}
	if body.LastName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("last_name", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.MemberType == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("member_type", "body"))
	}
	if body.DeliveryMode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("delivery_mode", "body"))
	}
	if body.ModStatus == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("mod_status", "body"))
	}
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_at", "body"))
	}
	if body.UID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.uid", *body.UID, goa.FormatUUID))
	}
	if body.MailingListUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.mailing_list_uid", *body.MailingListUID, goa.FormatUUID))
	}
	if body.Username != nil {
		if utf8.RuneCountInString(*body.Username) > 255 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.username", *body.Username, utf8.RuneCountInString(*body.Username), 255, false))
		}
	}
	if body.FirstName != nil {
		if utf8.RuneCountInString(*body.FirstName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.first_name", *body.FirstName, utf8.RuneCountInString(*body.FirstName), 1, true))
		}
	}
	if body.FirstName != nil {
		if utf8.RuneCountInString(*body.FirstName) > 255 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.first_name", *body.FirstName, utf8.RuneCountInString(*body.FirstName), 255, false))
		}
	}
	if body.LastName != nil {
		if utf8.RuneCountInString(*body.LastName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.last_name", *body.LastName, utf8.RuneCountInString(*body.LastName), 1, true))
		}
	}
	if body.LastName != nil {
		if utf8.RuneCountInString(*body.LastName) > 255 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.last_name", *body.LastName, utf8.RuneCountInString(*body.LastName), 255, false))
		}
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	if body.Organization != nil {
		if utf8.RuneCountInString(*body.Organization) > 255 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.organization", *body.Organization, utf8.RuneCountInString(*body.Organization), 255, false))
		}
	}
	if body.JobTitle != nil {
		if utf8.RuneCountInString(*body.JobTitle) > 255 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.job_title", *body.JobTitle, utf8.RuneCountInString(*body.JobTitle), 255, false))
		}
	}
	if body.MemberType != nil {
		if !(*body.MemberType == "committee" || *body.MemberType == "direct") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.member_type", *body.MemberType, []any{"committee", "direct"}))
		}
	}
	if body.DeliveryMode != nil {
		if !(*body.DeliveryMode == "normal" || *body.DeliveryMode == "digest" || *body.DeliveryMode == "none") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.delivery_mode", *body.DeliveryMode, []any{"normal", "digest", "none"}))
		}
	}
	if body.ModStatus != nil {
		if !(*body.ModStatus == "none" || *body.ModStatus == "moderator" || *body.ModStatus == "owner") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.mod_status", *body.ModStatus, []any{"none", "moderator", "owner"}))
		}
	}
	if body.LastReviewedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.last_reviewed_at", *body.LastReviewedAt, goa.FormatDateTime))
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	return
}

// ValidateGetGrpsioMailingListMemberResponseBody runs the validations defined
// on Get-Grpsio-Mailing-List-MemberResponseBody
func ValidateGetGrpsioMailingListMemberResponseBody(body *GetGrpsioMailingListMemberResponseBody) (err error) {
	if body.UID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.uid", *body.UID, goa.FormatUUID))
	}
	if body.MailingListUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.mailing_list_uid", *body.MailingListUID, goa.FormatUUID))
	}
	if body.Username != nil {
		if utf8.RuneCountInString(*body.Username) > 255 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.username", *body.Username, utf8.RuneCountInString(*body.Username), 255, false))
		}
	}
	if body.FirstName != nil {
		if utf8.RuneCountInString(*body.FirstName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.first_name", *body.FirstName, utf8.RuneCountInString(*body.FirstName), 1, true))
		}
	}
	if body.FirstName != nil {
		if utf8.RuneCountInString(*body.FirstName) > 255 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.first_name", *body.FirstName, utf8.RuneCountInString(*body.FirstName), 255, false))
		}
	}
	if body.LastName != nil {
		if utf8.RuneCountInString(*body.LastName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.last_name", *body.LastName, utf8.RuneCountInString(*body.LastName), 1, true))
		}
	}
	if body.LastName != nil {
		if utf8.RuneCountInString(*body.LastName) > 255 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.last_name", *body.LastName, utf8.RuneCountInString(*body.LastName), 255, false))
		}
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	if body.Organization != nil {
		if utf8.RuneCountInString(*body.Organization) > 255 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.organization", *body.Organization, utf8.RuneCountInString(*body.Organization), 255, false))
		}
	}
	if body.JobTitle != nil {
		if utf8.RuneCountInString(*body.JobTitle) > 255 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.job_title", *body.JobTitle, utf8.RuneCountInString(*body.JobTitle), 255, false))
		}
	}
	if body.MemberType != nil {
		if !(*body.MemberType == "committee" || *body.MemberType == "direct") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.member_type", *body.MemberType, []any{"committee", "direct"}))
		}
	}
	if body.DeliveryMode != nil {
		if !(*body.DeliveryMode == "normal" || *body.DeliveryMode == "digest" || *body.DeliveryMode == "none") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.delivery_mode", *body.DeliveryMode, []any{"normal", "digest", "none"}))
		}
	}
	if body.ModStatus != nil {
		if !(*body.ModStatus == "none" || *body.ModStatus == "moderator" || *body.ModStatus == "owner") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.mod_status", *body.ModStatus, []any{"none", "moderator", "owner"}))
		}
	}
	if body.LastReviewedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.last_reviewed_at", *body.LastReviewedAt, goa.FormatDateTime))
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	return
}

// ValidateUpdateGrpsioMailingListMemberResponseBody runs the validations
// defined on Update-Grpsio-Mailing-List-MemberResponseBody
func ValidateUpdateGrpsioMailingListMemberResponseBody(body *UpdateGrpsioMailingListMemberResponseBody) (err error) {
	if body.UID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.uid", *body.UID, goa.FormatUUID))
	}
	if body.MailingListUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.mailing_list_uid", *body.MailingListUID, goa.FormatUUID))
	}
	if body.Username != nil {
		if utf8.RuneCountInString(*body.Username) > 255 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.username", *body.Username, utf8.RuneCountInString(*body.Username), 255, false))
		}
	}
	if body.FirstName != nil {
		if utf8.RuneCountInString(*body.FirstName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.first_name", *body.FirstName, utf8.RuneCountInString(*body.FirstName), 1, true))
		}
	}
	if body.FirstName != nil {
		if utf8.RuneCountInString(*body.FirstName) > 255 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.first_name", *body.FirstName, utf8.RuneCountInString(*body.FirstName), 255, false))
		}
	}
	if body.LastName != nil {
		if utf8.RuneCountInString(*body.LastName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.last_name", *body.LastName, utf8.RuneCountInString(*body.LastName), 1, true))
		}
	}
	if body.LastName != nil {
		if utf8.RuneCountInString(*body.LastName) > 255 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.last_name", *body.LastName, utf8.RuneCountInString(*body.LastName), 255, false))
		}
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	if body.Organization != nil {
		if utf8.RuneCountInString(*body.Organization) > 255 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.organization", *body.Organization, utf8.RuneCountInString(*body.Organization), 255, false))
		}
	}
	if body.JobTitle != nil {
		if utf8.RuneCountInString(*body.JobTitle) > 255 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.job_title", *body.JobTitle, utf8.RuneCountInString(*body.JobTitle), 255, false))
		}
	}
	if body.MemberType != nil {
		if !(*body.MemberType == "committee" || *body.MemberType == "direct") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.member_type", *body.MemberType, []any{"committee", "direct"}))
		}
	}
	if body.DeliveryMode != nil {
		if !(*body.DeliveryMode == "normal" || *body.DeliveryMode == "digest" || *body.DeliveryMode == "none") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.delivery_mode", *body.DeliveryMode, []any{"normal", "digest", "none"}))
		}
	}
	if body.ModStatus != nil {
		if !(*body.ModStatus == "none" || *body.ModStatus == "moderator" || *body.ModStatus == "owner") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.mod_status", *body.ModStatus, []any{"none", "moderator", "owner"}))
		}
	}
	if body.LastReviewedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.last_reviewed_at", *body.LastReviewedAt, goa.FormatDateTime))
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	return
}

// ValidateReadyzServiceUnavailableResponseBody runs the validations defined on
// readyz_ServiceUnavailable_response_body
func ValidateReadyzServiceUnavailableResponseBody(body *ReadyzServiceUnavailableResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateGrpsioServiceBadRequestResponseBody runs the validations
// defined on create-grpsio-service_BadRequest_response_body
func ValidateCreateGrpsioServiceBadRequestResponseBody(body *CreateGrpsioServiceBadRequestResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateGrpsioServiceConflictResponseBody runs the validations defined
// on create-grpsio-service_Conflict_response_body
func ValidateCreateGrpsioServiceConflictResponseBody(body *CreateGrpsioServiceConflictResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateGrpsioServiceInternalServerErrorResponseBody runs the
// validations defined on
// create-grpsio-service_InternalServerError_response_body
func ValidateCreateGrpsioServiceInternalServerErrorResponseBody(body *CreateGrpsioServiceInternalServerErrorResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateGrpsioServiceNotFoundResponseBody runs the validations defined
// on create-grpsio-service_NotFound_response_body
func ValidateCreateGrpsioServiceNotFoundResponseBody(body *CreateGrpsioServiceNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateGrpsioServiceServiceUnavailableResponseBody runs the
// validations defined on create-grpsio-service_ServiceUnavailable_response_body
func ValidateCreateGrpsioServiceServiceUnavailableResponseBody(body *CreateGrpsioServiceServiceUnavailableResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetGrpsioServiceBadRequestResponseBody runs the validations defined
// on get-grpsio-service_BadRequest_response_body
func ValidateGetGrpsioServiceBadRequestResponseBody(body *GetGrpsioServiceBadRequestResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetGrpsioServiceInternalServerErrorResponseBody runs the validations
// defined on get-grpsio-service_InternalServerError_response_body
func ValidateGetGrpsioServiceInternalServerErrorResponseBody(body *GetGrpsioServiceInternalServerErrorResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetGrpsioServiceNotFoundResponseBody runs the validations defined on
// get-grpsio-service_NotFound_response_body
func ValidateGetGrpsioServiceNotFoundResponseBody(body *GetGrpsioServiceNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetGrpsioServiceServiceUnavailableResponseBody runs the validations
// defined on get-grpsio-service_ServiceUnavailable_response_body
func ValidateGetGrpsioServiceServiceUnavailableResponseBody(body *GetGrpsioServiceServiceUnavailableResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateGrpsioServiceBadRequestResponseBody runs the validations
// defined on update-grpsio-service_BadRequest_response_body
func ValidateUpdateGrpsioServiceBadRequestResponseBody(body *UpdateGrpsioServiceBadRequestResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateGrpsioServiceConflictResponseBody runs the validations defined
// on update-grpsio-service_Conflict_response_body
func ValidateUpdateGrpsioServiceConflictResponseBody(body *UpdateGrpsioServiceConflictResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateGrpsioServiceInternalServerErrorResponseBody runs the
// validations defined on
// update-grpsio-service_InternalServerError_response_body
func ValidateUpdateGrpsioServiceInternalServerErrorResponseBody(body *UpdateGrpsioServiceInternalServerErrorResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateGrpsioServiceNotFoundResponseBody runs the validations defined
// on update-grpsio-service_NotFound_response_body
func ValidateUpdateGrpsioServiceNotFoundResponseBody(body *UpdateGrpsioServiceNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateGrpsioServiceServiceUnavailableResponseBody runs the
// validations defined on update-grpsio-service_ServiceUnavailable_response_body
func ValidateUpdateGrpsioServiceServiceUnavailableResponseBody(body *UpdateGrpsioServiceServiceUnavailableResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteGrpsioServiceBadRequestResponseBody runs the validations
// defined on delete-grpsio-service_BadRequest_response_body
func ValidateDeleteGrpsioServiceBadRequestResponseBody(body *DeleteGrpsioServiceBadRequestResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteGrpsioServiceConflictResponseBody runs the validations defined
// on delete-grpsio-service_Conflict_response_body
func ValidateDeleteGrpsioServiceConflictResponseBody(body *DeleteGrpsioServiceConflictResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteGrpsioServiceInternalServerErrorResponseBody runs the
// validations defined on
// delete-grpsio-service_InternalServerError_response_body
func ValidateDeleteGrpsioServiceInternalServerErrorResponseBody(body *DeleteGrpsioServiceInternalServerErrorResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteGrpsioServiceNotFoundResponseBody runs the validations defined
// on delete-grpsio-service_NotFound_response_body
func ValidateDeleteGrpsioServiceNotFoundResponseBody(body *DeleteGrpsioServiceNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteGrpsioServiceServiceUnavailableResponseBody runs the
// validations defined on delete-grpsio-service_ServiceUnavailable_response_body
func ValidateDeleteGrpsioServiceServiceUnavailableResponseBody(body *DeleteGrpsioServiceServiceUnavailableResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateGrpsioMailingListBadRequestResponseBody runs the validations
// defined on create-grpsio-mailing-list_BadRequest_response_body
func ValidateCreateGrpsioMailingListBadRequestResponseBody(body *CreateGrpsioMailingListBadRequestResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateGrpsioMailingListConflictResponseBody runs the validations
// defined on create-grpsio-mailing-list_Conflict_response_body
func ValidateCreateGrpsioMailingListConflictResponseBody(body *CreateGrpsioMailingListConflictResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateGrpsioMailingListInternalServerErrorResponseBody runs the
// validations defined on
// create-grpsio-mailing-list_InternalServerError_response_body
func ValidateCreateGrpsioMailingListInternalServerErrorResponseBody(body *CreateGrpsioMailingListInternalServerErrorResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateGrpsioMailingListNotFoundResponseBody runs the validations
// defined on create-grpsio-mailing-list_NotFound_response_body
func ValidateCreateGrpsioMailingListNotFoundResponseBody(body *CreateGrpsioMailingListNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateGrpsioMailingListServiceUnavailableResponseBody runs the
// validations defined on
// create-grpsio-mailing-list_ServiceUnavailable_response_body
func ValidateCreateGrpsioMailingListServiceUnavailableResponseBody(body *CreateGrpsioMailingListServiceUnavailableResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetGrpsioMailingListBadRequestResponseBody runs the validations
// defined on get-grpsio-mailing-list_BadRequest_response_body
func ValidateGetGrpsioMailingListBadRequestResponseBody(body *GetGrpsioMailingListBadRequestResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetGrpsioMailingListInternalServerErrorResponseBody runs the
// validations defined on
// get-grpsio-mailing-list_InternalServerError_response_body
func ValidateGetGrpsioMailingListInternalServerErrorResponseBody(body *GetGrpsioMailingListInternalServerErrorResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetGrpsioMailingListNotFoundResponseBody runs the validations
// defined on get-grpsio-mailing-list_NotFound_response_body
func ValidateGetGrpsioMailingListNotFoundResponseBody(body *GetGrpsioMailingListNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetGrpsioMailingListServiceUnavailableResponseBody runs the
// validations defined on
// get-grpsio-mailing-list_ServiceUnavailable_response_body
func ValidateGetGrpsioMailingListServiceUnavailableResponseBody(body *GetGrpsioMailingListServiceUnavailableResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateGrpsioMailingListBadRequestResponseBody runs the validations
// defined on update-grpsio-mailing-list_BadRequest_response_body
func ValidateUpdateGrpsioMailingListBadRequestResponseBody(body *UpdateGrpsioMailingListBadRequestResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateGrpsioMailingListConflictResponseBody runs the validations
// defined on update-grpsio-mailing-list_Conflict_response_body
func ValidateUpdateGrpsioMailingListConflictResponseBody(body *UpdateGrpsioMailingListConflictResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateGrpsioMailingListInternalServerErrorResponseBody runs the
// validations defined on
// update-grpsio-mailing-list_InternalServerError_response_body
func ValidateUpdateGrpsioMailingListInternalServerErrorResponseBody(body *UpdateGrpsioMailingListInternalServerErrorResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateGrpsioMailingListNotFoundResponseBody runs the validations
// defined on update-grpsio-mailing-list_NotFound_response_body
func ValidateUpdateGrpsioMailingListNotFoundResponseBody(body *UpdateGrpsioMailingListNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateGrpsioMailingListServiceUnavailableResponseBody runs the
// validations defined on
// update-grpsio-mailing-list_ServiceUnavailable_response_body
func ValidateUpdateGrpsioMailingListServiceUnavailableResponseBody(body *UpdateGrpsioMailingListServiceUnavailableResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteGrpsioMailingListBadRequestResponseBody runs the validations
// defined on delete-grpsio-mailing-list_BadRequest_response_body
func ValidateDeleteGrpsioMailingListBadRequestResponseBody(body *DeleteGrpsioMailingListBadRequestResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteGrpsioMailingListConflictResponseBody runs the validations
// defined on delete-grpsio-mailing-list_Conflict_response_body
func ValidateDeleteGrpsioMailingListConflictResponseBody(body *DeleteGrpsioMailingListConflictResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteGrpsioMailingListInternalServerErrorResponseBody runs the
// validations defined on
// delete-grpsio-mailing-list_InternalServerError_response_body
func ValidateDeleteGrpsioMailingListInternalServerErrorResponseBody(body *DeleteGrpsioMailingListInternalServerErrorResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteGrpsioMailingListNotFoundResponseBody runs the validations
// defined on delete-grpsio-mailing-list_NotFound_response_body
func ValidateDeleteGrpsioMailingListNotFoundResponseBody(body *DeleteGrpsioMailingListNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteGrpsioMailingListServiceUnavailableResponseBody runs the
// validations defined on
// delete-grpsio-mailing-list_ServiceUnavailable_response_body
func ValidateDeleteGrpsioMailingListServiceUnavailableResponseBody(body *DeleteGrpsioMailingListServiceUnavailableResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateGrpsioMailingListMemberBadRequestResponseBody runs the
// validations defined on
// create-grpsio-mailing-list-member_BadRequest_response_body
func ValidateCreateGrpsioMailingListMemberBadRequestResponseBody(body *CreateGrpsioMailingListMemberBadRequestResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateGrpsioMailingListMemberConflictResponseBody runs the
// validations defined on
// create-grpsio-mailing-list-member_Conflict_response_body
func ValidateCreateGrpsioMailingListMemberConflictResponseBody(body *CreateGrpsioMailingListMemberConflictResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateGrpsioMailingListMemberInternalServerErrorResponseBody runs
// the validations defined on
// create-grpsio-mailing-list-member_InternalServerError_response_body
func ValidateCreateGrpsioMailingListMemberInternalServerErrorResponseBody(body *CreateGrpsioMailingListMemberInternalServerErrorResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateGrpsioMailingListMemberNotFoundResponseBody runs the
// validations defined on
// create-grpsio-mailing-list-member_NotFound_response_body
func ValidateCreateGrpsioMailingListMemberNotFoundResponseBody(body *CreateGrpsioMailingListMemberNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateGrpsioMailingListMemberServiceUnavailableResponseBody runs the
// validations defined on
// create-grpsio-mailing-list-member_ServiceUnavailable_response_body
func ValidateCreateGrpsioMailingListMemberServiceUnavailableResponseBody(body *CreateGrpsioMailingListMemberServiceUnavailableResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetGrpsioMailingListMemberBadRequestResponseBody runs the
// validations defined on
// get-grpsio-mailing-list-member_BadRequest_response_body
func ValidateGetGrpsioMailingListMemberBadRequestResponseBody(body *GetGrpsioMailingListMemberBadRequestResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetGrpsioMailingListMemberInternalServerErrorResponseBody runs the
// validations defined on
// get-grpsio-mailing-list-member_InternalServerError_response_body
func ValidateGetGrpsioMailingListMemberInternalServerErrorResponseBody(body *GetGrpsioMailingListMemberInternalServerErrorResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetGrpsioMailingListMemberNotFoundResponseBody runs the validations
// defined on get-grpsio-mailing-list-member_NotFound_response_body
func ValidateGetGrpsioMailingListMemberNotFoundResponseBody(body *GetGrpsioMailingListMemberNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetGrpsioMailingListMemberServiceUnavailableResponseBody runs the
// validations defined on
// get-grpsio-mailing-list-member_ServiceUnavailable_response_body
func ValidateGetGrpsioMailingListMemberServiceUnavailableResponseBody(body *GetGrpsioMailingListMemberServiceUnavailableResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateGrpsioMailingListMemberBadRequestResponseBody runs the
// validations defined on
// update-grpsio-mailing-list-member_BadRequest_response_body
func ValidateUpdateGrpsioMailingListMemberBadRequestResponseBody(body *UpdateGrpsioMailingListMemberBadRequestResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateGrpsioMailingListMemberConflictResponseBody runs the
// validations defined on
// update-grpsio-mailing-list-member_Conflict_response_body
func ValidateUpdateGrpsioMailingListMemberConflictResponseBody(body *UpdateGrpsioMailingListMemberConflictResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateGrpsioMailingListMemberInternalServerErrorResponseBody runs
// the validations defined on
// update-grpsio-mailing-list-member_InternalServerError_response_body
func ValidateUpdateGrpsioMailingListMemberInternalServerErrorResponseBody(body *UpdateGrpsioMailingListMemberInternalServerErrorResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateGrpsioMailingListMemberNotFoundResponseBody runs the
// validations defined on
// update-grpsio-mailing-list-member_NotFound_response_body
func ValidateUpdateGrpsioMailingListMemberNotFoundResponseBody(body *UpdateGrpsioMailingListMemberNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateGrpsioMailingListMemberServiceUnavailableResponseBody runs the
// validations defined on
// update-grpsio-mailing-list-member_ServiceUnavailable_response_body
func ValidateUpdateGrpsioMailingListMemberServiceUnavailableResponseBody(body *UpdateGrpsioMailingListMemberServiceUnavailableResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteGrpsioMailingListMemberBadRequestResponseBody runs the
// validations defined on
// delete-grpsio-mailing-list-member_BadRequest_response_body
func ValidateDeleteGrpsioMailingListMemberBadRequestResponseBody(body *DeleteGrpsioMailingListMemberBadRequestResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteGrpsioMailingListMemberConflictResponseBody runs the
// validations defined on
// delete-grpsio-mailing-list-member_Conflict_response_body
func ValidateDeleteGrpsioMailingListMemberConflictResponseBody(body *DeleteGrpsioMailingListMemberConflictResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteGrpsioMailingListMemberInternalServerErrorResponseBody runs
// the validations defined on
// delete-grpsio-mailing-list-member_InternalServerError_response_body
func ValidateDeleteGrpsioMailingListMemberInternalServerErrorResponseBody(body *DeleteGrpsioMailingListMemberInternalServerErrorResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteGrpsioMailingListMemberNotFoundResponseBody runs the
// validations defined on
// delete-grpsio-mailing-list-member_NotFound_response_body
func ValidateDeleteGrpsioMailingListMemberNotFoundResponseBody(body *DeleteGrpsioMailingListMemberNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteGrpsioMailingListMemberServiceUnavailableResponseBody runs the
// validations defined on
// delete-grpsio-mailing-list-member_ServiceUnavailable_response_body
func ValidateDeleteGrpsioMailingListMemberServiceUnavailableResponseBody(body *DeleteGrpsioMailingListMemberServiceUnavailableResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGroupsioWebhookBadRequestResponseBody runs the validations defined
// on groupsio-webhook_BadRequest_response_body
func ValidateGroupsioWebhookBadRequestResponseBody(body *GroupsioWebhookBadRequestResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGroupsioWebhookUnauthorizedResponseBody runs the validations defined
// on groupsio-webhook_Unauthorized_response_body
func ValidateGroupsioWebhookUnauthorizedResponseBody(body *GroupsioWebhookUnauthorizedResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGrpsIoServiceWithReadonlyAttributesResponseBody runs the validations
// defined on grps-io-service-with-readonly-attributesResponseBody
func ValidateGrpsIoServiceWithReadonlyAttributesResponseBody(body *GrpsIoServiceWithReadonlyAttributesResponseBody) (err error) {
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.ProjectUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("project_uid", "body"))
	}
	if body.UID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.uid", *body.UID, goa.FormatUUID))
	}
	if body.Type != nil {
		if !(*body.Type == "primary" || *body.Type == "formation" || *body.Type == "shared") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", *body.Type, []any{"primary", "formation", "shared"}))
		}
	}
	for _, e := range body.GlobalOwners {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.global_owners[*]", e, goa.FormatEmail))
	}
	if body.ProjectSlug != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.project_slug", *body.ProjectSlug, goa.FormatRegexp))
	}
	if body.ProjectSlug != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.project_slug", *body.ProjectSlug, "^[a-z][a-z0-9_\\-]*[a-z0-9]$"))
	}
	if body.ProjectUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.project_uid", *body.ProjectUID, goa.FormatUUID))
	}
	if body.URL != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.url", *body.URL, goa.FormatURI))
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	if body.LastReviewedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.last_reviewed_at", *body.LastReviewedAt, goa.FormatDateTime))
	}
	if body.LastAuditedTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.last_audited_time", *body.LastAuditedTime, goa.FormatDateTime))
	}
	return
}

// ValidateGrpsIoMailingListWithReadonlyAttributesResponseBody runs the
// validations defined on
// grps-io-mailing-list-with-readonly-attributesResponseBody
func ValidateGrpsIoMailingListWithReadonlyAttributesResponseBody(body *GrpsIoMailingListWithReadonlyAttributesResponseBody) (err error) {
	if body.UID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.uid", *body.UID, goa.FormatUUID))
	}
	if body.GroupName != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.group_name", *body.GroupName, "^[a-zA-Z0-9][a-zA-Z0-9_-]*[a-zA-Z0-9]$"))
	}
	if body.GroupName != nil {
		if utf8.RuneCountInString(*body.GroupName) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.group_name", *body.GroupName, utf8.RuneCountInString(*body.GroupName), 3, true))
		}
	}
	if body.GroupName != nil {
		if utf8.RuneCountInString(*body.GroupName) > 34 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.group_name", *body.GroupName, utf8.RuneCountInString(*body.GroupName), 34, false))
		}
	}
	if body.Type != nil {
		if !(*body.Type == "announcement" || *body.Type == "discussion_moderated" || *body.Type == "discussion_open") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", *body.Type, []any{"announcement", "discussion_moderated", "discussion_open"}))
		}
	}
	if body.CommitteeUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.committee_uid", *body.CommitteeUID, goa.FormatUUID))
	}
	for _, e := range body.CommitteeFilters {
		if !(e == "Voting Rep" || e == "Alternate Voting Rep" || e == "Observer" || e == "Emeritus" || e == "None") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.committee_filters[*]", e, []any{"Voting Rep", "Alternate Voting Rep", "Observer", "Emeritus", "None"}))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) < 11 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 11, true))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 500 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 500, false))
		}
	}
	if body.Title != nil {
		if utf8.RuneCountInString(*body.Title) < 5 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.title", *body.Title, utf8.RuneCountInString(*body.Title), 5, true))
		}
	}
	if body.Title != nil {
		if utf8.RuneCountInString(*body.Title) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.title", *body.Title, utf8.RuneCountInString(*body.Title), 100, false))
		}
	}
	if body.SubjectTag != nil {
		if utf8.RuneCountInString(*body.SubjectTag) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.subject_tag", *body.SubjectTag, utf8.RuneCountInString(*body.SubjectTag), 50, false))
		}
	}
	if body.ServiceUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.service_uid", *body.ServiceUID, goa.FormatUUID))
	}
	if body.ProjectUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.project_uid", *body.ProjectUID, goa.FormatUUID))
	}
	if body.ProjectSlug != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.project_slug", *body.ProjectSlug, goa.FormatRegexp))
	}
	if body.ProjectSlug != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.project_slug", *body.ProjectSlug, "^[a-z][a-z0-9_\\-]*[a-z0-9]$"))
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	return
}

// ValidateGrpsIoMemberWithReadonlyAttributesResponseBody runs the validations
// defined on grps-io-member-with-readonly-attributesResponseBody
func ValidateGrpsIoMemberWithReadonlyAttributesResponseBody(body *GrpsIoMemberWithReadonlyAttributesResponseBody) (err error) {
	if body.UID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.uid", *body.UID, goa.FormatUUID))
	}
	if body.MailingListUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.mailing_list_uid", *body.MailingListUID, goa.FormatUUID))
	}
	if body.Username != nil {
		if utf8.RuneCountInString(*body.Username) > 255 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.username", *body.Username, utf8.RuneCountInString(*body.Username), 255, false))
		}
	}
	if body.FirstName != nil {
		if utf8.RuneCountInString(*body.FirstName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.first_name", *body.FirstName, utf8.RuneCountInString(*body.FirstName), 1, true))
		}
	}
	if body.FirstName != nil {
		if utf8.RuneCountInString(*body.FirstName) > 255 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.first_name", *body.FirstName, utf8.RuneCountInString(*body.FirstName), 255, false))
		}
	}
	if body.LastName != nil {
		if utf8.RuneCountInString(*body.LastName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.last_name", *body.LastName, utf8.RuneCountInString(*body.LastName), 1, true))
		}
	}
	if body.LastName != nil {
		if utf8.RuneCountInString(*body.LastName) > 255 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.last_name", *body.LastName, utf8.RuneCountInString(*body.LastName), 255, false))
		}
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	if body.Organization != nil {
		if utf8.RuneCountInString(*body.Organization) > 255 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.organization", *body.Organization, utf8.RuneCountInString(*body.Organization), 255, false))
		}
	}
	if body.JobTitle != nil {
		if utf8.RuneCountInString(*body.JobTitle) > 255 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.job_title", *body.JobTitle, utf8.RuneCountInString(*body.JobTitle), 255, false))
		}
	}
	if body.MemberType != nil {
		if !(*body.MemberType == "committee" || *body.MemberType == "direct") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.member_type", *body.MemberType, []any{"committee", "direct"}))
		}
	}
	if body.DeliveryMode != nil {
		if !(*body.DeliveryMode == "normal" || *body.DeliveryMode == "digest" || *body.DeliveryMode == "none") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.delivery_mode", *body.DeliveryMode, []any{"normal", "digest", "none"}))
		}
	}
	if body.ModStatus != nil {
		if !(*body.ModStatus == "none" || *body.ModStatus == "moderator" || *body.ModStatus == "owner") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.mod_status", *body.ModStatus, []any{"none", "moderator", "owner"}))
		}
	}
	if body.LastReviewedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.last_reviewed_at", *body.LastReviewedAt, goa.FormatDateTime))
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	return
}
