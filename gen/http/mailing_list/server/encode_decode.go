// Code generated by goa v3.21.5, DO NOT EDIT.
//
// mailing-list HTTP server encoders and decoders
//
// Command:
// $ goa gen
// github.com/linuxfoundation/lfx-v2-mailing-list-service/cmd/mailing-list-api/design

package server

import (
	"context"
	"errors"
	"io"
	"net/http"
	"strings"

	mailinglist "github.com/linuxfoundation/lfx-v2-mailing-list-service/gen/mailing_list"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeLivezResponse returns an encoder for responses returned by the
// mailing-list livez endpoint.
func EncodeLivezResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.([]byte)
		ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "text/plain")
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeReadyzResponse returns an encoder for responses returned by the
// mailing-list readyz endpoint.
func EncodeReadyzResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.([]byte)
		ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "text/plain")
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeReadyzError returns an encoder for errors returned by the readyz
// mailing-list endpoint.
func EncodeReadyzError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "ServiceUnavailable":
			var res *mailinglist.ServiceUnavailableError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewReadyzServiceUnavailableResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusServiceUnavailable)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeCreateGrpsioServiceResponse returns an encoder for responses returned
// by the mailing-list create-grpsio-service endpoint.
func EncodeCreateGrpsioServiceResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*mailinglist.ServiceFull)
		enc := encoder(ctx, w)
		body := NewCreateGrpsioServiceResponseBody(res)
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeCreateGrpsioServiceRequest returns a decoder for requests sent to the
// mailing-list create-grpsio-service endpoint.
func DecodeCreateGrpsioServiceRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body CreateGrpsioServiceRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if errors.Is(err, io.EOF) {
				return nil, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				return nil, gerr
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreateGrpsioServiceRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			version     string
			bearerToken *string
		)
		version = r.URL.Query().Get("v")
		if version == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("version", "query string"))
		}
		if !(version == "1") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", version, []any{"1"}))
		}
		bearerTokenRaw := r.Header.Get("Authorization")
		if bearerTokenRaw != "" {
			bearerToken = &bearerTokenRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewCreateGrpsioServicePayload(&body, version, bearerToken)
		if payload.BearerToken != nil {
			if strings.Contains(*payload.BearerToken, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.BearerToken, " ", 2)[1]
				payload.BearerToken = &cred
			}
		}

		return payload, nil
	}
}

// EncodeCreateGrpsioServiceError returns an encoder for errors returned by the
// create-grpsio-service mailing-list endpoint.
func EncodeCreateGrpsioServiceError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "BadRequest":
			var res *mailinglist.BadRequestError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewCreateGrpsioServiceBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "Conflict":
			var res *mailinglist.ConflictError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewCreateGrpsioServiceConflictResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusConflict)
			return enc.Encode(body)
		case "InternalServerError":
			var res *mailinglist.InternalServerError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewCreateGrpsioServiceInternalServerErrorResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "NotFound":
			var res *mailinglist.NotFoundError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewCreateGrpsioServiceNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "ServiceUnavailable":
			var res *mailinglist.ServiceUnavailableError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewCreateGrpsioServiceServiceUnavailableResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusServiceUnavailable)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeGetGrpsioServiceResponse returns an encoder for responses returned by
// the mailing-list get-grpsio-service endpoint.
func EncodeGetGrpsioServiceResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*mailinglist.GetGrpsioServiceResult)
		enc := encoder(ctx, w)
		body := NewGetGrpsioServiceResponseBody(res)
		if res.Etag != nil {
			w.Header().Set("Etag", *res.Etag)
		}
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetGrpsioServiceRequest returns a decoder for requests sent to the
// mailing-list get-grpsio-service endpoint.
func DecodeGetGrpsioServiceRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			uid         string
			version     *string
			bearerToken *string
			err         error

			params = mux.Vars(r)
		)
		uid = params["uid"]
		err = goa.MergeErrors(err, goa.ValidateFormat("uid", uid, goa.FormatUUID))
		versionRaw := r.URL.Query().Get("v")
		if versionRaw != "" {
			version = &versionRaw
		}
		if version != nil {
			if !(*version == "1") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", *version, []any{"1"}))
			}
		}
		bearerTokenRaw := r.Header.Get("Authorization")
		if bearerTokenRaw != "" {
			bearerToken = &bearerTokenRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetGrpsioServicePayload(uid, version, bearerToken)
		if payload.BearerToken != nil {
			if strings.Contains(*payload.BearerToken, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.BearerToken, " ", 2)[1]
				payload.BearerToken = &cred
			}
		}

		return payload, nil
	}
}

// EncodeGetGrpsioServiceError returns an encoder for errors returned by the
// get-grpsio-service mailing-list endpoint.
func EncodeGetGrpsioServiceError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "BadRequest":
			var res *mailinglist.BadRequestError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewGetGrpsioServiceBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "InternalServerError":
			var res *mailinglist.InternalServerError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewGetGrpsioServiceInternalServerErrorResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "NotFound":
			var res *mailinglist.NotFoundError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewGetGrpsioServiceNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "ServiceUnavailable":
			var res *mailinglist.ServiceUnavailableError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewGetGrpsioServiceServiceUnavailableResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusServiceUnavailable)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeUpdateGrpsioServiceResponse returns an encoder for responses returned
// by the mailing-list update-grpsio-service endpoint.
func EncodeUpdateGrpsioServiceResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*mailinglist.ServiceWithReadonlyAttributes)
		enc := encoder(ctx, w)
		body := NewUpdateGrpsioServiceResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeUpdateGrpsioServiceRequest returns a decoder for requests sent to the
// mailing-list update-grpsio-service endpoint.
func DecodeUpdateGrpsioServiceRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body UpdateGrpsioServiceRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if errors.Is(err, io.EOF) {
				return nil, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				return nil, gerr
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateUpdateGrpsioServiceRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			uid         string
			version     string
			bearerToken *string
			ifMatch     *string

			params = mux.Vars(r)
		)
		uid = params["uid"]
		err = goa.MergeErrors(err, goa.ValidateFormat("uid", uid, goa.FormatUUID))
		version = r.URL.Query().Get("v")
		if version == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("version", "query string"))
		}
		if !(version == "1") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", version, []any{"1"}))
		}
		bearerTokenRaw := r.Header.Get("Authorization")
		if bearerTokenRaw != "" {
			bearerToken = &bearerTokenRaw
		}
		ifMatchRaw := r.Header.Get("If-Match")
		if ifMatchRaw != "" {
			ifMatch = &ifMatchRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewUpdateGrpsioServicePayload(&body, uid, version, bearerToken, ifMatch)
		if payload.BearerToken != nil {
			if strings.Contains(*payload.BearerToken, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.BearerToken, " ", 2)[1]
				payload.BearerToken = &cred
			}
		}

		return payload, nil
	}
}

// EncodeUpdateGrpsioServiceError returns an encoder for errors returned by the
// update-grpsio-service mailing-list endpoint.
func EncodeUpdateGrpsioServiceError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "BadRequest":
			var res *mailinglist.BadRequestError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewUpdateGrpsioServiceBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "Conflict":
			var res *mailinglist.ConflictError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewUpdateGrpsioServiceConflictResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusConflict)
			return enc.Encode(body)
		case "InternalServerError":
			var res *mailinglist.InternalServerError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewUpdateGrpsioServiceInternalServerErrorResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "NotFound":
			var res *mailinglist.NotFoundError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewUpdateGrpsioServiceNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "ServiceUnavailable":
			var res *mailinglist.ServiceUnavailableError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewUpdateGrpsioServiceServiceUnavailableResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusServiceUnavailable)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeDeleteGrpsioServiceResponse returns an encoder for responses returned
// by the mailing-list delete-grpsio-service endpoint.
func EncodeDeleteGrpsioServiceResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		w.WriteHeader(http.StatusNoContent)
		return nil
	}
}

// DecodeDeleteGrpsioServiceRequest returns a decoder for requests sent to the
// mailing-list delete-grpsio-service endpoint.
func DecodeDeleteGrpsioServiceRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			uid         string
			version     *string
			bearerToken *string
			ifMatch     *string
			err         error

			params = mux.Vars(r)
		)
		uid = params["uid"]
		err = goa.MergeErrors(err, goa.ValidateFormat("uid", uid, goa.FormatUUID))
		versionRaw := r.URL.Query().Get("v")
		if versionRaw != "" {
			version = &versionRaw
		}
		if version != nil {
			if !(*version == "1") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", *version, []any{"1"}))
			}
		}
		bearerTokenRaw := r.Header.Get("Authorization")
		if bearerTokenRaw != "" {
			bearerToken = &bearerTokenRaw
		}
		ifMatchRaw := r.Header.Get("If-Match")
		if ifMatchRaw != "" {
			ifMatch = &ifMatchRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewDeleteGrpsioServicePayload(uid, version, bearerToken, ifMatch)
		if payload.BearerToken != nil {
			if strings.Contains(*payload.BearerToken, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.BearerToken, " ", 2)[1]
				payload.BearerToken = &cred
			}
		}

		return payload, nil
	}
}

// EncodeDeleteGrpsioServiceError returns an encoder for errors returned by the
// delete-grpsio-service mailing-list endpoint.
func EncodeDeleteGrpsioServiceError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "BadRequest":
			var res *mailinglist.BadRequestError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewDeleteGrpsioServiceBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "Conflict":
			var res *mailinglist.ConflictError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewDeleteGrpsioServiceConflictResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusConflict)
			return enc.Encode(body)
		case "InternalServerError":
			var res *mailinglist.InternalServerError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewDeleteGrpsioServiceInternalServerErrorResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "NotFound":
			var res *mailinglist.NotFoundError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewDeleteGrpsioServiceNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "ServiceUnavailable":
			var res *mailinglist.ServiceUnavailableError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewDeleteGrpsioServiceServiceUnavailableResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusServiceUnavailable)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeCreateGrpsioMailingListResponse returns an encoder for responses
// returned by the mailing-list create-grpsio-mailing-list endpoint.
func EncodeCreateGrpsioMailingListResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*mailinglist.MailingListFull)
		enc := encoder(ctx, w)
		body := NewCreateGrpsioMailingListResponseBody(res)
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeCreateGrpsioMailingListRequest returns a decoder for requests sent to
// the mailing-list create-grpsio-mailing-list endpoint.
func DecodeCreateGrpsioMailingListRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body CreateGrpsioMailingListRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if errors.Is(err, io.EOF) {
				return nil, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				return nil, gerr
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreateGrpsioMailingListRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			version     string
			bearerToken *string
		)
		version = r.URL.Query().Get("v")
		if version == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("version", "query string"))
		}
		if !(version == "1") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", version, []any{"1"}))
		}
		bearerTokenRaw := r.Header.Get("Authorization")
		if bearerTokenRaw != "" {
			bearerToken = &bearerTokenRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewCreateGrpsioMailingListPayload(&body, version, bearerToken)
		if payload.BearerToken != nil {
			if strings.Contains(*payload.BearerToken, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.BearerToken, " ", 2)[1]
				payload.BearerToken = &cred
			}
		}

		return payload, nil
	}
}

// EncodeCreateGrpsioMailingListError returns an encoder for errors returned by
// the create-grpsio-mailing-list mailing-list endpoint.
func EncodeCreateGrpsioMailingListError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "BadRequest":
			var res *mailinglist.BadRequestError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewCreateGrpsioMailingListBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "Conflict":
			var res *mailinglist.ConflictError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewCreateGrpsioMailingListConflictResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusConflict)
			return enc.Encode(body)
		case "InternalServerError":
			var res *mailinglist.InternalServerError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewCreateGrpsioMailingListInternalServerErrorResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "NotFound":
			var res *mailinglist.NotFoundError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewCreateGrpsioMailingListNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "ServiceUnavailable":
			var res *mailinglist.ServiceUnavailableError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewCreateGrpsioMailingListServiceUnavailableResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusServiceUnavailable)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeGetGrpsioMailingListResponse returns an encoder for responses returned
// by the mailing-list get-grpsio-mailing-list endpoint.
func EncodeGetGrpsioMailingListResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*mailinglist.GetGrpsioMailingListResult)
		enc := encoder(ctx, w)
		body := NewGetGrpsioMailingListResponseBody(res)
		if res.Etag != nil {
			w.Header().Set("Etag", *res.Etag)
		}
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetGrpsioMailingListRequest returns a decoder for requests sent to the
// mailing-list get-grpsio-mailing-list endpoint.
func DecodeGetGrpsioMailingListRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			uid         string
			version     string
			bearerToken string
			err         error

			params = mux.Vars(r)
		)
		uid = params["uid"]
		err = goa.MergeErrors(err, goa.ValidateFormat("uid", uid, goa.FormatUUID))
		version = r.URL.Query().Get("v")
		if version == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("version", "query string"))
		}
		if !(version == "1") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", version, []any{"1"}))
		}
		bearerToken = r.Header.Get("Authorization")
		if bearerToken == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("bearer_token", "header"))
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetGrpsioMailingListPayload(uid, version, bearerToken)
		if strings.Contains(payload.BearerToken, " ") {
			// Remove authorization scheme prefix (e.g. "Bearer")
			cred := strings.SplitN(payload.BearerToken, " ", 2)[1]
			payload.BearerToken = cred
		}

		return payload, nil
	}
}

// EncodeGetGrpsioMailingListError returns an encoder for errors returned by
// the get-grpsio-mailing-list mailing-list endpoint.
func EncodeGetGrpsioMailingListError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "BadRequest":
			var res *mailinglist.BadRequestError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewGetGrpsioMailingListBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "InternalServerError":
			var res *mailinglist.InternalServerError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewGetGrpsioMailingListInternalServerErrorResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "NotFound":
			var res *mailinglist.NotFoundError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewGetGrpsioMailingListNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "ServiceUnavailable":
			var res *mailinglist.ServiceUnavailableError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewGetGrpsioMailingListServiceUnavailableResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusServiceUnavailable)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeUpdateGrpsioMailingListResponse returns an encoder for responses
// returned by the mailing-list update-grpsio-mailing-list endpoint.
func EncodeUpdateGrpsioMailingListResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*mailinglist.MailingListWithReadonlyAttributes)
		enc := encoder(ctx, w)
		body := NewUpdateGrpsioMailingListResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeUpdateGrpsioMailingListRequest returns a decoder for requests sent to
// the mailing-list update-grpsio-mailing-list endpoint.
func DecodeUpdateGrpsioMailingListRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body UpdateGrpsioMailingListRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if errors.Is(err, io.EOF) {
				return nil, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				return nil, gerr
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateUpdateGrpsioMailingListRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			uid         string
			version     string
			bearerToken *string
			ifMatch     *string

			params = mux.Vars(r)
		)
		uid = params["uid"]
		err = goa.MergeErrors(err, goa.ValidateFormat("uid", uid, goa.FormatUUID))
		version = r.URL.Query().Get("v")
		if version == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("version", "query string"))
		}
		if !(version == "1") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", version, []any{"1"}))
		}
		bearerTokenRaw := r.Header.Get("Authorization")
		if bearerTokenRaw != "" {
			bearerToken = &bearerTokenRaw
		}
		ifMatchRaw := r.Header.Get("If-Match")
		if ifMatchRaw != "" {
			ifMatch = &ifMatchRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewUpdateGrpsioMailingListPayload(&body, uid, version, bearerToken, ifMatch)
		if payload.BearerToken != nil {
			if strings.Contains(*payload.BearerToken, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.BearerToken, " ", 2)[1]
				payload.BearerToken = &cred
			}
		}

		return payload, nil
	}
}

// EncodeUpdateGrpsioMailingListError returns an encoder for errors returned by
// the update-grpsio-mailing-list mailing-list endpoint.
func EncodeUpdateGrpsioMailingListError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "BadRequest":
			var res *mailinglist.BadRequestError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewUpdateGrpsioMailingListBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "Conflict":
			var res *mailinglist.ConflictError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewUpdateGrpsioMailingListConflictResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusConflict)
			return enc.Encode(body)
		case "InternalServerError":
			var res *mailinglist.InternalServerError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewUpdateGrpsioMailingListInternalServerErrorResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "NotFound":
			var res *mailinglist.NotFoundError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewUpdateGrpsioMailingListNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "ServiceUnavailable":
			var res *mailinglist.ServiceUnavailableError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewUpdateGrpsioMailingListServiceUnavailableResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusServiceUnavailable)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeDeleteGrpsioMailingListResponse returns an encoder for responses
// returned by the mailing-list delete-grpsio-mailing-list endpoint.
func EncodeDeleteGrpsioMailingListResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		w.WriteHeader(http.StatusNoContent)
		return nil
	}
}

// DecodeDeleteGrpsioMailingListRequest returns a decoder for requests sent to
// the mailing-list delete-grpsio-mailing-list endpoint.
func DecodeDeleteGrpsioMailingListRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			uid         string
			version     *string
			bearerToken *string
			ifMatch     *string
			err         error

			params = mux.Vars(r)
		)
		uid = params["uid"]
		err = goa.MergeErrors(err, goa.ValidateFormat("uid", uid, goa.FormatUUID))
		versionRaw := r.URL.Query().Get("v")
		if versionRaw != "" {
			version = &versionRaw
		}
		if version != nil {
			if !(*version == "1") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", *version, []any{"1"}))
			}
		}
		bearerTokenRaw := r.Header.Get("Authorization")
		if bearerTokenRaw != "" {
			bearerToken = &bearerTokenRaw
		}
		ifMatchRaw := r.Header.Get("If-Match")
		if ifMatchRaw != "" {
			ifMatch = &ifMatchRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewDeleteGrpsioMailingListPayload(uid, version, bearerToken, ifMatch)
		if payload.BearerToken != nil {
			if strings.Contains(*payload.BearerToken, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.BearerToken, " ", 2)[1]
				payload.BearerToken = &cred
			}
		}

		return payload, nil
	}
}

// EncodeDeleteGrpsioMailingListError returns an encoder for errors returned by
// the delete-grpsio-mailing-list mailing-list endpoint.
func EncodeDeleteGrpsioMailingListError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "BadRequest":
			var res *mailinglist.BadRequestError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewDeleteGrpsioMailingListBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "Conflict":
			var res *mailinglist.ConflictError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewDeleteGrpsioMailingListConflictResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusConflict)
			return enc.Encode(body)
		case "InternalServerError":
			var res *mailinglist.InternalServerError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewDeleteGrpsioMailingListInternalServerErrorResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "NotFound":
			var res *mailinglist.NotFoundError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewDeleteGrpsioMailingListNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "ServiceUnavailable":
			var res *mailinglist.ServiceUnavailableError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewDeleteGrpsioMailingListServiceUnavailableResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusServiceUnavailable)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeCreateGrpsioMailingListMemberResponse returns an encoder for responses
// returned by the mailing-list create-grpsio-mailing-list-member endpoint.
func EncodeCreateGrpsioMailingListMemberResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*mailinglist.MemberFull)
		enc := encoder(ctx, w)
		body := NewCreateGrpsioMailingListMemberResponseBody(res)
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeCreateGrpsioMailingListMemberRequest returns a decoder for requests
// sent to the mailing-list create-grpsio-mailing-list-member endpoint.
func DecodeCreateGrpsioMailingListMemberRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body CreateGrpsioMailingListMemberRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if errors.Is(err, io.EOF) {
				return nil, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				return nil, gerr
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreateGrpsioMailingListMemberRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			uid         string
			version     string
			bearerToken *string

			params = mux.Vars(r)
		)
		uid = params["uid"]
		version = r.URL.Query().Get("v")
		if version == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("version", "query string"))
		}
		if !(version == "1") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", version, []any{"1"}))
		}
		bearerTokenRaw := r.Header.Get("Authorization")
		if bearerTokenRaw != "" {
			bearerToken = &bearerTokenRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewCreateGrpsioMailingListMemberPayload(&body, uid, version, bearerToken)
		if payload.BearerToken != nil {
			if strings.Contains(*payload.BearerToken, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.BearerToken, " ", 2)[1]
				payload.BearerToken = &cred
			}
		}

		return payload, nil
	}
}

// EncodeCreateGrpsioMailingListMemberError returns an encoder for errors
// returned by the create-grpsio-mailing-list-member mailing-list endpoint.
func EncodeCreateGrpsioMailingListMemberError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "BadRequest":
			var res *mailinglist.BadRequestError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewCreateGrpsioMailingListMemberBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "Conflict":
			var res *mailinglist.ConflictError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewCreateGrpsioMailingListMemberConflictResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusConflict)
			return enc.Encode(body)
		case "InternalServerError":
			var res *mailinglist.InternalServerError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewCreateGrpsioMailingListMemberInternalServerErrorResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "NotFound":
			var res *mailinglist.NotFoundError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewCreateGrpsioMailingListMemberNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "ServiceUnavailable":
			var res *mailinglist.ServiceUnavailableError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewCreateGrpsioMailingListMemberServiceUnavailableResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusServiceUnavailable)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}
