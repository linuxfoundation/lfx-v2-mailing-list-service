// Code generated by goa v3.21.5, DO NOT EDIT.
//
// mailing-list HTTP server
//
// Command:
// $ goa gen
// github.com/linuxfoundation/lfx-v2-mailing-list-service/cmd/mailing-list-api/design

package server

import (
	"context"
	"net/http"
	"path"

	mailinglist "github.com/linuxfoundation/lfx-v2-mailing-list-service/gen/mailing_list"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the mailing-list service endpoint HTTP handlers.
type Server struct {
	Mounts                        []*MountPoint
	Livez                         http.Handler
	Readyz                        http.Handler
	CreateGrpsioService           http.Handler
	GetGrpsioService              http.Handler
	UpdateGrpsioService           http.Handler
	DeleteGrpsioService           http.Handler
	CreateGrpsioMailingList       http.Handler
	GetGrpsioMailingList          http.Handler
	UpdateGrpsioMailingList       http.Handler
	DeleteGrpsioMailingList       http.Handler
	CreateGrpsioMailingListMember http.Handler
	GetGrpsioMailingListMember    http.Handler
	UpdateGrpsioMailingListMember http.Handler
	DeleteGrpsioMailingListMember http.Handler
	GenHTTPOpenapi3JSON           http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the mailing-list service endpoints
// using the provided encoder and decoder. The handlers are mounted on the
// given mux using the HTTP verb and path defined in the design. errhandler is
// called whenever a response fails to be encoded. formatter is used to format
// errors returned by the service methods prior to encoding. Both errhandler
// and formatter are optional and can be nil.
func New(
	e *mailinglist.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
	fileSystemGenHTTPOpenapi3JSON http.FileSystem,
) *Server {
	if fileSystemGenHTTPOpenapi3JSON == nil {
		fileSystemGenHTTPOpenapi3JSON = http.Dir(".")
	}
	fileSystemGenHTTPOpenapi3JSON = appendPrefix(fileSystemGenHTTPOpenapi3JSON, "/gen/http")
	return &Server{
		Mounts: []*MountPoint{
			{"Livez", "GET", "/livez"},
			{"Readyz", "GET", "/readyz"},
			{"CreateGrpsioService", "POST", "/groupsio/services"},
			{"GetGrpsioService", "GET", "/groupsio/services/{uid}"},
			{"UpdateGrpsioService", "PUT", "/groupsio/services/{uid}"},
			{"DeleteGrpsioService", "DELETE", "/groupsio/services/{uid}"},
			{"CreateGrpsioMailingList", "POST", "/groupsio/mailing-lists"},
			{"GetGrpsioMailingList", "GET", "/groupsio/mailing-lists/{uid}"},
			{"UpdateGrpsioMailingList", "PUT", "/groupsio/mailing-lists/{uid}"},
			{"DeleteGrpsioMailingList", "DELETE", "/groupsio/mailing-lists/{uid}"},
			{"CreateGrpsioMailingListMember", "POST", "/groupsio/mailing-lists/{uid}/members"},
			{"GetGrpsioMailingListMember", "GET", "/groupsio/mailing-lists/{uid}/members/{member_uid}"},
			{"UpdateGrpsioMailingListMember", "PUT", "/groupsio/mailing-lists/{uid}/members/{member_uid}"},
			{"DeleteGrpsioMailingListMember", "DELETE", "/groupsio/mailing-lists/{uid}/members/{member_uid}"},
			{"Serve gen/http/openapi3.json", "GET", "/openapi.json"},
		},
		Livez:                         NewLivezHandler(e.Livez, mux, decoder, encoder, errhandler, formatter),
		Readyz:                        NewReadyzHandler(e.Readyz, mux, decoder, encoder, errhandler, formatter),
		CreateGrpsioService:           NewCreateGrpsioServiceHandler(e.CreateGrpsioService, mux, decoder, encoder, errhandler, formatter),
		GetGrpsioService:              NewGetGrpsioServiceHandler(e.GetGrpsioService, mux, decoder, encoder, errhandler, formatter),
		UpdateGrpsioService:           NewUpdateGrpsioServiceHandler(e.UpdateGrpsioService, mux, decoder, encoder, errhandler, formatter),
		DeleteGrpsioService:           NewDeleteGrpsioServiceHandler(e.DeleteGrpsioService, mux, decoder, encoder, errhandler, formatter),
		CreateGrpsioMailingList:       NewCreateGrpsioMailingListHandler(e.CreateGrpsioMailingList, mux, decoder, encoder, errhandler, formatter),
		GetGrpsioMailingList:          NewGetGrpsioMailingListHandler(e.GetGrpsioMailingList, mux, decoder, encoder, errhandler, formatter),
		UpdateGrpsioMailingList:       NewUpdateGrpsioMailingListHandler(e.UpdateGrpsioMailingList, mux, decoder, encoder, errhandler, formatter),
		DeleteGrpsioMailingList:       NewDeleteGrpsioMailingListHandler(e.DeleteGrpsioMailingList, mux, decoder, encoder, errhandler, formatter),
		CreateGrpsioMailingListMember: NewCreateGrpsioMailingListMemberHandler(e.CreateGrpsioMailingListMember, mux, decoder, encoder, errhandler, formatter),
		GetGrpsioMailingListMember:    NewGetGrpsioMailingListMemberHandler(e.GetGrpsioMailingListMember, mux, decoder, encoder, errhandler, formatter),
		UpdateGrpsioMailingListMember: NewUpdateGrpsioMailingListMemberHandler(e.UpdateGrpsioMailingListMember, mux, decoder, encoder, errhandler, formatter),
		DeleteGrpsioMailingListMember: NewDeleteGrpsioMailingListMemberHandler(e.DeleteGrpsioMailingListMember, mux, decoder, encoder, errhandler, formatter),
		GenHTTPOpenapi3JSON:           http.FileServer(fileSystemGenHTTPOpenapi3JSON),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "mailing-list" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.Livez = m(s.Livez)
	s.Readyz = m(s.Readyz)
	s.CreateGrpsioService = m(s.CreateGrpsioService)
	s.GetGrpsioService = m(s.GetGrpsioService)
	s.UpdateGrpsioService = m(s.UpdateGrpsioService)
	s.DeleteGrpsioService = m(s.DeleteGrpsioService)
	s.CreateGrpsioMailingList = m(s.CreateGrpsioMailingList)
	s.GetGrpsioMailingList = m(s.GetGrpsioMailingList)
	s.UpdateGrpsioMailingList = m(s.UpdateGrpsioMailingList)
	s.DeleteGrpsioMailingList = m(s.DeleteGrpsioMailingList)
	s.CreateGrpsioMailingListMember = m(s.CreateGrpsioMailingListMember)
	s.GetGrpsioMailingListMember = m(s.GetGrpsioMailingListMember)
	s.UpdateGrpsioMailingListMember = m(s.UpdateGrpsioMailingListMember)
	s.DeleteGrpsioMailingListMember = m(s.DeleteGrpsioMailingListMember)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return mailinglist.MethodNames[:] }

// Mount configures the mux to serve the mailing-list endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountLivezHandler(mux, h.Livez)
	MountReadyzHandler(mux, h.Readyz)
	MountCreateGrpsioServiceHandler(mux, h.CreateGrpsioService)
	MountGetGrpsioServiceHandler(mux, h.GetGrpsioService)
	MountUpdateGrpsioServiceHandler(mux, h.UpdateGrpsioService)
	MountDeleteGrpsioServiceHandler(mux, h.DeleteGrpsioService)
	MountCreateGrpsioMailingListHandler(mux, h.CreateGrpsioMailingList)
	MountGetGrpsioMailingListHandler(mux, h.GetGrpsioMailingList)
	MountUpdateGrpsioMailingListHandler(mux, h.UpdateGrpsioMailingList)
	MountDeleteGrpsioMailingListHandler(mux, h.DeleteGrpsioMailingList)
	MountCreateGrpsioMailingListMemberHandler(mux, h.CreateGrpsioMailingListMember)
	MountGetGrpsioMailingListMemberHandler(mux, h.GetGrpsioMailingListMember)
	MountUpdateGrpsioMailingListMemberHandler(mux, h.UpdateGrpsioMailingListMember)
	MountDeleteGrpsioMailingListMemberHandler(mux, h.DeleteGrpsioMailingListMember)
	MountGenHTTPOpenapi3JSON(mux, h.GenHTTPOpenapi3JSON)
}

// Mount configures the mux to serve the mailing-list endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountLivezHandler configures the mux to serve the "mailing-list" service
// "livez" endpoint.
func MountLivezHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/livez", f)
}

// NewLivezHandler creates a HTTP handler which loads the HTTP request and
// calls the "mailing-list" service "livez" endpoint.
func NewLivezHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		encodeResponse = EncodeLivezResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "livez")
		ctx = context.WithValue(ctx, goa.ServiceKey, "mailing-list")
		var err error
		res, err := endpoint(ctx, nil)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			if errhandler != nil {
				errhandler(ctx, w, err)
			}
		}
	})
}

// MountReadyzHandler configures the mux to serve the "mailing-list" service
// "readyz" endpoint.
func MountReadyzHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/readyz", f)
}

// NewReadyzHandler creates a HTTP handler which loads the HTTP request and
// calls the "mailing-list" service "readyz" endpoint.
func NewReadyzHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		encodeResponse = EncodeReadyzResponse(encoder)
		encodeError    = EncodeReadyzError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "readyz")
		ctx = context.WithValue(ctx, goa.ServiceKey, "mailing-list")
		var err error
		res, err := endpoint(ctx, nil)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			if errhandler != nil {
				errhandler(ctx, w, err)
			}
		}
	})
}

// MountCreateGrpsioServiceHandler configures the mux to serve the
// "mailing-list" service "create-grpsio-service" endpoint.
func MountCreateGrpsioServiceHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/groupsio/services", f)
}

// NewCreateGrpsioServiceHandler creates a HTTP handler which loads the HTTP
// request and calls the "mailing-list" service "create-grpsio-service"
// endpoint.
func NewCreateGrpsioServiceHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreateGrpsioServiceRequest(mux, decoder)
		encodeResponse = EncodeCreateGrpsioServiceResponse(encoder)
		encodeError    = EncodeCreateGrpsioServiceError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "create-grpsio-service")
		ctx = context.WithValue(ctx, goa.ServiceKey, "mailing-list")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			if errhandler != nil {
				errhandler(ctx, w, err)
			}
		}
	})
}

// MountGetGrpsioServiceHandler configures the mux to serve the "mailing-list"
// service "get-grpsio-service" endpoint.
func MountGetGrpsioServiceHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/groupsio/services/{uid}", f)
}

// NewGetGrpsioServiceHandler creates a HTTP handler which loads the HTTP
// request and calls the "mailing-list" service "get-grpsio-service" endpoint.
func NewGetGrpsioServiceHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetGrpsioServiceRequest(mux, decoder)
		encodeResponse = EncodeGetGrpsioServiceResponse(encoder)
		encodeError    = EncodeGetGrpsioServiceError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "get-grpsio-service")
		ctx = context.WithValue(ctx, goa.ServiceKey, "mailing-list")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			if errhandler != nil {
				errhandler(ctx, w, err)
			}
		}
	})
}

// MountUpdateGrpsioServiceHandler configures the mux to serve the
// "mailing-list" service "update-grpsio-service" endpoint.
func MountUpdateGrpsioServiceHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/groupsio/services/{uid}", f)
}

// NewUpdateGrpsioServiceHandler creates a HTTP handler which loads the HTTP
// request and calls the "mailing-list" service "update-grpsio-service"
// endpoint.
func NewUpdateGrpsioServiceHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpdateGrpsioServiceRequest(mux, decoder)
		encodeResponse = EncodeUpdateGrpsioServiceResponse(encoder)
		encodeError    = EncodeUpdateGrpsioServiceError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "update-grpsio-service")
		ctx = context.WithValue(ctx, goa.ServiceKey, "mailing-list")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			if errhandler != nil {
				errhandler(ctx, w, err)
			}
		}
	})
}

// MountDeleteGrpsioServiceHandler configures the mux to serve the
// "mailing-list" service "delete-grpsio-service" endpoint.
func MountDeleteGrpsioServiceHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/groupsio/services/{uid}", f)
}

// NewDeleteGrpsioServiceHandler creates a HTTP handler which loads the HTTP
// request and calls the "mailing-list" service "delete-grpsio-service"
// endpoint.
func NewDeleteGrpsioServiceHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteGrpsioServiceRequest(mux, decoder)
		encodeResponse = EncodeDeleteGrpsioServiceResponse(encoder)
		encodeError    = EncodeDeleteGrpsioServiceError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "delete-grpsio-service")
		ctx = context.WithValue(ctx, goa.ServiceKey, "mailing-list")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			if errhandler != nil {
				errhandler(ctx, w, err)
			}
		}
	})
}

// MountCreateGrpsioMailingListHandler configures the mux to serve the
// "mailing-list" service "create-grpsio-mailing-list" endpoint.
func MountCreateGrpsioMailingListHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/groupsio/mailing-lists", f)
}

// NewCreateGrpsioMailingListHandler creates a HTTP handler which loads the
// HTTP request and calls the "mailing-list" service
// "create-grpsio-mailing-list" endpoint.
func NewCreateGrpsioMailingListHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreateGrpsioMailingListRequest(mux, decoder)
		encodeResponse = EncodeCreateGrpsioMailingListResponse(encoder)
		encodeError    = EncodeCreateGrpsioMailingListError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "create-grpsio-mailing-list")
		ctx = context.WithValue(ctx, goa.ServiceKey, "mailing-list")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			if errhandler != nil {
				errhandler(ctx, w, err)
			}
		}
	})
}

// MountGetGrpsioMailingListHandler configures the mux to serve the
// "mailing-list" service "get-grpsio-mailing-list" endpoint.
func MountGetGrpsioMailingListHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/groupsio/mailing-lists/{uid}", f)
}

// NewGetGrpsioMailingListHandler creates a HTTP handler which loads the HTTP
// request and calls the "mailing-list" service "get-grpsio-mailing-list"
// endpoint.
func NewGetGrpsioMailingListHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetGrpsioMailingListRequest(mux, decoder)
		encodeResponse = EncodeGetGrpsioMailingListResponse(encoder)
		encodeError    = EncodeGetGrpsioMailingListError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "get-grpsio-mailing-list")
		ctx = context.WithValue(ctx, goa.ServiceKey, "mailing-list")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			if errhandler != nil {
				errhandler(ctx, w, err)
			}
		}
	})
}

// MountUpdateGrpsioMailingListHandler configures the mux to serve the
// "mailing-list" service "update-grpsio-mailing-list" endpoint.
func MountUpdateGrpsioMailingListHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/groupsio/mailing-lists/{uid}", f)
}

// NewUpdateGrpsioMailingListHandler creates a HTTP handler which loads the
// HTTP request and calls the "mailing-list" service
// "update-grpsio-mailing-list" endpoint.
func NewUpdateGrpsioMailingListHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpdateGrpsioMailingListRequest(mux, decoder)
		encodeResponse = EncodeUpdateGrpsioMailingListResponse(encoder)
		encodeError    = EncodeUpdateGrpsioMailingListError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "update-grpsio-mailing-list")
		ctx = context.WithValue(ctx, goa.ServiceKey, "mailing-list")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			if errhandler != nil {
				errhandler(ctx, w, err)
			}
		}
	})
}

// MountDeleteGrpsioMailingListHandler configures the mux to serve the
// "mailing-list" service "delete-grpsio-mailing-list" endpoint.
func MountDeleteGrpsioMailingListHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/groupsio/mailing-lists/{uid}", f)
}

// NewDeleteGrpsioMailingListHandler creates a HTTP handler which loads the
// HTTP request and calls the "mailing-list" service
// "delete-grpsio-mailing-list" endpoint.
func NewDeleteGrpsioMailingListHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteGrpsioMailingListRequest(mux, decoder)
		encodeResponse = EncodeDeleteGrpsioMailingListResponse(encoder)
		encodeError    = EncodeDeleteGrpsioMailingListError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "delete-grpsio-mailing-list")
		ctx = context.WithValue(ctx, goa.ServiceKey, "mailing-list")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			if errhandler != nil {
				errhandler(ctx, w, err)
			}
		}
	})
}

// MountCreateGrpsioMailingListMemberHandler configures the mux to serve the
// "mailing-list" service "create-grpsio-mailing-list-member" endpoint.
func MountCreateGrpsioMailingListMemberHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/groupsio/mailing-lists/{uid}/members", f)
}

// NewCreateGrpsioMailingListMemberHandler creates a HTTP handler which loads
// the HTTP request and calls the "mailing-list" service
// "create-grpsio-mailing-list-member" endpoint.
func NewCreateGrpsioMailingListMemberHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreateGrpsioMailingListMemberRequest(mux, decoder)
		encodeResponse = EncodeCreateGrpsioMailingListMemberResponse(encoder)
		encodeError    = EncodeCreateGrpsioMailingListMemberError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "create-grpsio-mailing-list-member")
		ctx = context.WithValue(ctx, goa.ServiceKey, "mailing-list")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			if errhandler != nil {
				errhandler(ctx, w, err)
			}
		}
	})
}

// MountGetGrpsioMailingListMemberHandler configures the mux to serve the
// "mailing-list" service "get-grpsio-mailing-list-member" endpoint.
func MountGetGrpsioMailingListMemberHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/groupsio/mailing-lists/{uid}/members/{member_uid}", f)
}

// NewGetGrpsioMailingListMemberHandler creates a HTTP handler which loads the
// HTTP request and calls the "mailing-list" service
// "get-grpsio-mailing-list-member" endpoint.
func NewGetGrpsioMailingListMemberHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetGrpsioMailingListMemberRequest(mux, decoder)
		encodeResponse = EncodeGetGrpsioMailingListMemberResponse(encoder)
		encodeError    = EncodeGetGrpsioMailingListMemberError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "get-grpsio-mailing-list-member")
		ctx = context.WithValue(ctx, goa.ServiceKey, "mailing-list")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			if errhandler != nil {
				errhandler(ctx, w, err)
			}
		}
	})
}

// MountUpdateGrpsioMailingListMemberHandler configures the mux to serve the
// "mailing-list" service "update-grpsio-mailing-list-member" endpoint.
func MountUpdateGrpsioMailingListMemberHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/groupsio/mailing-lists/{uid}/members/{member_uid}", f)
}

// NewUpdateGrpsioMailingListMemberHandler creates a HTTP handler which loads
// the HTTP request and calls the "mailing-list" service
// "update-grpsio-mailing-list-member" endpoint.
func NewUpdateGrpsioMailingListMemberHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpdateGrpsioMailingListMemberRequest(mux, decoder)
		encodeResponse = EncodeUpdateGrpsioMailingListMemberResponse(encoder)
		encodeError    = EncodeUpdateGrpsioMailingListMemberError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "update-grpsio-mailing-list-member")
		ctx = context.WithValue(ctx, goa.ServiceKey, "mailing-list")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			if errhandler != nil {
				errhandler(ctx, w, err)
			}
		}
	})
}

// MountDeleteGrpsioMailingListMemberHandler configures the mux to serve the
// "mailing-list" service "delete-grpsio-mailing-list-member" endpoint.
func MountDeleteGrpsioMailingListMemberHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/groupsio/mailing-lists/{uid}/members/{member_uid}", f)
}

// NewDeleteGrpsioMailingListMemberHandler creates a HTTP handler which loads
// the HTTP request and calls the "mailing-list" service
// "delete-grpsio-mailing-list-member" endpoint.
func NewDeleteGrpsioMailingListMemberHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteGrpsioMailingListMemberRequest(mux, decoder)
		encodeResponse = EncodeDeleteGrpsioMailingListMemberResponse(encoder)
		encodeError    = EncodeDeleteGrpsioMailingListMemberError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "delete-grpsio-mailing-list-member")
		ctx = context.WithValue(ctx, goa.ServiceKey, "mailing-list")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil && errhandler != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			if errhandler != nil {
				errhandler(ctx, w, err)
			}
		}
	})
}

// appendFS is a custom implementation of fs.FS that appends a specified prefix
// to the file paths before delegating the Open call to the underlying fs.FS.
type appendFS struct {
	prefix string
	fs     http.FileSystem
}

// Open opens the named file, appending the prefix to the file path before
// passing it to the underlying fs.FS.
func (s appendFS) Open(name string) (http.File, error) {
	switch name {
	case "/openapi.json":
		name = "/openapi3.json"
	}
	return s.fs.Open(path.Join(s.prefix, name))
}

// appendPrefix returns a new fs.FS that appends the specified prefix to file paths
// before delegating to the provided embed.FS.
func appendPrefix(fsys http.FileSystem, prefix string) http.FileSystem {
	return appendFS{prefix: prefix, fs: fsys}
}

// MountGenHTTPOpenapi3JSON configures the mux to serve GET request made to
// "/openapi.json".
func MountGenHTTPOpenapi3JSON(mux goahttp.Muxer, h http.Handler) {
	mux.Handle("GET", "/openapi.json", h.ServeHTTP)
}
