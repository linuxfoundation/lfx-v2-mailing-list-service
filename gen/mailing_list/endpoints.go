// Code generated by goa v3.21.5, DO NOT EDIT.
//
// mailing-list endpoints
//
// Command:
// $ goa gen
// github.com/linuxfoundation/lfx-v2-mailing-list-service/cmd/mailing-list-api/design

package mailinglist

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "mailing-list" service endpoints.
type Endpoints struct {
	Livez                         goa.Endpoint
	Readyz                        goa.Endpoint
	CreateGrpsioService           goa.Endpoint
	GetGrpsioService              goa.Endpoint
	UpdateGrpsioService           goa.Endpoint
	DeleteGrpsioService           goa.Endpoint
	CreateGrpsioMailingList       goa.Endpoint
	GetGrpsioMailingList          goa.Endpoint
	UpdateGrpsioMailingList       goa.Endpoint
	DeleteGrpsioMailingList       goa.Endpoint
	CreateGrpsioMailingListMember goa.Endpoint
	GetGrpsioMailingListMember    goa.Endpoint
	UpdateGrpsioMailingListMember goa.Endpoint
	DeleteGrpsioMailingListMember goa.Endpoint
}

// NewEndpoints wraps the methods of the "mailing-list" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		Livez:                         NewLivezEndpoint(s),
		Readyz:                        NewReadyzEndpoint(s),
		CreateGrpsioService:           NewCreateGrpsioServiceEndpoint(s, a.JWTAuth),
		GetGrpsioService:              NewGetGrpsioServiceEndpoint(s, a.JWTAuth),
		UpdateGrpsioService:           NewUpdateGrpsioServiceEndpoint(s, a.JWTAuth),
		DeleteGrpsioService:           NewDeleteGrpsioServiceEndpoint(s, a.JWTAuth),
		CreateGrpsioMailingList:       NewCreateGrpsioMailingListEndpoint(s, a.JWTAuth),
		GetGrpsioMailingList:          NewGetGrpsioMailingListEndpoint(s, a.JWTAuth),
		UpdateGrpsioMailingList:       NewUpdateGrpsioMailingListEndpoint(s, a.JWTAuth),
		DeleteGrpsioMailingList:       NewDeleteGrpsioMailingListEndpoint(s, a.JWTAuth),
		CreateGrpsioMailingListMember: NewCreateGrpsioMailingListMemberEndpoint(s, a.JWTAuth),
		GetGrpsioMailingListMember:    NewGetGrpsioMailingListMemberEndpoint(s, a.JWTAuth),
		UpdateGrpsioMailingListMember: NewUpdateGrpsioMailingListMemberEndpoint(s, a.JWTAuth),
		DeleteGrpsioMailingListMember: NewDeleteGrpsioMailingListMemberEndpoint(s, a.JWTAuth),
	}
}

// Use applies the given middleware to all the "mailing-list" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Livez = m(e.Livez)
	e.Readyz = m(e.Readyz)
	e.CreateGrpsioService = m(e.CreateGrpsioService)
	e.GetGrpsioService = m(e.GetGrpsioService)
	e.UpdateGrpsioService = m(e.UpdateGrpsioService)
	e.DeleteGrpsioService = m(e.DeleteGrpsioService)
	e.CreateGrpsioMailingList = m(e.CreateGrpsioMailingList)
	e.GetGrpsioMailingList = m(e.GetGrpsioMailingList)
	e.UpdateGrpsioMailingList = m(e.UpdateGrpsioMailingList)
	e.DeleteGrpsioMailingList = m(e.DeleteGrpsioMailingList)
	e.CreateGrpsioMailingListMember = m(e.CreateGrpsioMailingListMember)
	e.GetGrpsioMailingListMember = m(e.GetGrpsioMailingListMember)
	e.UpdateGrpsioMailingListMember = m(e.UpdateGrpsioMailingListMember)
	e.DeleteGrpsioMailingListMember = m(e.DeleteGrpsioMailingListMember)
}

// NewLivezEndpoint returns an endpoint function that calls the method "livez"
// of service "mailing-list".
func NewLivezEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		return s.Livez(ctx)
	}
}

// NewReadyzEndpoint returns an endpoint function that calls the method
// "readyz" of service "mailing-list".
func NewReadyzEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		return s.Readyz(ctx)
	}
}

// NewCreateGrpsioServiceEndpoint returns an endpoint function that calls the
// method "create-grpsio-service" of service "mailing-list".
func NewCreateGrpsioServiceEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*CreateGrpsioServicePayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var token string
		if p.BearerToken != nil {
			token = *p.BearerToken
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.CreateGrpsioService(ctx, p)
	}
}

// NewGetGrpsioServiceEndpoint returns an endpoint function that calls the
// method "get-grpsio-service" of service "mailing-list".
func NewGetGrpsioServiceEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*GetGrpsioServicePayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var token string
		if p.BearerToken != nil {
			token = *p.BearerToken
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.GetGrpsioService(ctx, p)
	}
}

// NewUpdateGrpsioServiceEndpoint returns an endpoint function that calls the
// method "update-grpsio-service" of service "mailing-list".
func NewUpdateGrpsioServiceEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*UpdateGrpsioServicePayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var token string
		if p.BearerToken != nil {
			token = *p.BearerToken
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.UpdateGrpsioService(ctx, p)
	}
}

// NewDeleteGrpsioServiceEndpoint returns an endpoint function that calls the
// method "delete-grpsio-service" of service "mailing-list".
func NewDeleteGrpsioServiceEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*DeleteGrpsioServicePayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var token string
		if p.BearerToken != nil {
			token = *p.BearerToken
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return nil, s.DeleteGrpsioService(ctx, p)
	}
}

// NewCreateGrpsioMailingListEndpoint returns an endpoint function that calls
// the method "create-grpsio-mailing-list" of service "mailing-list".
func NewCreateGrpsioMailingListEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*CreateGrpsioMailingListPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var token string
		if p.BearerToken != nil {
			token = *p.BearerToken
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.CreateGrpsioMailingList(ctx, p)
	}
}

// NewGetGrpsioMailingListEndpoint returns an endpoint function that calls the
// method "get-grpsio-mailing-list" of service "mailing-list".
func NewGetGrpsioMailingListEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*GetGrpsioMailingListPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		ctx, err = authJWTFn(ctx, p.BearerToken, &sc)
		if err != nil {
			return nil, err
		}
		return s.GetGrpsioMailingList(ctx, p)
	}
}

// NewUpdateGrpsioMailingListEndpoint returns an endpoint function that calls
// the method "update-grpsio-mailing-list" of service "mailing-list".
func NewUpdateGrpsioMailingListEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*UpdateGrpsioMailingListPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var token string
		if p.BearerToken != nil {
			token = *p.BearerToken
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.UpdateGrpsioMailingList(ctx, p)
	}
}

// NewDeleteGrpsioMailingListEndpoint returns an endpoint function that calls
// the method "delete-grpsio-mailing-list" of service "mailing-list".
func NewDeleteGrpsioMailingListEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*DeleteGrpsioMailingListPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var token string
		if p.BearerToken != nil {
			token = *p.BearerToken
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return nil, s.DeleteGrpsioMailingList(ctx, p)
	}
}

// NewCreateGrpsioMailingListMemberEndpoint returns an endpoint function that
// calls the method "create-grpsio-mailing-list-member" of service
// "mailing-list".
func NewCreateGrpsioMailingListMemberEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*CreateGrpsioMailingListMemberPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var token string
		if p.BearerToken != nil {
			token = *p.BearerToken
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.CreateGrpsioMailingListMember(ctx, p)
	}
}

// NewGetGrpsioMailingListMemberEndpoint returns an endpoint function that
// calls the method "get-grpsio-mailing-list-member" of service "mailing-list".
func NewGetGrpsioMailingListMemberEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*GetGrpsioMailingListMemberPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		ctx, err = authJWTFn(ctx, p.BearerToken, &sc)
		if err != nil {
			return nil, err
		}
		return s.GetGrpsioMailingListMember(ctx, p)
	}
}

// NewUpdateGrpsioMailingListMemberEndpoint returns an endpoint function that
// calls the method "update-grpsio-mailing-list-member" of service
// "mailing-list".
func NewUpdateGrpsioMailingListMemberEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*UpdateGrpsioMailingListMemberPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		ctx, err = authJWTFn(ctx, p.BearerToken, &sc)
		if err != nil {
			return nil, err
		}
		return s.UpdateGrpsioMailingListMember(ctx, p)
	}
}

// NewDeleteGrpsioMailingListMemberEndpoint returns an endpoint function that
// calls the method "delete-grpsio-mailing-list-member" of service
// "mailing-list".
func NewDeleteGrpsioMailingListMemberEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*DeleteGrpsioMailingListMemberPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		ctx, err = authJWTFn(ctx, p.BearerToken, &sc)
		if err != nil {
			return nil, err
		}
		return nil, s.DeleteGrpsioMailingListMember(ctx, p)
	}
}
