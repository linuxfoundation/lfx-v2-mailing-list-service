// Code generated by goa v3.21.5, DO NOT EDIT.
//
// mailing-list service
//
// Command:
// $ goa gen
// github.com/linuxfoundation/lfx-v2-mailing-list-service/cmd/mailing-list-api/design

package mailinglist

import (
	"context"

	"goa.design/goa/v3/security"
)

// The mailing list service manages mailing lists and services
type Service interface {
	// Check if the service is alive.
	Livez(context.Context) (res []byte, err error)
	// Check if the service is able to take inbound requests.
	Readyz(context.Context) (res []byte, err error)
	// Create GroupsIO service with type-specific validation rules
	CreateGrpsioService(context.Context, *CreateGrpsioServicePayload) (res *ServiceFull, err error)
	// Get groupsIO service details by ID
	GetGrpsioService(context.Context, *GetGrpsioServicePayload) (res *GetGrpsioServiceResult, err error)
	// Update GroupsIO service
	UpdateGrpsioService(context.Context, *UpdateGrpsioServicePayload) (res *ServiceWithReadonlyAttributes, err error)
	// Delete GroupsIO service
	DeleteGrpsioService(context.Context, *DeleteGrpsioServicePayload) (err error)
	// Create GroupsIO mailing list/subgroup with comprehensive validation
	CreateGrpsioMailingList(context.Context, *CreateGrpsioMailingListPayload) (res *MailingListFull, err error)
	// Get GroupsIO mailing list details by UID
	GetGrpsioMailingList(context.Context, *GetGrpsioMailingListPayload) (res *GetGrpsioMailingListResult, err error)
	// Update GroupsIO mailing list
	UpdateGrpsioMailingList(context.Context, *UpdateGrpsioMailingListPayload) (res *MailingListWithReadonlyAttributes, err error)
	// Delete GroupsIO mailing list
	DeleteGrpsioMailingList(context.Context, *DeleteGrpsioMailingListPayload) (err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// APIName is the name of the API as defined in the design.
const APIName = "mailing-list"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "mailing-list"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [10]string{"livez", "readyz", "create-grpsio-service", "get-grpsio-service", "update-grpsio-service", "delete-grpsio-service", "create-grpsio-mailing-list", "get-grpsio-mailing-list", "update-grpsio-mailing-list", "delete-grpsio-mailing-list"}

// CreateGrpsioMailingListPayload is the payload type of the mailing-list
// service create-grpsio-mailing-list method.
type CreateGrpsioMailingListPayload struct {
	// JWT token issued by Heimdall
	BearerToken *string
	// Version of the API
	Version *string
	// Mailing list group name
	GroupName string
	// Whether the mailing list is publicly accessible
	Public bool
	// Mailing list type
	Type string
	// Committee UUID for committee-based mailing lists
	CommitteeUID *string
	// Committee member filters
	CommitteeFilters []string
	// Mailing list description (11-500 characters)
	Description string
	// Mailing list title
	Title string
	// Subject tag prefix
	SubjectTag *string
	// Service UUID
	ServiceUID string
	// Manager user IDs who can edit/modify this service
	Writers []string
	// Auditor user IDs who can audit this service
	Auditors []string
}

// CreateGrpsioServicePayload is the payload type of the mailing-list service
// create-grpsio-service method.
type CreateGrpsioServicePayload struct {
	// JWT token issued by Heimdall
	BearerToken *string
	// Version of the API
	Version *string
	// Service type
	Type string
	// Service domain
	Domain *string
	// GroupsIO group ID
	GroupID *int64
	// Service status
	Status *string
	// List of global owner email addresses (required for primary, forbidden for
	// shared)
	GlobalOwners []string
	// Email prefix (required for formation and shared, forbidden for primary)
	Prefix *string
	// Project slug identifier
	ProjectSlug *string
	// LFXv2 Project UID
	ProjectUID string
	// Service URL
	URL *string
	// GroupsIO group name
	GroupName *string
	// Whether the service is publicly accessible
	Public bool
	// Manager user IDs who can edit/modify this service
	Writers []string
	// Auditor user IDs who can audit this service
	Auditors []string
}

// DeleteGrpsioMailingListPayload is the payload type of the mailing-list
// service delete-grpsio-mailing-list method.
type DeleteGrpsioMailingListPayload struct {
	// JWT token issued by Heimdall
	BearerToken *string
	// Version of the API
	Version *string
	// If-Match header value for conditional requests
	IfMatch *string
	// Mailing list UID -- unique identifier for the mailing list
	UID *string
}

// DeleteGrpsioServicePayload is the payload type of the mailing-list service
// delete-grpsio-service method.
type DeleteGrpsioServicePayload struct {
	// JWT token issued by Heimdall
	BearerToken *string
	// Version of the API
	Version *string
	// If-Match header value for conditional requests
	IfMatch *string
	// Service UID -- unique identifier for the service
	UID *string
}

// GetGrpsioMailingListPayload is the payload type of the mailing-list service
// get-grpsio-mailing-list method.
type GetGrpsioMailingListPayload struct {
	// JWT token issued by Heimdall
	BearerToken *string
	// Version of the API
	Version *string
	// Mailing list UID -- unique identifier for the mailing list
	UID *string
}

// GetGrpsioMailingListResult is the result type of the mailing-list service
// get-grpsio-mailing-list method.
type GetGrpsioMailingListResult struct {
	MailingList *MailingListWithReadonlyAttributes
	// ETag header value
	Etag *string
}

// GetGrpsioServicePayload is the payload type of the mailing-list service
// get-grpsio-service method.
type GetGrpsioServicePayload struct {
	// JWT token issued by Heimdall
	BearerToken *string
	// Version of the API
	Version *string
	// Service UID -- unique identifier for the service
	UID *string
}

// GetGrpsioServiceResult is the result type of the mailing-list service
// get-grpsio-service method.
type GetGrpsioServiceResult struct {
	Service *ServiceWithReadonlyAttributes
	// ETag header value
	Etag *string
}

// MailingListFull is the result type of the mailing-list service
// create-grpsio-mailing-list method.
type MailingListFull struct {
	// Mailing list UID -- unique identifier for the mailing list
	UID *string
	// Mailing list group name
	GroupName *string
	// Whether the mailing list is publicly accessible
	Public bool
	// Mailing list type
	Type *string
	// Committee UUID for committee-based mailing lists
	CommitteeUID *string
	// Committee member filters
	CommitteeFilters []string
	// Mailing list description (11-500 characters)
	Description *string
	// Mailing list title
	Title *string
	// Subject tag prefix
	SubjectTag *string
	// Service UUID
	ServiceUID *string
	// LFXv2 Project UID (inherited from parent service)
	ProjectUID *string
	// Project name (read-only)
	ProjectName *string
	// Project slug identifier (read-only)
	ProjectSlug *string
	// The timestamp when the service was created (read-only)
	CreatedAt *string
	// The timestamp when the service was last updated (read-only)
	UpdatedAt *string
	// The timestamp when the service was last reviewed in RFC3339 format
	LastReviewedAt *string
	// The user ID who last reviewed this service
	LastReviewedBy *string
	// Manager user IDs who can edit/modify this service
	Writers []string
	// Auditor user IDs who can audit this service
	Auditors []string
}

// MailingListWithReadonlyAttributes is the result type of the mailing-list
// service update-grpsio-mailing-list method.
type MailingListWithReadonlyAttributes struct {
	// Mailing list UID -- unique identifier for the mailing list
	UID *string
	// Mailing list group name
	GroupName *string
	// Whether the mailing list is publicly accessible
	Public bool
	// Mailing list type
	Type *string
	// Committee UUID for committee-based mailing lists
	CommitteeUID *string
	// Committee member filters
	CommitteeFilters []string
	// Mailing list description (11-500 characters)
	Description *string
	// Mailing list title
	Title *string
	// Subject tag prefix
	SubjectTag *string
	// Service UUID
	ServiceUID *string
	// LFXv2 Project UID (inherited from parent service)
	ProjectUID *string
	// Project name (read-only)
	ProjectName *string
	// Project slug identifier (read-only)
	ProjectSlug *string
	// The timestamp when the service was created (read-only)
	CreatedAt *string
	// The timestamp when the service was last updated (read-only)
	UpdatedAt *string
	// Manager user IDs who can edit/modify this service
	Writers []string
	// Auditor user IDs who can audit this service
	Auditors []string
}

// ServiceFull is the result type of the mailing-list service
// create-grpsio-service method.
type ServiceFull struct {
	// Service UID -- unique identifier for the service
	UID *string
	// Service type
	Type string
	// Service domain
	Domain *string
	// GroupsIO group ID
	GroupID *int64
	// Service status
	Status *string
	// List of global owner email addresses (required for primary, forbidden for
	// shared)
	GlobalOwners []string
	// Email prefix (required for formation and shared, forbidden for primary)
	Prefix *string
	// Project slug identifier
	ProjectSlug *string
	// LFXv2 Project UID
	ProjectUID string
	// Service URL
	URL *string
	// GroupsIO group name
	GroupName *string
	// Whether the service is publicly accessible
	Public bool
	// Project name (read-only)
	ProjectName *string
	// The timestamp when the service was created (read-only)
	CreatedAt *string
	// The timestamp when the service was last updated (read-only)
	UpdatedAt *string
	// The timestamp when the service was last reviewed in RFC3339 format
	LastReviewedAt *string
	// The user ID who last reviewed this service
	LastReviewedBy *string
	// The user ID who last audited the service
	LastAuditedBy *string
	// The timestamp when the service was last audited
	LastAuditedTime *string
	// Manager user IDs who can edit/modify this service
	Writers []string
	// Auditor user IDs who can audit this service
	Auditors []string
}

// ServiceWithReadonlyAttributes is the result type of the mailing-list service
// update-grpsio-service method.
type ServiceWithReadonlyAttributes struct {
	// Service UID -- unique identifier for the service
	UID *string
	// Service type
	Type string
	// Service domain
	Domain *string
	// GroupsIO group ID
	GroupID *int64
	// Service status
	Status *string
	// List of global owner email addresses (required for primary, forbidden for
	// shared)
	GlobalOwners []string
	// Email prefix (required for formation and shared, forbidden for primary)
	Prefix *string
	// Project slug identifier
	ProjectSlug *string
	// LFXv2 Project UID
	ProjectUID string
	// Service URL
	URL *string
	// GroupsIO group name
	GroupName *string
	// Whether the service is publicly accessible
	Public bool
	// Project name (read-only)
	ProjectName *string
	// The timestamp when the service was created (read-only)
	CreatedAt *string
	// The timestamp when the service was last updated (read-only)
	UpdatedAt *string
	// The timestamp when the service was last reviewed in RFC3339 format
	LastReviewedAt *string
	// The user ID who last reviewed this service
	LastReviewedBy *string
	// The user ID who last audited the service
	LastAuditedBy *string
	// The timestamp when the service was last audited
	LastAuditedTime *string
	// Manager user IDs who can edit/modify this service
	Writers []string
	// Auditor user IDs who can audit this service
	Auditors []string
}

// UpdateGrpsioMailingListPayload is the payload type of the mailing-list
// service update-grpsio-mailing-list method.
type UpdateGrpsioMailingListPayload struct {
	// JWT token issued by Heimdall
	BearerToken *string
	// Version of the API
	Version *string
	// If-Match header value for conditional requests
	IfMatch *string
	// Mailing list UID -- unique identifier for the mailing list
	UID *string
	// Mailing list group name
	GroupName string
	// Whether the mailing list is publicly accessible
	Public bool
	// Mailing list type
	Type string
	// Committee UUID for committee-based mailing lists
	CommitteeUID *string
	// Committee member filters
	CommitteeFilters []string
	// Mailing list description (11-500 characters)
	Description string
	// Mailing list title
	Title string
	// Subject tag prefix
	SubjectTag *string
	// Service UUID
	ServiceUID string
	// Manager user IDs who can edit/modify this service
	Writers []string
	// Auditor user IDs who can audit this service
	Auditors []string
}

// UpdateGrpsioServicePayload is the payload type of the mailing-list service
// update-grpsio-service method.
type UpdateGrpsioServicePayload struct {
	// JWT token issued by Heimdall
	BearerToken *string
	// Version of the API
	Version *string
	// If-Match header value for conditional requests
	IfMatch *string
	// Service UID -- unique identifier for the service
	UID *string
	// Service type
	Type string
	// Service domain
	Domain *string
	// GroupsIO group ID
	GroupID *int64
	// Service status
	Status *string
	// List of global owner email addresses (required for primary, forbidden for
	// shared)
	GlobalOwners []string
	// Email prefix (required for formation and shared, forbidden for primary)
	Prefix *string
	// Project slug identifier
	ProjectSlug *string
	// LFXv2 Project UID
	ProjectUID string
	// Service URL
	URL *string
	// GroupsIO group name
	GroupName *string
	// Whether the service is publicly accessible
	Public bool
	// Manager user IDs who can edit/modify this service
	Writers []string
	// Auditor user IDs who can audit this service
	Auditors []string
}

type BadRequestError struct {
	// Error message
	Message string
}

type ConflictError struct {
	// Error message
	Message string
}

type InternalServerError struct {
	// Error message
	Message string
}

type NotFoundError struct {
	// Error message
	Message string
}

type ServiceUnavailableError struct {
	// Error message
	Message string
}

// Error returns an error description.
func (e *BadRequestError) Error() string {
	return ""
}

// ErrorName returns "bad-request-error".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *BadRequestError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "bad-request-error".
func (e *BadRequestError) GoaErrorName() string {
	return "BadRequest"
}

// Error returns an error description.
func (e *ConflictError) Error() string {
	return ""
}

// ErrorName returns "conflict-error".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *ConflictError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "conflict-error".
func (e *ConflictError) GoaErrorName() string {
	return "Conflict"
}

// Error returns an error description.
func (e *InternalServerError) Error() string {
	return ""
}

// ErrorName returns "internal-server-error".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *InternalServerError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "internal-server-error".
func (e *InternalServerError) GoaErrorName() string {
	return "InternalServerError"
}

// Error returns an error description.
func (e *NotFoundError) Error() string {
	return ""
}

// ErrorName returns "not-found-error".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *NotFoundError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "not-found-error".
func (e *NotFoundError) GoaErrorName() string {
	return "NotFound"
}

// Error returns an error description.
func (e *ServiceUnavailableError) Error() string {
	return ""
}

// ErrorName returns "service-unavailable-error".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *ServiceUnavailableError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "service-unavailable-error".
func (e *ServiceUnavailableError) GoaErrorName() string {
	return "ServiceUnavailable"
}
